/* eslint-disable */



const peggyParser: {parse: any, SyntaxError: any, DefaultTracer?: any} = // Generated by Peggy 3.0.2.
//
// https://peggyjs.org/
// @ts-ignore
(function() {
// @ts-ignore
  "use strict";

// @ts-ignore
function peg$subclass(child, parent) {
// @ts-ignore
  function C() { this.constructor = child; }
// @ts-ignore
  C.prototype = parent.prototype;
// @ts-ignore
  child.prototype = new C();
}

// @ts-ignore
function peg$SyntaxError(message, expected, found, location) {
// @ts-ignore
  var self = Error.call(this, message);
  // istanbul ignore next Check is a necessary evil to support older environments
// @ts-ignore
  if (Object.setPrototypeOf) {
// @ts-ignore
    Object.setPrototypeOf(self, peg$SyntaxError.prototype);
  }
// @ts-ignore
  self.expected = expected;
// @ts-ignore
  self.found = found;
// @ts-ignore
  self.location = location;
// @ts-ignore
  self.name = "SyntaxError";
// @ts-ignore
  return self;
}

// @ts-ignore
peg$subclass(peg$SyntaxError, Error);

// @ts-ignore
function peg$padEnd(str, targetLength, padString) {
// @ts-ignore
  padString = padString || " ";
// @ts-ignore
  if (str.length > targetLength) { return str; }
// @ts-ignore
  targetLength -= str.length;
// @ts-ignore
  padString += padString.repeat(targetLength);
// @ts-ignore
  return str + padString.slice(0, targetLength);
}

// @ts-ignore
peg$SyntaxError.prototype.format = function(sources) {
// @ts-ignore
  var str = "Error: " + this.message;
// @ts-ignore
  if (this.location) {
// @ts-ignore
    var src = null;
// @ts-ignore
    var k;
// @ts-ignore
    for (k = 0; k < sources.length; k++) {
// @ts-ignore
      if (sources[k].source === this.location.source) {
// @ts-ignore
        src = sources[k].text.split(/\r\n|\n|\r/g);
// @ts-ignore
        break;
      }
    }
// @ts-ignore
    var s = this.location.start;
// @ts-ignore
    var offset_s = (this.location.source && (typeof this.location.source.offset === "function"))
// @ts-ignore
      ? this.location.source.offset(s)
// @ts-ignore
      : s;
// @ts-ignore
    var loc = this.location.source + ":" + offset_s.line + ":" + offset_s.column;
// @ts-ignore
    if (src) {
// @ts-ignore
      var e = this.location.end;
// @ts-ignore
      var filler = peg$padEnd("", offset_s.line.toString().length, ' ');
// @ts-ignore
      var line = src[s.line - 1];
// @ts-ignore
      var last = s.line === e.line ? e.column : line.length + 1;
// @ts-ignore
      var hatLen = (last - s.column) || 1;
// @ts-ignore
      str += "\n --> " + loc + "\n"
// @ts-ignore
          + filler + " |\n"
// @ts-ignore
          + offset_s.line + " | " + line + "\n"
// @ts-ignore
          + filler + " | " + peg$padEnd("", s.column - 1, ' ')
// @ts-ignore
          + peg$padEnd("", hatLen, "^");
// @ts-ignore
    } else {
// @ts-ignore
      str += "\n at " + loc;
    }
  }
// @ts-ignore
  return str;
};

// @ts-ignore
peg$SyntaxError.buildMessage = function(expected, found) {
// @ts-ignore
  var DESCRIBE_EXPECTATION_FNS = {
// @ts-ignore
    literal: function(expectation) {
// @ts-ignore
      return "\"" + literalEscape(expectation.text) + "\"";
    },

// @ts-ignore
    class: function(expectation) {
// @ts-ignore
      var escapedParts = expectation.parts.map(function(part) {
// @ts-ignore
        return Array.isArray(part)
// @ts-ignore
          ? classEscape(part[0]) + "-" + classEscape(part[1])
// @ts-ignore
          : classEscape(part);
      });

// @ts-ignore
      return "[" + (expectation.inverted ? "^" : "") + escapedParts.join("") + "]";
    },

// @ts-ignore
    any: function() {
// @ts-ignore
      return "any character";
    },

// @ts-ignore
    end: function() {
// @ts-ignore
      return "end of input";
    },

// @ts-ignore
    other: function(expectation) {
// @ts-ignore
      return expectation.description;
    }
  };

// @ts-ignore
  function hex(ch) {
// @ts-ignore
    return ch.charCodeAt(0).toString(16).toUpperCase();
  }

// @ts-ignore
  function literalEscape(s) {
// @ts-ignore
    return s
// @ts-ignore
      .replace(/\\/g, "\\\\")
// @ts-ignore
      .replace(/"/g,  "\\\"")
// @ts-ignore
      .replace(/\0/g, "\\0")
// @ts-ignore
      .replace(/\t/g, "\\t")
// @ts-ignore
      .replace(/\n/g, "\\n")
// @ts-ignore
      .replace(/\r/g, "\\r")
// @ts-ignore
      .replace(/[\x00-\x0F]/g,          function(ch) { return "\\x0" + hex(ch); })
// @ts-ignore
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return "\\x"  + hex(ch); });
  }

// @ts-ignore
  function classEscape(s) {
// @ts-ignore
    return s
// @ts-ignore
      .replace(/\\/g, "\\\\")
// @ts-ignore
      .replace(/\]/g, "\\]")
// @ts-ignore
      .replace(/\^/g, "\\^")
// @ts-ignore
      .replace(/-/g,  "\\-")
// @ts-ignore
      .replace(/\0/g, "\\0")
// @ts-ignore
      .replace(/\t/g, "\\t")
// @ts-ignore
      .replace(/\n/g, "\\n")
// @ts-ignore
      .replace(/\r/g, "\\r")
// @ts-ignore
      .replace(/[\x00-\x0F]/g,          function(ch) { return "\\x0" + hex(ch); })
// @ts-ignore
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return "\\x"  + hex(ch); });
  }

// @ts-ignore
  function describeExpectation(expectation) {
// @ts-ignore
    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
  }

// @ts-ignore
  function describeExpected(expected) {
// @ts-ignore
    var descriptions = expected.map(describeExpectation);
// @ts-ignore
    var i, j;

// @ts-ignore
    descriptions.sort();

// @ts-ignore
    if (descriptions.length > 0) {
// @ts-ignore
      for (i = 1, j = 1; i < descriptions.length; i++) {
// @ts-ignore
        if (descriptions[i - 1] !== descriptions[i]) {
// @ts-ignore
          descriptions[j] = descriptions[i];
// @ts-ignore
          j++;
        }
      }
// @ts-ignore
      descriptions.length = j;
    }

// @ts-ignore
    switch (descriptions.length) {
// @ts-ignore
      case 1:
// @ts-ignore
        return descriptions[0];

// @ts-ignore
      case 2:
// @ts-ignore
        return descriptions[0] + " or " + descriptions[1];

// @ts-ignore
      default:
// @ts-ignore
        return descriptions.slice(0, -1).join(", ")
// @ts-ignore
          + ", or "
// @ts-ignore
          + descriptions[descriptions.length - 1];
    }
  }

// @ts-ignore
  function describeFound(found) {
// @ts-ignore
    return found ? "\"" + literalEscape(found) + "\"" : "end of input";
  }

// @ts-ignore
  return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
};

// @ts-ignore
function peg$parse(input, options) {
// @ts-ignore
  options = options !== undefined ? options : {};

// @ts-ignore
  var peg$FAILED = {};
// @ts-ignore
  var peg$source = options.grammarSource;

// @ts-ignore
  var peg$startRuleFunctions = { start: peg$parsestart };
// @ts-ignore
  var peg$startRuleFunction = peg$parsestart;

// @ts-ignore
  var peg$c0 = "module";
  var peg$c1 = "struct";
  var peg$c2 = "class";
  var peg$c3 = "interface";
  var peg$c4 = "enum";
  var peg$c5 = "test";
  var peg$c6 = "var";
  var peg$c7 = "pub";
  var peg$c8 = "pri";
  var peg$c9 = "pro";
  var peg$c10 = "if";
  var peg$c11 = "else";
  var peg$c12 = "switch";
  var peg$c13 = "while";
  var peg$c14 = "for";
  var peg$c15 = "break";
  var peg$c16 = "continue";
  var peg$c17 = "return";
  var peg$c18 = "super";
  var peg$c19 = "new";
  var peg$c20 = "set";
  var peg$c21 = "get";
  var peg$c22 = "static";
  var peg$c23 = "in";
  var peg$c24 = "out";
  var peg$c25 = "throw";
  var peg$c26 = "...";
  var peg$c27 = "?";
  var peg$c28 = ":";
  var peg$c29 = ";";
  var peg$c30 = ",";
  var peg$c31 = ".";
  var peg$c32 = "~";
  var peg$c33 = "@";
  var peg$c34 = "#";
  var peg$c35 = "$";
  var peg$c36 = "(";
  var peg$c37 = ")";
  var peg$c38 = "{";
  var peg$c39 = "}";
  var peg$c40 = "[";
  var peg$c41 = "]";
  var peg$c42 = "=";
  var peg$c43 = "+=";
  var peg$c44 = "-=";
  var peg$c45 = "*=";
  var peg$c46 = "/=";
  var peg$c47 = "%=";
  var peg$c48 = "==";
  var peg$c49 = "!=";
  var peg$c50 = "!";
  var peg$c51 = "<";
  var peg$c52 = "<=";
  var peg$c53 = ">";
  var peg$c54 = ">=";
  var peg$c55 = "+";
  var peg$c56 = "-";
  var peg$c57 = "*";
  var peg$c58 = "/";
  var peg$c59 = "%";
  var peg$c60 = "&&";
  var peg$c61 = "||";
  var peg$c62 = "=>";
  var peg$c63 = "true";
  var peg$c64 = "false";
  var peg$c65 = "0x";
  var peg$c66 = "0";
  var peg$c67 = "'";
  var peg$c68 = "\"";
  var peg$c69 = "null";
  var peg$c70 = "//";
  var peg$c71 = "/*";
  var peg$c72 = "*/";

  var peg$r0 = /^[A-Za-z_]/;
  var peg$r1 = /^[A-Za-z0-9_]/;
  var peg$r2 = /^[1-9]/;
  var peg$r3 = /^[0-9]/;
  var peg$r4 = /^[0-9a-fA-F]/;
  var peg$r5 = /^[0-7]/;
  var peg$r6 = /^["\n\r"]/;
  var peg$r7 = /^[eE]/;
  var peg$r8 = /^[+\-]/;
  var peg$r9 = /^[\n\r]/;
  var peg$r10 = /^[ \t\n\r]/;

  var peg$e0 = peg$classExpectation([["A", "Z"], ["a", "z"], "_"], false, false);
  var peg$e1 = peg$classExpectation([["A", "Z"], ["a", "z"], ["0", "9"], "_"], false, false);
  var peg$e2 = peg$literalExpectation("module", false);
  var peg$e3 = peg$literalExpectation("struct", false);
  var peg$e4 = peg$literalExpectation("class", false);
  var peg$e5 = peg$literalExpectation("interface", false);
  var peg$e6 = peg$literalExpectation("enum", false);
  var peg$e7 = peg$literalExpectation("test", false);
  var peg$e8 = peg$literalExpectation("var", false);
  var peg$e9 = peg$literalExpectation("pub", false);
  var peg$e10 = peg$literalExpectation("pri", false);
  var peg$e11 = peg$literalExpectation("pro", false);
  var peg$e12 = peg$literalExpectation("if", false);
  var peg$e13 = peg$literalExpectation("else", false);
  var peg$e14 = peg$literalExpectation("switch", false);
  var peg$e15 = peg$literalExpectation("while", false);
  var peg$e16 = peg$literalExpectation("for", false);
  var peg$e17 = peg$literalExpectation("break", false);
  var peg$e18 = peg$literalExpectation("continue", false);
  var peg$e19 = peg$literalExpectation("return", false);
  var peg$e20 = peg$literalExpectation("super", false);
  var peg$e21 = peg$literalExpectation("new", false);
  var peg$e22 = peg$literalExpectation("set", false);
  var peg$e23 = peg$literalExpectation("get", false);
  var peg$e24 = peg$literalExpectation("static", false);
  var peg$e25 = peg$literalExpectation("in", false);
  var peg$e26 = peg$literalExpectation("out", false);
  var peg$e27 = peg$literalExpectation("throw", false);
  var peg$e28 = peg$literalExpectation("...", false);
  var peg$e29 = peg$literalExpectation("?", false);
  var peg$e30 = peg$literalExpectation(":", false);
  var peg$e31 = peg$literalExpectation(";", false);
  var peg$e32 = peg$literalExpectation(",", false);
  var peg$e33 = peg$literalExpectation(".", false);
  var peg$e34 = peg$literalExpectation("~", false);
  var peg$e35 = peg$literalExpectation("@", false);
  var peg$e36 = peg$literalExpectation("#", false);
  var peg$e37 = peg$literalExpectation("$", false);
  var peg$e38 = peg$literalExpectation("(", false);
  var peg$e39 = peg$literalExpectation(")", false);
  var peg$e40 = peg$literalExpectation("{", false);
  var peg$e41 = peg$literalExpectation("}", false);
  var peg$e42 = peg$literalExpectation("[", false);
  var peg$e43 = peg$literalExpectation("]", false);
  var peg$e44 = peg$literalExpectation("=", false);
  var peg$e45 = peg$literalExpectation("+=", false);
  var peg$e46 = peg$literalExpectation("-=", false);
  var peg$e47 = peg$literalExpectation("*=", false);
  var peg$e48 = peg$literalExpectation("/=", false);
  var peg$e49 = peg$literalExpectation("%=", false);
  var peg$e50 = peg$literalExpectation("==", false);
  var peg$e51 = peg$literalExpectation("!=", false);
  var peg$e52 = peg$literalExpectation("!", false);
  var peg$e53 = peg$literalExpectation("<", false);
  var peg$e54 = peg$literalExpectation("<=", false);
  var peg$e55 = peg$literalExpectation(">", false);
  var peg$e56 = peg$literalExpectation(">=", false);
  var peg$e57 = peg$literalExpectation("+", false);
  var peg$e58 = peg$literalExpectation("-", false);
  var peg$e59 = peg$literalExpectation("*", false);
  var peg$e60 = peg$literalExpectation("/", false);
  var peg$e61 = peg$literalExpectation("%", false);
  var peg$e62 = peg$literalExpectation("&&", false);
  var peg$e63 = peg$literalExpectation("||", false);
  var peg$e64 = peg$literalExpectation("=>", false);
  var peg$e65 = peg$literalExpectation("true", false);
  var peg$e66 = peg$literalExpectation("false", false);
  var peg$e67 = peg$classExpectation([["1", "9"]], false, false);
  var peg$e68 = peg$classExpectation([["0", "9"]], false, false);
  var peg$e69 = peg$literalExpectation("0x", false);
  var peg$e70 = peg$classExpectation([["0", "9"], ["a", "f"], ["A", "F"]], false, false);
  var peg$e71 = peg$literalExpectation("0", false);
  var peg$e72 = peg$classExpectation([["0", "7"]], false, false);
  var peg$e73 = peg$literalExpectation("'", false);
  var peg$e74 = peg$classExpectation(["\"", "\n", "\r", "\""], false, false);
  var peg$e75 = peg$anyExpectation();
  var peg$e76 = peg$literalExpectation("\"", false);
  var peg$e77 = peg$literalExpectation("null", false);
  var peg$e78 = peg$classExpectation(["e", "E"], false, false);
  var peg$e79 = peg$classExpectation(["+", "-"], false, false);
  var peg$e80 = peg$literalExpectation("//", false);
  var peg$e81 = peg$classExpectation(["\n", "\r"], false, false);
  var peg$e82 = peg$literalExpectation("/*", false);
  var peg$e83 = peg$literalExpectation("*/", false);
  var peg$e84 = peg$classExpectation([" ", "\t", "\n", "\r"], false, false);
// @ts-ignore

  var peg$f0 = function(moduleName, statements) { 
// @ts-ignore
  return {
// @ts-ignore
    type: "Script",
// @ts-ignore
    moduleName,
// @ts-ignore
    statements: statements? statements.map(s=>s[0]) : [],
// @ts-ignore
    location: location()
  }
};// @ts-ignore

  var peg$f1 = function(name) {
// @ts-ignore
    return { 
// @ts-ignore
      type: "ModuleDeclaration",
// @ts-ignore
      name,
// @ts-ignore
      location: location()
    } 
  };// @ts-ignore

  var peg$f2 = function(name, generic, members) {
// @ts-ignore
      return { 
// @ts-ignore
        type: "StructDeclaration", 
// @ts-ignore
        name, 
// @ts-ignore
        members,
// @ts-ignore
        generic,
// @ts-ignore
        location: location()
      }
  };// @ts-ignore

  var peg$f3 = function(dec) {
// @ts-ignore
    return dec; 
  };// @ts-ignore

  var peg$f4 = function(access, staticSymbol, meta, params, args, body) {
// @ts-ignore
      return { 
// @ts-ignore
        type: "StructMetaFunction",
// @ts-ignore
        static: staticSymbol,
// @ts-ignore
        meta, 
// @ts-ignore
        params: params || [],
// @ts-ignore
        args: args? args[4] : null,
// @ts-ignore
        body, 
// @ts-ignore
        access,
// @ts-ignore
        location: location()
      }
    };// @ts-ignore

  var peg$f5 = function(access, staticSymbol, meta, args, body) {
// @ts-ignore
      return { 
// @ts-ignore
        type: "StructMetaFunction",
// @ts-ignore
        static: staticSymbol,
// @ts-ignore
        meta, 
// @ts-ignore
        params: [],
// @ts-ignore
        args,
// @ts-ignore
        body, 
// @ts-ignore
        access,
// @ts-ignore
        location: location()
      }
    };// @ts-ignore

  var peg$f6 = function(access, staticSymbol, name, typePart, initPart) {
// @ts-ignore
      return {
// @ts-ignore
        type: "StructField",
// @ts-ignore
        access,
// @ts-ignore
        static: staticSymbol,
// @ts-ignore
        name,
// @ts-ignore
        typeInfo: typePart?typePart[2] : null,
// @ts-ignore
        init: initPart? initPart[2] : null,
// @ts-ignore
        location: location()
      }
    };// @ts-ignore

  var peg$f7 = function(decorator, access, staticSymbol, name, generic, params, args, returnPart, body) {
// @ts-ignore
      return {
// @ts-ignore
        type: "StructMethod",
// @ts-ignore
        decorator,
// @ts-ignore
        access: access,
// @ts-ignore
        static: staticSymbol,
// @ts-ignore
        generic,
// @ts-ignore
        name,
// @ts-ignore
        params: params || [],
// @ts-ignore
        args: args? args[4] : null,
// @ts-ignore
        returnType: returnPart? returnPart[2] : null,
// @ts-ignore
        body: body,
// @ts-ignore
        location: location()
      }
    };// @ts-ignore

  var peg$f8 = function(decorator, access, staticSymbol, name, generic, args, returnPart, body) {
// @ts-ignore
      return {
// @ts-ignore
        type: "StructMethod",
// @ts-ignore
        decorator,
// @ts-ignore
        access: access,
// @ts-ignore
        static: staticSymbol,
// @ts-ignore
        generic,
// @ts-ignore
        name,
// @ts-ignore
        params: [],
// @ts-ignore
        args,
// @ts-ignore
        returnType: returnPart? returnPart[2] : null,
// @ts-ignore
        body: body,
// @ts-ignore
        location: location()
      }
    };// @ts-ignore

  var peg$f9 = function(decorator, name, generic, superPart, members) {
// @ts-ignore
      return { 
// @ts-ignore
        type: "ClassDeclaration", 
// @ts-ignore
        name,  
// @ts-ignore
        inherits: superPart?superPart[1] : [],
// @ts-ignore
        members,
// @ts-ignore
        decorator,
// @ts-ignore
        generic,
// @ts-ignore
        location: location()
      }
    };// @ts-ignore

  var peg$f10 = function(dec) {
// @ts-ignore
    return dec;
  };// @ts-ignore

  var peg$f11 = function(access, staticSymbol, meta, params, args, argsPart, body) {
// @ts-ignore
      return { 
// @ts-ignore
        type: "ClassMetaFunction", 
// @ts-ignore
        meta, 
// @ts-ignore
        static: staticSymbol,
// @ts-ignore
        params: params || [], 
// @ts-ignore
        args: args? args[4] : null,
// @ts-ignore
        superArgs: argsPart? argsPart[2] : [], 
// @ts-ignore
        body: body,
// @ts-ignore
        access,
// @ts-ignore
        location: location()
      }
    };// @ts-ignore

  var peg$f12 = function(access, staticSymbol, meta, args, argsPart, body) {
// @ts-ignore
      return { 
// @ts-ignore
        type: "ClassMetaFunction", 
// @ts-ignore
        meta, 
// @ts-ignore
        static: staticSymbol,
// @ts-ignore
        params: [], 
// @ts-ignore
        args,
// @ts-ignore
        superArgs: argsPart? argsPart[2] : [], 
// @ts-ignore
        body: body,
// @ts-ignore
        access,
// @ts-ignore
        location: location()
      }
    };// @ts-ignore

  var peg$f13 = function(decorator, access, staticSymbol, name, typePart, initPart) {
// @ts-ignore
      return {
// @ts-ignore
        type: "ClassField",
// @ts-ignore
        decorator,
// @ts-ignore
        access: access,
// @ts-ignore
        static: staticSymbol,
// @ts-ignore
        name,
// @ts-ignore
        typeInfo: typePart?typePart[2] : null,
// @ts-ignore
        init: initPart?initPart[2] : null,
// @ts-ignore
        location: location()
      }
    };// @ts-ignore

  var peg$f14 = function(decorator, access, staticSymbol, name, generic, params, args, returnPart, body) {
// @ts-ignore
      return {
// @ts-ignore
        type: "ClassMethod",
// @ts-ignore
        decorator,
// @ts-ignore
        generic,
// @ts-ignore
        access: access,
// @ts-ignore
        static: staticSymbol,
// @ts-ignore
        name,
// @ts-ignore
        params: params || [],
// @ts-ignore
        args: args? args[4] : null,
// @ts-ignore
        returnType: returnPart?returnPart[2] : null,
// @ts-ignore
        body,
// @ts-ignore
        location: location()
      }
    };// @ts-ignore

  var peg$f15 = function(decorator, access, staticSymbol, name, generic, args, returnPart, body) {
// @ts-ignore
      return {
// @ts-ignore
        type: "ClassMethod",
// @ts-ignore
        decorator,
// @ts-ignore
        generic,
// @ts-ignore
        access: access,
// @ts-ignore
        static: staticSymbol,
// @ts-ignore
        name,
// @ts-ignore
        params: [],
// @ts-ignore
        args,
// @ts-ignore
        returnType: returnPart?returnPart[2] : null,
// @ts-ignore
        body,
// @ts-ignore
        location: location()
      }
    };// @ts-ignore

  var peg$f16 = function(decorator, access, staticSymbol, modifier) {
// @ts-ignore
    return {
// @ts-ignore
      type: "ClassProperty",
// @ts-ignore
      access,
// @ts-ignore
      static: staticSymbol,
// @ts-ignore
      modifier,
// @ts-ignore
      decorator,
// @ts-ignore
      location: location()
    }
  };// @ts-ignore

  var peg$f17 = function(name, returnPart, body) {
// @ts-ignore
      return {
// @ts-ignore
        type: "Property",
// @ts-ignore
        kind: "get",
// @ts-ignore
        name,
// @ts-ignore
        targetType: returnPart?returnPart[2] : null,
// @ts-ignore
        param: null,
// @ts-ignore
        body,
// @ts-ignore
        location: location()
      }
    };// @ts-ignore

  var peg$f18 = function(name, param, paramTypePart, body) {
// @ts-ignore
      return {
// @ts-ignore
        type: "Property",
// @ts-ignore
        kind: "set",
// @ts-ignore
        name,
// @ts-ignore
        param,
// @ts-ignore
        targetType:paramTypePart?paramTypePart[2]:null,
// @ts-ignore
        body,
// @ts-ignore
        location: location()
      }
    };// @ts-ignore

  var peg$f19 = function(name, generic, extendsPart, members) {
// @ts-ignore
      return { 
// @ts-ignore
        type: "InterfaceDeclaration", 
// @ts-ignore
        name, 
// @ts-ignore
        members,
// @ts-ignore
        generic,
// @ts-ignore
        inherits: extendsPart?extendsPart[2]:[],
// @ts-ignore
        location: location()
      }
    };// @ts-ignore

  var peg$f20 = function(dec) {
// @ts-ignore
    return dec;
  };// @ts-ignore

  var peg$f21 = function(access, name, generic, params, args, returnPart) {
// @ts-ignore
      return {
// @ts-ignore
        type: "InterfaceMethodSignature",
// @ts-ignore
        name,
// @ts-ignore
        params: params || [],
// @ts-ignore
        args: args? args[4] : null,
// @ts-ignore
        returnType: returnPart?returnPart[2] : null,
// @ts-ignore
        access,
// @ts-ignore
        generic,
// @ts-ignore
        location: location()
      }
    };// @ts-ignore

  var peg$f22 = function(access, name, generic, args, returnPart) {
// @ts-ignore
      return {
// @ts-ignore
        type: "InterfaceMethodSignature",
// @ts-ignore
        name,
// @ts-ignore
        params: [],
// @ts-ignore
        args,
// @ts-ignore
        returnType: returnPart?returnPart[2] : null,
// @ts-ignore
        access,
// @ts-ignore
        generic,
// @ts-ignore
        location: location()
      }
    };// @ts-ignore

  var peg$f23 = function(access, propertyType, name, typePart) {
// @ts-ignore
      return {
// @ts-ignore
        type: "InterfacePropertySignature",
// @ts-ignore
        name,
// @ts-ignore
        typeInfo: typePart?typePart[2] : null,
// @ts-ignore
        access: access,
// @ts-ignore
        propertyType,
// @ts-ignore
        location: location()
      }
    };// @ts-ignore

  var peg$f24 = function() {// @ts-ignore
return "get_set"};// @ts-ignore

  var peg$f25 = function() {// @ts-ignore
return "get_set"};// @ts-ignore

  var peg$f26 = function() {// @ts-ignore
return "get"};// @ts-ignore

  var peg$f27 = function() {// @ts-ignore
return "set"};// @ts-ignore

  var peg$f28 = function(access, name, typePart) {
// @ts-ignore
      return {
// @ts-ignore
        type: "InterfaceFieldDeclaration",
// @ts-ignore
        name,
// @ts-ignore
        targetType: typePart? typePart[3] : null,
// @ts-ignore
        access,
// @ts-ignore
        location: location()
      }
    };// @ts-ignore

  var peg$f29 = function(name, baseTypePart, members) {
// @ts-ignore
      return { 
// @ts-ignore
        type: "EnumDeclaration", 
// @ts-ignore
        name, 
// @ts-ignore
        baseType: baseTypePart?baseTypePart[2]:null, 
// @ts-ignore
        members,
// @ts-ignore
        location: location()
      }
    };// @ts-ignore

  var peg$f30 = function(key, valuePart) {
// @ts-ignore
      return {
// @ts-ignore
        type: "EnumMember",
// @ts-ignore
        name: key, 
// @ts-ignore
        value: valuePart?valuePart[2] : null,
// @ts-ignore
        location: location()
      }
    };// @ts-ignore

  var peg$f31 = function(params) {
// @ts-ignore
    return {
// @ts-ignore
      type: "GenericDeclaration",
// @ts-ignore
      params,
// @ts-ignore
      location: location()
    }
  };// @ts-ignore

  var peg$f32 = function(dec) {
    // Block 本身也是语句（如 if 的 then 块） 
// @ts-ignore
    return dec;
  };// @ts-ignore

  var peg$f33 = function(expr) { 
// @ts-ignore
    return { 
// @ts-ignore
      type: "ExpressionStatement", 
// @ts-ignore
      expr,
// @ts-ignore
      location: location()
    } 
  };// @ts-ignore

  var peg$f34 = function(pattern, typePart, value) { 
// @ts-ignore
      return { 
// @ts-ignore
        type: "VariableDeclaration", 
// @ts-ignore
        pattern, 
// @ts-ignore
        value,
// @ts-ignore
        typeInfo: typePart? typePart[3] : null,
// @ts-ignore
        location: location()
      } 
    };// @ts-ignore

  var peg$f35 = function(expr) {
// @ts-ignore
    return {
// @ts-ignore
      type: "ReturnStatement",
// @ts-ignore
      expr,
// @ts-ignore
      location: location()
    }
  };// @ts-ignore

  var peg$f36 = function(ctrl, expr) {
// @ts-ignore
    return {
// @ts-ignore
      type: "BreakContinueStatement",
// @ts-ignore
      isBreak: ctrl === "break",
// @ts-ignore
      expr,
// @ts-ignore
      location: location()
    }
  };// @ts-ignore

  var peg$f37 = function(expr) {
// @ts-ignore
    return {
// @ts-ignore
      type: "OutStatement",
// @ts-ignore
      expr,
// @ts-ignore
      location: location()
    }
  };// @ts-ignore

  var peg$f38 = function(expr) {
// @ts-ignore
    return {
// @ts-ignore
      type: "ThrowStatement",
// @ts-ignore
      expr,
// @ts-ignore
      location: location()
    }
  };// @ts-ignore

  var peg$f39 = function(expr) {
// @ts-ignore
    expr.isStatement = true;
// @ts-ignore
    return expr;
  };// @ts-ignore

  var peg$f40 = function(expr) {
// @ts-ignore
    expr.isStatement = true;
// @ts-ignore
    return expr;
  };// @ts-ignore

  var peg$f41 = function(value, block) { 
// @ts-ignore
    return { 
// @ts-ignore
      type: "SwitchCase", 
// @ts-ignore
      value, 
// @ts-ignore
      block,
// @ts-ignore
      location: location() 
    } 
  };// @ts-ignore

  var peg$f42 = function(block) { 
// @ts-ignore
    return { 
// @ts-ignore
      type: "SwitchDefault", 
// @ts-ignore
      block,
// @ts-ignore
      location: location()
    } 
  };// @ts-ignore

  var peg$f43 = function(expr) {
// @ts-ignore
    expr.isStatement = true;
// @ts-ignore
    return expr;
  };// @ts-ignore

  var peg$f44 = function(cond, block) {
// @ts-ignore
    return {
// @ts-ignore
      type: "WhileLoop",
// @ts-ignore
      isStatement: false,
// @ts-ignore
      cond,
// @ts-ignore
      block,
// @ts-ignore
      location: location()
    }
  };// @ts-ignore

  var peg$f45 = function(init, cond, step, block) {
// @ts-ignore
    return {
// @ts-ignore
      type: "ForLoop",
// @ts-ignore
      isStatement: false,
// @ts-ignore
      init,
// @ts-ignore
      cond,
// @ts-ignore
      step,
// @ts-ignore
      block,
// @ts-ignore
      location: location()
    }
  };// @ts-ignore

  var peg$f46 = function(pattern, typePart, expr, block) {
// @ts-ignore
    return {
// @ts-ignore
      type:"ForeachLoop",
// @ts-ignore
      pattern,
// @ts-ignore
      isStatement: false,
// @ts-ignore
      typeInfo: typePart? typePart[3] : null,
// @ts-ignore
      expr,
// @ts-ignore
      block,
// @ts-ignore
      location: location()
    }
  };// @ts-ignore

  var peg$f47 = function(statements) { 
// @ts-ignore
      return { 
// @ts-ignore
        type: "Block",
// @ts-ignore
        isStatement: true,
// @ts-ignore
        body: statements.filter(s => s !== null), // 过滤空白和注释
// @ts-ignore
        location: location()
      } 
    };// @ts-ignore

  var peg$f48 = function(exp) {
// @ts-ignore
    return exp; 
  };// @ts-ignore

  var peg$f49 = function(left, op, right) { 
// @ts-ignore
    return { 
// @ts-ignore
      type: "Assignment", 
// @ts-ignore
      op, 
// @ts-ignore
      left, 
// @ts-ignore
      right,
// @ts-ignore
      location: location(),
    } 
  };// @ts-ignore

  var peg$f50 = function(test, consequent, alternate) { 
// @ts-ignore
    return { 
// @ts-ignore
      type: "Conditional", 
// @ts-ignore
      test, 
// @ts-ignore
      consequent, 
// @ts-ignore
      alternate,
// @ts-ignore
      location: location()
    } 
  };// @ts-ignore

  var peg$f51 = function(left, parts) { 
// @ts-ignore
    return parts.reduce((acc, [,,,right]) => ({ 
// @ts-ignore
      type: "Logical", 
// @ts-ignore
      op: "||", 
// @ts-ignore
      left: acc, 
// @ts-ignore
      right, 
// @ts-ignore
      location: location()
// @ts-ignore
    }), left) 
  };// @ts-ignore

  var peg$f52 = function(left, parts) { 
// @ts-ignore
    return parts.reduce((acc, [,,,right]) => ({ 
// @ts-ignore
      type: "Logical", 
// @ts-ignore
      op: "&&", 
// @ts-ignore
      left: acc, 
// @ts-ignore
      right,
// @ts-ignore
      location: location()
// @ts-ignore
    }), left) 
  };// @ts-ignore

  var peg$f53 = function(left, parts) { 
// @ts-ignore
    return parts.reduce((acc, [,op,,right]) => ({ 
// @ts-ignore
      type: "Binary", 
// @ts-ignore
      op, 
// @ts-ignore
      left: acc, 
// @ts-ignore
      right,
// @ts-ignore
      location: location()
// @ts-ignore
    }), left) 
  };// @ts-ignore

  var peg$f54 = function(left, parts) { 
// @ts-ignore
    return parts.reduce((acc, [,op,,right]) => ({ 
// @ts-ignore
      type: "Binary", 
// @ts-ignore
      op, 
// @ts-ignore
      left: acc, 
// @ts-ignore
      right,
// @ts-ignore
      location: location()
// @ts-ignore
    }), left) 
  };// @ts-ignore

  var peg$f55 = function(left, parts) { 
// @ts-ignore
    return parts.reduce((acc, [,op,,right]) => ({ 
// @ts-ignore
      type: "Binary", 
// @ts-ignore
      op, 
// @ts-ignore
      left: acc, 
// @ts-ignore
      right,
// @ts-ignore
      location: location() 
// @ts-ignore
    }), left) 
  };// @ts-ignore

  var peg$f56 = function(left, parts) { 
// @ts-ignore
    return parts.reduce((acc, [,op,,right]) => ({ 
// @ts-ignore
      type: "Binary", 
// @ts-ignore
      op, 
// @ts-ignore
      left: acc, 
// @ts-ignore
      right,
// @ts-ignore
      location: location()
// @ts-ignore
    }), left) 
  };// @ts-ignore

  var peg$f57 = function(op, argument) { 
// @ts-ignore
    return { 
// @ts-ignore
      type: "Unary", 
// @ts-ignore
      op, 
// @ts-ignore
      argument,
// @ts-ignore
      location: location()
    } 
  };// @ts-ignore

  var peg$f58 = function(property, members) {
// @ts-ignore
    return {
// @ts-ignore
      type: "PrimaryExpression",
// @ts-ignore
      property,
// @ts-ignore
      members,
// @ts-ignore
      location: location()
    }
  };// @ts-ignore

  var peg$f59 = function(property) { 
// @ts-ignore
    return { 
// @ts-ignore
      type: "MemberExpression", 
// @ts-ignore
      property, 
// @ts-ignore
      computed: false,
// @ts-ignore
      location: location()
    } 
  };// @ts-ignore

  var peg$f60 = function(property) { 
// @ts-ignore
    return { 
// @ts-ignore
      type: "MemberExpression", 
// @ts-ignore
      property, 
// @ts-ignore
      computed: true,
// @ts-ignore
      location: location(), 
    } 
  };// @ts-ignore

  var peg$f61 = function(args) {
// @ts-ignore
    return {
// @ts-ignore
      type: "FunctionCall",
// @ts-ignore
      args: args || [],
// @ts-ignore
      location: location()
    }
  };// @ts-ignore

  var peg$f62 = function(value) {// @ts-ignore
return {type: "ValueLiteral", value, location: location()}};// @ts-ignore

  var peg$f63 = function(value) {// @ts-ignore
return {type: "IdentifierLiteral", value, location: location()}};// @ts-ignore

  var peg$f64 = function(expr) {// @ts-ignore
 return expr };// @ts-ignore

  var peg$f65 = function(block) { 
// @ts-ignore
      block.isStatement = false;
// @ts-ignore
      return block 
    };// @ts-ignore

  var peg$f66 = function(elements) { 
// @ts-ignore
    return { 
// @ts-ignore
      type: 'ArrayLiteral', 
// @ts-ignore
      elements: elements? ([elements[0], ...(elements[1]?elements[1].map(v=>v[3]):[])]) :[], 
// @ts-ignore
      location: location()
    } 
  };// @ts-ignore

  var peg$f67 = function(element) {
// @ts-ignore
    return { 
// @ts-ignore
      type: 'UnpackLiteral', 
// @ts-ignore
      element, 
// @ts-ignore
      location: location() 
    }
  };// @ts-ignore

  var peg$f68 = function(pairs) { 
// @ts-ignore
      return { 
// @ts-ignore
        type: "ObjectLiteral", 
// @ts-ignore
        properties: pairs ? [pairs[0], ...(pairs[1]?pairs[1].map(v=>v[3]):[])] : [],
// @ts-ignore
        location: location() 
      } 
    };// @ts-ignore

  var peg$f69 = function(key, value) {
// @ts-ignore
      return { 
// @ts-ignore
        type: "KeyValuePair",
// @ts-ignore
        key, 
// @ts-ignore
        value,
// @ts-ignore
        location: location()
      }
    };// @ts-ignore

  var peg$f70 = function(expr) {// @ts-ignore
 return expr };// @ts-ignore

  var peg$f71 = function(params, args, block) {
// @ts-ignore
    return {
// @ts-ignore
      type: "LambdaExpression",
// @ts-ignore
      params: params || [],
// @ts-ignore
      args: args? args[4] : null,
// @ts-ignore
      block,
// @ts-ignore
      location: location()
    }
  };// @ts-ignore

  var peg$f72 = function(args, block) {
// @ts-ignore
    return {
// @ts-ignore
      type: "LambdaExpression",
// @ts-ignore
      params: [],
// @ts-ignore
      args,
// @ts-ignore
      block,
// @ts-ignore
      location: location()
    }
  };// @ts-ignore

  var peg$f73 = function(condition, thenExpr, elseExpr) {
// @ts-ignore
      return {
// @ts-ignore
        type: "IfExpression",
// @ts-ignore
        isStatement: false,
// @ts-ignore
        condition,
// @ts-ignore
        then: thenExpr,
// @ts-ignore
        else: elseExpr ? elseExpr[3] : null,
// @ts-ignore
        location: location()
      }
    };// @ts-ignore

  var peg$f74 = function(expr, cases, defaultCase) {
// @ts-ignore
      return {
// @ts-ignore
        type: "SwitchExpression",
// @ts-ignore
        isStatement: false,
// @ts-ignore
        expr,
// @ts-ignore
        cases: cases? cases : [],
// @ts-ignore
        default: defaultCase,
// @ts-ignore
        location: location()
      }
    };// @ts-ignore

  var peg$f75 = function() {
// @ts-ignore
    return {
// @ts-ignore
      type: "UnaryOperator",
// @ts-ignore
      operator:text(),
// @ts-ignore
      location: location()
    }
  };// @ts-ignore

  var peg$f76 = function(decorator, name, generic, params, args, returnPart, body) {
// @ts-ignore
    return {
// @ts-ignore
      type: "FunctionDeclaration",
// @ts-ignore
      name,
// @ts-ignore
      params: params || [],
// @ts-ignore
      args: args? args[4] : null,
// @ts-ignore
      generic,
// @ts-ignore
      decorator,
// @ts-ignore
      returnType: returnPart? returnPart[2] : null,
// @ts-ignore
      body,
// @ts-ignore
      location: location
    }
  };// @ts-ignore

  var peg$f77 = function(decorator, name, generic, args, returnPart, body) {
// @ts-ignore
    return {
// @ts-ignore
      type: "FunctionDeclaration",
// @ts-ignore
      name,
// @ts-ignore
      params: [],
// @ts-ignore
      args,
// @ts-ignore
      generic,
// @ts-ignore
      decorator,
// @ts-ignore
      returnType: returnPart? returnPart[2] : null,
// @ts-ignore
      body,
// @ts-ignore
      location: location
    }
  };// @ts-ignore

  var peg$f78 = function(name, params, args, body) {
// @ts-ignore
    return {
// @ts-ignore
      type: "TestDeclaration",
// @ts-ignore
      name,
// @ts-ignore
      params: params || [],
// @ts-ignore
      args: args? args[4] : null,
// @ts-ignore
      body,
// @ts-ignore
      location: location()
    }
  };// @ts-ignore

  var peg$f79 = function(name, dimensions) {
// @ts-ignore
  return {
// @ts-ignore
    type: "Type",
// @ts-ignore
    name,
// @ts-ignore
    dimensions: dimensions.length,
// @ts-ignore
    location: location()
  }
};// @ts-ignore

  var peg$f80 = function(name, params) {
// @ts-ignore
  return{
// @ts-ignore
    type: "GenericType",
// @ts-ignore
    name,
// @ts-ignore
    params,
// @ts-ignore
    location: location()
  }
};// @ts-ignore

  var peg$f81 = function(types) {
// @ts-ignore
  return{
// @ts-ignore
    type: "TupleType",
// @ts-ignore
    elements: types,
// @ts-ignore
    location: location()
  }
};// @ts-ignore

  var peg$f82 = function(name, typePart, defaultValuePart) { 
// @ts-ignore
    return {
// @ts-ignore
      type: "Parameter",
// @ts-ignore
      name, 
// @ts-ignore
      typeInfo: typePart? typePart[2] : null,
// @ts-ignore
      defaultValue: defaultValuePart? defaultValuePart[2] : null,
// @ts-ignore
      location: location(),
    } 
  };// @ts-ignore

  var peg$f83 = function(head, tail) { 
// @ts-ignore
      return [head].concat(tail.map(t => t[2])) 
    };// @ts-ignore

  var peg$f84 = function(head, tail) {
// @ts-ignore
    return [head].concat(tail.map(t => t[2])) 
  };// @ts-ignore

  var peg$f85 = function(head, tail) {
// @ts-ignore
    return [head].concat(tail.map(t => t[2])) 
  };// @ts-ignore

  var peg$f86 = function(name) {
// @ts-ignore
  return {
// @ts-ignore
    type: "Meta",
// @ts-ignore
    name,
// @ts-ignore
    location: location()
  }
};// @ts-ignore

  var peg$f87 = function(expr) {
// @ts-ignore
  return {
// @ts-ignore
    type: "DecoratorExpression",
// @ts-ignore
    expr,
// @ts-ignore
    location: location()
  }
};// @ts-ignore

  var peg$f88 = function(keys) { 
// @ts-ignore
    return {
// @ts-ignore
      type: "DestructuringObject",
// @ts-ignore
      keys,
// @ts-ignore
      location: location()
    } 
  };// @ts-ignore

  var peg$f89 = function(keys) { 
// @ts-ignore
    return {
// @ts-ignore
      type: "DestructuringArray",
// @ts-ignore
      keys,
// @ts-ignore
      location: location()
    } 
  };// @ts-ignore

  var peg$f90 = function(head, tail) { 
// @ts-ignore
    return [head].concat(tail.map(t => t[2])) 
  };// @ts-ignore

  var peg$f91 = function() { 
// @ts-ignore
  return {
// @ts-ignore
    type: "Identifier",
// @ts-ignore
    name: text(),
// @ts-ignore
    location: location()
  }   
};// @ts-ignore

  var peg$f92 = function() {
// @ts-ignore
  return {
// @ts-ignore
    type: "Boolean",
// @ts-ignore
    value: text() == "true",
// @ts-ignore
    location: location()
  }
};// @ts-ignore

  var peg$f93 = function() {
// @ts-ignore
  return {
// @ts-ignore
    type: "Integer",
// @ts-ignore
    value: parseInt(text(), 10),
// @ts-ignore
    location: location()
  }
};// @ts-ignore

  var peg$f94 = function() {
// @ts-ignore
  return {
// @ts-ignore
    type: "Integer",
// @ts-ignore
    value: parseInt(text(), 16),
// @ts-ignore
    location: location()
  }
};// @ts-ignore

  var peg$f95 = function() {
// @ts-ignore
  return {
// @ts-ignore
    type: "Integer",
// @ts-ignore
    value: parseInt(text(), 8),
// @ts-ignore
    location: location()
  }
};// @ts-ignore

  var peg$f96 = function(ch) {
// @ts-ignore
  return {
// @ts-ignore
    type:"Char",
// @ts-ignore
    value:ch? ch[1]: '',
// @ts-ignore
    location: location()
  }
};// @ts-ignore

  var peg$f97 = function(str) {
// @ts-ignore
  return{ 
// @ts-ignore
    type: "String",
// @ts-ignore
    value: str? str.map(v=>v[1]).join('') : '',
// @ts-ignore
    location: location()
  }
};// @ts-ignore

  var peg$f98 = function() {
// @ts-ignore
  return {
// @ts-ignore
    type: "Null",
// @ts-ignore
    location: location()
  }
};// @ts-ignore

  var peg$f99 = function() {
// @ts-ignore
  return {
// @ts-ignore
    type:"Float",
// @ts-ignore
    value:parseFloat(text()),
// @ts-ignore
    location: location()
  };
};// @ts-ignore

  var peg$f100 = function() {
// @ts-ignore
  return undefined;
};
// @ts-ignore
  var peg$currPos = 0;
// @ts-ignore
  var peg$savedPos = 0;
// @ts-ignore
  var peg$posDetailsCache = [{ line: 1, column: 1 }];
// @ts-ignore
  var peg$maxFailPos = 0;
// @ts-ignore
  var peg$maxFailExpected = [];
// @ts-ignore
  var peg$silentFails = 0;

// @ts-ignore
  var peg$result;

// @ts-ignore
  if ("startRule" in options) {
// @ts-ignore
    if (!(options.startRule in peg$startRuleFunctions)) {
// @ts-ignore
      throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
    }

// @ts-ignore
    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
  }

// @ts-ignore
  function text() {
// @ts-ignore
    return input.substring(peg$savedPos, peg$currPos);
  }

// @ts-ignore
  function offset() {
// @ts-ignore
    return peg$savedPos;
  }

// @ts-ignore
  function range() {
// @ts-ignore
    return {
// @ts-ignore
      source: peg$source,
// @ts-ignore
      start: peg$savedPos,
// @ts-ignore
      end: peg$currPos
    };
  }

// @ts-ignore
  function location() {
// @ts-ignore
    return peg$computeLocation(peg$savedPos, peg$currPos);
  }

// @ts-ignore
  function expected(description, location) {
// @ts-ignore
    location = location !== undefined
// @ts-ignore
      ? location
// @ts-ignore
      : peg$computeLocation(peg$savedPos, peg$currPos);

// @ts-ignore
    throw peg$buildStructuredError(
// @ts-ignore
      [peg$otherExpectation(description)],
// @ts-ignore
      input.substring(peg$savedPos, peg$currPos),
// @ts-ignore
      location
    );
  }

// @ts-ignore
  function error(message, location) {
// @ts-ignore
    location = location !== undefined
// @ts-ignore
      ? location
// @ts-ignore
      : peg$computeLocation(peg$savedPos, peg$currPos);

// @ts-ignore
    throw peg$buildSimpleError(message, location);
  }

// @ts-ignore
  function peg$literalExpectation(text, ignoreCase) {
// @ts-ignore
    return { type: "literal", text: text, ignoreCase: ignoreCase };
  }

// @ts-ignore
  function peg$classExpectation(parts, inverted, ignoreCase) {
// @ts-ignore
    return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
  }

// @ts-ignore
  function peg$anyExpectation() {
// @ts-ignore
    return { type: "any" };
  }

// @ts-ignore
  function peg$endExpectation() {
// @ts-ignore
    return { type: "end" };
  }

// @ts-ignore
  function peg$otherExpectation(description) {
// @ts-ignore
    return { type: "other", description: description };
  }

// @ts-ignore
  function peg$computePosDetails(pos) {
// @ts-ignore
    var details = peg$posDetailsCache[pos];
// @ts-ignore
    var p;

// @ts-ignore
    if (details) {
// @ts-ignore
      return details;
// @ts-ignore
    } else {
// @ts-ignore
      p = pos - 1;
// @ts-ignore
      while (!peg$posDetailsCache[p]) {
// @ts-ignore
        p--;
      }

// @ts-ignore
      details = peg$posDetailsCache[p];
// @ts-ignore
      details = {
// @ts-ignore
        line: details.line,
// @ts-ignore
        column: details.column
      };

// @ts-ignore
      while (p < pos) {
// @ts-ignore
        if (input.charCodeAt(p) === 10) {
// @ts-ignore
          details.line++;
// @ts-ignore
          details.column = 1;
// @ts-ignore
        } else {
// @ts-ignore
          details.column++;
        }

// @ts-ignore
        p++;
      }

// @ts-ignore
      peg$posDetailsCache[pos] = details;

// @ts-ignore
      return details;
    }
  }

// @ts-ignore
  function peg$computeLocation(startPos, endPos, offset) {
// @ts-ignore
    var startPosDetails = peg$computePosDetails(startPos);
// @ts-ignore
    var endPosDetails = peg$computePosDetails(endPos);

// @ts-ignore
    var res = {
// @ts-ignore
      source: peg$source,
// @ts-ignore
      start: {
// @ts-ignore
        offset: startPos,
// @ts-ignore
        line: startPosDetails.line,
// @ts-ignore
        column: startPosDetails.column
      },
// @ts-ignore
      end: {
// @ts-ignore
        offset: endPos,
// @ts-ignore
        line: endPosDetails.line,
// @ts-ignore
        column: endPosDetails.column
      }
    };
// @ts-ignore
    if (offset && peg$source && (typeof peg$source.offset === "function")) {
// @ts-ignore
      res.start = peg$source.offset(res.start);
// @ts-ignore
      res.end = peg$source.offset(res.end);
    }
// @ts-ignore
    return res;
  }

// @ts-ignore
  function peg$fail(expected) {
// @ts-ignore
    if (peg$currPos < peg$maxFailPos) { return; }

// @ts-ignore
    if (peg$currPos > peg$maxFailPos) {
// @ts-ignore
      peg$maxFailPos = peg$currPos;
// @ts-ignore
      peg$maxFailExpected = [];
    }

// @ts-ignore
    peg$maxFailExpected.push(expected);
  }

// @ts-ignore
  function peg$buildSimpleError(message, location) {
// @ts-ignore
    return new peg$SyntaxError(message, null, null, location);
  }

// @ts-ignore
  function peg$buildStructuredError(expected, found, location) {
// @ts-ignore
    return new peg$SyntaxError(
// @ts-ignore
      peg$SyntaxError.buildMessage(expected, found),
// @ts-ignore
      expected,
// @ts-ignore
      found,
// @ts-ignore
      location
    );
  }

// @ts-ignore
  function // @ts-ignore
peg$parsestart() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parse_();
// @ts-ignore
    s2 = peg$parseModuleDeclaration();
// @ts-ignore
    if (s2 === peg$FAILED) {
// @ts-ignore
      s2 = null;
    }
// @ts-ignore
    s3 = peg$parse_();
// @ts-ignore
    s4 = [];
// @ts-ignore
    s5 = peg$currPos;
// @ts-ignore
    s6 = peg$parseTopLevelStatement();
// @ts-ignore
    if (s6 !== peg$FAILED) {
// @ts-ignore
      s7 = peg$parse_();
// @ts-ignore
      s6 = [s6, s7];
// @ts-ignore
      s5 = s6;
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s5;
// @ts-ignore
      s5 = peg$FAILED;
    }
// @ts-ignore
    while (s5 !== peg$FAILED) {
// @ts-ignore
      s4.push(s5);
// @ts-ignore
      s5 = peg$currPos;
// @ts-ignore
      s6 = peg$parseTopLevelStatement();
// @ts-ignore
      if (s6 !== peg$FAILED) {
// @ts-ignore
        s7 = peg$parse_();
// @ts-ignore
        s6 = [s6, s7];
// @ts-ignore
        s5 = s6;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s5;
// @ts-ignore
        s5 = peg$FAILED;
      }
    }
// @ts-ignore
    peg$savedPos = s0;
// @ts-ignore
    s0 = peg$f0(s2, s4);

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseTopLevelStatement() {
// @ts-ignore
    var s0;

// @ts-ignore
    s0 = peg$parseStructDeclaration();
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$parseClassDeclaration();
// @ts-ignore
      if (s0 === peg$FAILED) {
// @ts-ignore
        s0 = peg$parseEnumDeclaration();
// @ts-ignore
        if (s0 === peg$FAILED) {
// @ts-ignore
          s0 = peg$parseInterfaceDeclaration();
// @ts-ignore
          if (s0 === peg$FAILED) {
// @ts-ignore
            s0 = peg$parseVariableDeclaration();
// @ts-ignore
            if (s0 === peg$FAILED) {
// @ts-ignore
              s0 = peg$parseFunctionDeclaration();
// @ts-ignore
              if (s0 === peg$FAILED) {
// @ts-ignore
                s0 = peg$parseTestDeclaration();
// @ts-ignore
                if (s0 === peg$FAILED) {
// @ts-ignore
                  s0 = peg$parseExpressionStatement();
                }
              }
            }
          }
        }
      }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseModuleDeclaration() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseMODULE();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse_();
// @ts-ignore
      s3 = peg$parseIDENTIFIER();
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s3 = peg$parseSTRING();
      }
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s4 = peg$parse_();
// @ts-ignore
        s5 = peg$parseSEMICOLON();
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          peg$savedPos = s0;
// @ts-ignore
          s0 = peg$f1(s3);
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseStructDeclaration() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseSTRUCT();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse_();
// @ts-ignore
      s3 = peg$parseIDENTIFIER();
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s4 = peg$parse_();
// @ts-ignore
        s5 = peg$parseGenericDeclaration();
// @ts-ignore
        if (s5 === peg$FAILED) {
// @ts-ignore
          s5 = null;
        }
// @ts-ignore
        s6 = peg$parse_();
// @ts-ignore
        s7 = peg$parseLBRACE();
// @ts-ignore
        if (s7 !== peg$FAILED) {
// @ts-ignore
          s8 = peg$parse_();
// @ts-ignore
          s9 = [];
// @ts-ignore
          s10 = peg$parseStructMember();
// @ts-ignore
          while (s10 !== peg$FAILED) {
// @ts-ignore
            s9.push(s10);
// @ts-ignore
            s10 = peg$parseStructMember();
          }
// @ts-ignore
          s10 = peg$parse_();
// @ts-ignore
          s11 = peg$parseRBRACE();
// @ts-ignore
          if (s11 !== peg$FAILED) {
// @ts-ignore
            peg$savedPos = s0;
// @ts-ignore
            s0 = peg$f2(s3, s5, s9);
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseStructMember() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parse_();
// @ts-ignore
    s2 = peg$parseStructField();
// @ts-ignore
    if (s2 === peg$FAILED) {
// @ts-ignore
      s2 = peg$parseStructMethod();
// @ts-ignore
      if (s2 === peg$FAILED) {
// @ts-ignore
        s2 = peg$parseStructMetaFunction();
      }
    }
// @ts-ignore
    if (s2 !== peg$FAILED) {
// @ts-ignore
      s3 = peg$parse_();
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s0 = peg$f3(s2);
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseStructMetaFunction() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseAccessModifier();
// @ts-ignore
    if (s1 === peg$FAILED) {
// @ts-ignore
      s1 = null;
    }
// @ts-ignore
    s2 = peg$parse_();
// @ts-ignore
    s3 = peg$parseSTATIC();
// @ts-ignore
    if (s3 === peg$FAILED) {
// @ts-ignore
      s3 = null;
    }
// @ts-ignore
    s4 = peg$parse_();
// @ts-ignore
    s5 = peg$parseMetaIdentifier();
// @ts-ignore
    if (s5 !== peg$FAILED) {
// @ts-ignore
      s6 = peg$parse_();
// @ts-ignore
      s7 = peg$parseLPAREN();
// @ts-ignore
      if (s7 !== peg$FAILED) {
// @ts-ignore
        s8 = peg$parse_();
// @ts-ignore
        s9 = peg$parseParameterList();
// @ts-ignore
        if (s9 === peg$FAILED) {
// @ts-ignore
          s9 = null;
        }
// @ts-ignore
        s10 = peg$parse_();
// @ts-ignore
        s11 = peg$currPos;
// @ts-ignore
        s12 = peg$parseCOMMA();
// @ts-ignore
        if (s12 !== peg$FAILED) {
// @ts-ignore
          s13 = peg$parse_();
// @ts-ignore
          s14 = peg$parsePARAMS();
// @ts-ignore
          if (s14 !== peg$FAILED) {
// @ts-ignore
            s15 = peg$parse_();
// @ts-ignore
            s16 = peg$parseParameter();
// @ts-ignore
            if (s16 !== peg$FAILED) {
// @ts-ignore
              s17 = peg$parse_();
// @ts-ignore
              s12 = [s12, s13, s14, s15, s16, s17];
// @ts-ignore
              s11 = s12;
// @ts-ignore
            } else {
// @ts-ignore
              peg$currPos = s11;
// @ts-ignore
              s11 = peg$FAILED;
            }
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s11;
// @ts-ignore
            s11 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s11;
// @ts-ignore
          s11 = peg$FAILED;
        }
// @ts-ignore
        if (s11 === peg$FAILED) {
// @ts-ignore
          s11 = null;
        }
// @ts-ignore
        s12 = peg$parse_();
// @ts-ignore
        s13 = peg$parseRPAREN();
// @ts-ignore
        if (s13 !== peg$FAILED) {
// @ts-ignore
          s14 = peg$parse_();
// @ts-ignore
          s15 = peg$parseBlock();
// @ts-ignore
          if (s15 !== peg$FAILED) {
// @ts-ignore
            peg$savedPos = s0;
// @ts-ignore
            s0 = peg$f4(s1, s3, s5, s9, s11, s15);
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$currPos;
// @ts-ignore
      s1 = peg$parseAccessModifier();
// @ts-ignore
      if (s1 === peg$FAILED) {
// @ts-ignore
        s1 = null;
      }
// @ts-ignore
      s2 = peg$parse_();
// @ts-ignore
      s3 = peg$parseSTATIC();
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s3 = null;
      }
// @ts-ignore
      s4 = peg$parse_();
// @ts-ignore
      s5 = peg$parseMetaIdentifier();
// @ts-ignore
      if (s5 !== peg$FAILED) {
// @ts-ignore
        s6 = peg$parse_();
// @ts-ignore
        s7 = peg$parseLPAREN();
// @ts-ignore
        if (s7 !== peg$FAILED) {
// @ts-ignore
          s8 = peg$parse_();
// @ts-ignore
          s9 = peg$parsePARAMS();
// @ts-ignore
          if (s9 !== peg$FAILED) {
// @ts-ignore
            s10 = peg$parse_();
// @ts-ignore
            s11 = peg$parseParameter();
// @ts-ignore
            if (s11 !== peg$FAILED) {
// @ts-ignore
              s12 = peg$parse_();
// @ts-ignore
              s13 = peg$parseRPAREN();
// @ts-ignore
              if (s13 !== peg$FAILED) {
// @ts-ignore
                s14 = peg$parse_();
// @ts-ignore
                s15 = peg$parseBlock();
// @ts-ignore
                if (s15 !== peg$FAILED) {
// @ts-ignore
                  peg$savedPos = s0;
// @ts-ignore
                  s0 = peg$f5(s1, s3, s5, s11, s15);
// @ts-ignore
                } else {
// @ts-ignore
                  peg$currPos = s0;
// @ts-ignore
                  s0 = peg$FAILED;
                }
// @ts-ignore
              } else {
// @ts-ignore
                peg$currPos = s0;
// @ts-ignore
                s0 = peg$FAILED;
              }
// @ts-ignore
            } else {
// @ts-ignore
              peg$currPos = s0;
// @ts-ignore
              s0 = peg$FAILED;
            }
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseStructField() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseAccessModifier();
// @ts-ignore
    if (s1 === peg$FAILED) {
// @ts-ignore
      s1 = null;
    }
// @ts-ignore
    s2 = peg$parse_();
// @ts-ignore
    s3 = peg$parseSTATIC();
// @ts-ignore
    if (s3 === peg$FAILED) {
// @ts-ignore
      s3 = null;
    }
// @ts-ignore
    s4 = peg$parse_();
// @ts-ignore
    s5 = peg$parseVAR();
// @ts-ignore
    if (s5 !== peg$FAILED) {
// @ts-ignore
      s6 = peg$parse_();
// @ts-ignore
      s7 = peg$parseIDENTIFIER();
// @ts-ignore
      if (s7 !== peg$FAILED) {
// @ts-ignore
        s8 = peg$parse_();
// @ts-ignore
        s9 = peg$currPos;
// @ts-ignore
        s10 = peg$parseCOLON();
// @ts-ignore
        if (s10 !== peg$FAILED) {
// @ts-ignore
          s11 = peg$parse_();
// @ts-ignore
          s12 = peg$parseType();
// @ts-ignore
          if (s12 !== peg$FAILED) {
// @ts-ignore
            s10 = [s10, s11, s12];
// @ts-ignore
            s9 = s10;
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s9;
// @ts-ignore
            s9 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s9;
// @ts-ignore
          s9 = peg$FAILED;
        }
// @ts-ignore
        if (s9 === peg$FAILED) {
// @ts-ignore
          s9 = null;
        }
// @ts-ignore
        s10 = peg$parse_();
// @ts-ignore
        s11 = peg$currPos;
// @ts-ignore
        s12 = peg$parseEQUALS();
// @ts-ignore
        if (s12 !== peg$FAILED) {
// @ts-ignore
          s13 = peg$parse_();
// @ts-ignore
          s14 = peg$parseExpression();
// @ts-ignore
          if (s14 !== peg$FAILED) {
// @ts-ignore
            s12 = [s12, s13, s14];
// @ts-ignore
            s11 = s12;
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s11;
// @ts-ignore
            s11 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s11;
// @ts-ignore
          s11 = peg$FAILED;
        }
// @ts-ignore
        if (s11 === peg$FAILED) {
// @ts-ignore
          s11 = null;
        }
// @ts-ignore
        s12 = peg$parse_();
// @ts-ignore
        s13 = peg$parseSEMICOLON();
// @ts-ignore
        if (s13 !== peg$FAILED) {
// @ts-ignore
          peg$savedPos = s0;
// @ts-ignore
          s0 = peg$f6(s1, s3, s7, s9, s11);
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseStructMethod() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19, s20, s21, s22;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = [];
// @ts-ignore
    s2 = peg$parseDecoratorExpression();
// @ts-ignore
    while (s2 !== peg$FAILED) {
// @ts-ignore
      s1.push(s2);
// @ts-ignore
      s2 = peg$parseDecoratorExpression();
    }
// @ts-ignore
    s2 = peg$parse_();
// @ts-ignore
    s3 = peg$parseAccessModifier();
// @ts-ignore
    if (s3 === peg$FAILED) {
// @ts-ignore
      s3 = null;
    }
// @ts-ignore
    s4 = peg$parse_();
// @ts-ignore
    s5 = peg$parseSTATIC();
// @ts-ignore
    if (s5 === peg$FAILED) {
// @ts-ignore
      s5 = null;
    }
// @ts-ignore
    s6 = peg$parse_();
// @ts-ignore
    s7 = peg$parseIDENTIFIER();
// @ts-ignore
    if (s7 !== peg$FAILED) {
// @ts-ignore
      s8 = peg$parse_();
// @ts-ignore
      s9 = peg$parseGenericDeclaration();
// @ts-ignore
      if (s9 === peg$FAILED) {
// @ts-ignore
        s9 = null;
      }
// @ts-ignore
      s10 = peg$parse_();
// @ts-ignore
      s11 = peg$parseLPAREN();
// @ts-ignore
      if (s11 !== peg$FAILED) {
// @ts-ignore
        s12 = peg$parse_();
// @ts-ignore
        s13 = peg$parseParameterList();
// @ts-ignore
        if (s13 === peg$FAILED) {
// @ts-ignore
          s13 = null;
        }
// @ts-ignore
        s14 = peg$parse_();
// @ts-ignore
        s15 = peg$currPos;
// @ts-ignore
        s16 = peg$parseCOMMA();
// @ts-ignore
        if (s16 !== peg$FAILED) {
// @ts-ignore
          s17 = peg$parse_();
// @ts-ignore
          s18 = peg$parsePARAMS();
// @ts-ignore
          if (s18 !== peg$FAILED) {
// @ts-ignore
            s19 = peg$parse_();
// @ts-ignore
            s20 = peg$parseParameter();
// @ts-ignore
            if (s20 !== peg$FAILED) {
// @ts-ignore
              s21 = peg$parse_();
// @ts-ignore
              s16 = [s16, s17, s18, s19, s20, s21];
// @ts-ignore
              s15 = s16;
// @ts-ignore
            } else {
// @ts-ignore
              peg$currPos = s15;
// @ts-ignore
              s15 = peg$FAILED;
            }
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s15;
// @ts-ignore
            s15 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s15;
// @ts-ignore
          s15 = peg$FAILED;
        }
// @ts-ignore
        if (s15 === peg$FAILED) {
// @ts-ignore
          s15 = null;
        }
// @ts-ignore
        s16 = peg$parse_();
// @ts-ignore
        s17 = peg$parseRPAREN();
// @ts-ignore
        if (s17 !== peg$FAILED) {
// @ts-ignore
          s18 = peg$parse_();
// @ts-ignore
          s19 = peg$currPos;
// @ts-ignore
          s20 = peg$parseCOLON();
// @ts-ignore
          if (s20 !== peg$FAILED) {
// @ts-ignore
            s21 = peg$parse_();
// @ts-ignore
            s22 = peg$parseType();
// @ts-ignore
            if (s22 !== peg$FAILED) {
// @ts-ignore
              s20 = [s20, s21, s22];
// @ts-ignore
              s19 = s20;
// @ts-ignore
            } else {
// @ts-ignore
              peg$currPos = s19;
// @ts-ignore
              s19 = peg$FAILED;
            }
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s19;
// @ts-ignore
            s19 = peg$FAILED;
          }
// @ts-ignore
          if (s19 === peg$FAILED) {
// @ts-ignore
            s19 = null;
          }
// @ts-ignore
          s20 = peg$parse_();
// @ts-ignore
          s21 = peg$parseBlock();
// @ts-ignore
          if (s21 !== peg$FAILED) {
// @ts-ignore
            peg$savedPos = s0;
// @ts-ignore
            s0 = peg$f7(s1, s3, s5, s7, s9, s13, s15, s19, s21);
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$currPos;
// @ts-ignore
      s1 = [];
// @ts-ignore
      s2 = peg$parseDecoratorExpression();
// @ts-ignore
      while (s2 !== peg$FAILED) {
// @ts-ignore
        s1.push(s2);
// @ts-ignore
        s2 = peg$parseDecoratorExpression();
      }
// @ts-ignore
      s2 = peg$parse_();
// @ts-ignore
      s3 = peg$parseAccessModifier();
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s3 = null;
      }
// @ts-ignore
      s4 = peg$parse_();
// @ts-ignore
      s5 = peg$parseSTATIC();
// @ts-ignore
      if (s5 === peg$FAILED) {
// @ts-ignore
        s5 = null;
      }
// @ts-ignore
      s6 = peg$parse_();
// @ts-ignore
      s7 = peg$parseIDENTIFIER();
// @ts-ignore
      if (s7 !== peg$FAILED) {
// @ts-ignore
        s8 = peg$parse_();
// @ts-ignore
        s9 = peg$parseGenericDeclaration();
// @ts-ignore
        if (s9 === peg$FAILED) {
// @ts-ignore
          s9 = null;
        }
// @ts-ignore
        s10 = peg$parse_();
// @ts-ignore
        s11 = peg$parseLPAREN();
// @ts-ignore
        if (s11 !== peg$FAILED) {
// @ts-ignore
          s12 = peg$parse_();
// @ts-ignore
          s13 = peg$parsePARAMS();
// @ts-ignore
          if (s13 !== peg$FAILED) {
// @ts-ignore
            s14 = peg$parse_();
// @ts-ignore
            s15 = peg$parseParameter();
// @ts-ignore
            if (s15 !== peg$FAILED) {
// @ts-ignore
              s16 = peg$parse_();
// @ts-ignore
              s17 = peg$parseRPAREN();
// @ts-ignore
              if (s17 !== peg$FAILED) {
// @ts-ignore
                s18 = peg$parse_();
// @ts-ignore
                s19 = peg$currPos;
// @ts-ignore
                s20 = peg$parseCOLON();
// @ts-ignore
                if (s20 !== peg$FAILED) {
// @ts-ignore
                  s21 = peg$parse_();
// @ts-ignore
                  s22 = peg$parseType();
// @ts-ignore
                  if (s22 !== peg$FAILED) {
// @ts-ignore
                    s20 = [s20, s21, s22];
// @ts-ignore
                    s19 = s20;
// @ts-ignore
                  } else {
// @ts-ignore
                    peg$currPos = s19;
// @ts-ignore
                    s19 = peg$FAILED;
                  }
// @ts-ignore
                } else {
// @ts-ignore
                  peg$currPos = s19;
// @ts-ignore
                  s19 = peg$FAILED;
                }
// @ts-ignore
                if (s19 === peg$FAILED) {
// @ts-ignore
                  s19 = null;
                }
// @ts-ignore
                s20 = peg$parse_();
// @ts-ignore
                s21 = peg$parseBlock();
// @ts-ignore
                if (s21 !== peg$FAILED) {
// @ts-ignore
                  peg$savedPos = s0;
// @ts-ignore
                  s0 = peg$f8(s1, s3, s5, s7, s9, s15, s19, s21);
// @ts-ignore
                } else {
// @ts-ignore
                  peg$currPos = s0;
// @ts-ignore
                  s0 = peg$FAILED;
                }
// @ts-ignore
              } else {
// @ts-ignore
                peg$currPos = s0;
// @ts-ignore
                s0 = peg$FAILED;
              }
// @ts-ignore
            } else {
// @ts-ignore
              peg$currPos = s0;
// @ts-ignore
              s0 = peg$FAILED;
            }
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseClassDeclaration() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = [];
// @ts-ignore
    s2 = peg$parseDecoratorExpression();
// @ts-ignore
    while (s2 !== peg$FAILED) {
// @ts-ignore
      s1.push(s2);
// @ts-ignore
      s2 = peg$parseDecoratorExpression();
    }
// @ts-ignore
    s2 = peg$parseCLASS();
// @ts-ignore
    if (s2 !== peg$FAILED) {
// @ts-ignore
      s3 = peg$parse_();
// @ts-ignore
      s4 = peg$parseIDENTIFIER();
// @ts-ignore
      if (s4 !== peg$FAILED) {
// @ts-ignore
        s5 = peg$parse_();
// @ts-ignore
        s6 = peg$parseGenericDeclaration();
// @ts-ignore
        if (s6 === peg$FAILED) {
// @ts-ignore
          s6 = null;
        }
// @ts-ignore
        s7 = peg$parse_();
// @ts-ignore
        s8 = peg$currPos;
// @ts-ignore
        s9 = peg$parseCOLON();
// @ts-ignore
        if (s9 !== peg$FAILED) {
// @ts-ignore
          s10 = peg$parse_();
// @ts-ignore
          s11 = peg$parseTypeList();
// @ts-ignore
          if (s11 !== peg$FAILED) {
// @ts-ignore
            s12 = peg$parse_();
// @ts-ignore
            s9 = [s9, s10, s11, s12];
// @ts-ignore
            s8 = s9;
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s8;
// @ts-ignore
            s8 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s8;
// @ts-ignore
          s8 = peg$FAILED;
        }
// @ts-ignore
        if (s8 === peg$FAILED) {
// @ts-ignore
          s8 = null;
        }
// @ts-ignore
        s9 = peg$parseLBRACE();
// @ts-ignore
        if (s9 !== peg$FAILED) {
// @ts-ignore
          s10 = peg$parse_();
// @ts-ignore
          s11 = [];
// @ts-ignore
          s12 = peg$parseClassMember();
// @ts-ignore
          while (s12 !== peg$FAILED) {
// @ts-ignore
            s11.push(s12);
// @ts-ignore
            s12 = peg$parseClassMember();
          }
// @ts-ignore
          s12 = peg$parse_();
// @ts-ignore
          s13 = peg$parseRBRACE();
// @ts-ignore
          if (s13 !== peg$FAILED) {
// @ts-ignore
            peg$savedPos = s0;
// @ts-ignore
            s0 = peg$f9(s1, s4, s6, s8, s11);
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseClassMember() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parse_();
// @ts-ignore
    s2 = peg$parseMethod();
// @ts-ignore
    if (s2 === peg$FAILED) {
// @ts-ignore
      s2 = peg$parseProperty();
// @ts-ignore
      if (s2 === peg$FAILED) {
// @ts-ignore
        s2 = peg$parseMetaFunction();
// @ts-ignore
        if (s2 === peg$FAILED) {
// @ts-ignore
          s2 = peg$parseField();
        }
      }
    }
// @ts-ignore
    if (s2 !== peg$FAILED) {
// @ts-ignore
      s3 = peg$parse_();
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s0 = peg$f10(s2);
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseMetaFunction() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19, s20, s21, s22, s23;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseAccessModifier();
// @ts-ignore
    if (s1 === peg$FAILED) {
// @ts-ignore
      s1 = null;
    }
// @ts-ignore
    s2 = peg$parse_();
// @ts-ignore
    s3 = peg$parseSTATIC();
// @ts-ignore
    if (s3 === peg$FAILED) {
// @ts-ignore
      s3 = null;
    }
// @ts-ignore
    s4 = peg$parse_();
// @ts-ignore
    s5 = peg$parseMetaIdentifier();
// @ts-ignore
    if (s5 !== peg$FAILED) {
// @ts-ignore
      s6 = peg$parse_();
// @ts-ignore
      s7 = peg$parseLPAREN();
// @ts-ignore
      if (s7 !== peg$FAILED) {
// @ts-ignore
        s8 = peg$parse_();
// @ts-ignore
        s9 = peg$parseParameterList();
// @ts-ignore
        if (s9 === peg$FAILED) {
// @ts-ignore
          s9 = null;
        }
// @ts-ignore
        s10 = peg$parse_();
// @ts-ignore
        s11 = peg$currPos;
// @ts-ignore
        s12 = peg$parseCOMMA();
// @ts-ignore
        if (s12 !== peg$FAILED) {
// @ts-ignore
          s13 = peg$parse_();
// @ts-ignore
          s14 = peg$parsePARAMS();
// @ts-ignore
          if (s14 !== peg$FAILED) {
// @ts-ignore
            s15 = peg$parse_();
// @ts-ignore
            s16 = peg$parseParameter();
// @ts-ignore
            if (s16 !== peg$FAILED) {
// @ts-ignore
              s17 = peg$parse_();
// @ts-ignore
              s12 = [s12, s13, s14, s15, s16, s17];
// @ts-ignore
              s11 = s12;
// @ts-ignore
            } else {
// @ts-ignore
              peg$currPos = s11;
// @ts-ignore
              s11 = peg$FAILED;
            }
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s11;
// @ts-ignore
            s11 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s11;
// @ts-ignore
          s11 = peg$FAILED;
        }
// @ts-ignore
        if (s11 === peg$FAILED) {
// @ts-ignore
          s11 = null;
        }
// @ts-ignore
        s12 = peg$parse_();
// @ts-ignore
        s13 = peg$parseRPAREN();
// @ts-ignore
        if (s13 !== peg$FAILED) {
// @ts-ignore
          s14 = peg$parse_();
// @ts-ignore
          s15 = peg$currPos;
// @ts-ignore
          s16 = peg$parse_();
// @ts-ignore
          s17 = peg$parseSUPER();
// @ts-ignore
          if (s17 !== peg$FAILED) {
// @ts-ignore
            s18 = peg$parse_();
// @ts-ignore
            s19 = peg$parseLPAREN();
// @ts-ignore
            if (s19 !== peg$FAILED) {
// @ts-ignore
              s20 = peg$parse_();
// @ts-ignore
              s21 = peg$parseArgumentList();
// @ts-ignore
              if (s21 === peg$FAILED) {
// @ts-ignore
                s21 = null;
              }
// @ts-ignore
              s22 = peg$parse_();
// @ts-ignore
              s23 = peg$parseRPAREN();
// @ts-ignore
              if (s23 !== peg$FAILED) {
// @ts-ignore
                s16 = [s16, s17, s18, s19, s20, s21, s22, s23];
// @ts-ignore
                s15 = s16;
// @ts-ignore
              } else {
// @ts-ignore
                peg$currPos = s15;
// @ts-ignore
                s15 = peg$FAILED;
              }
// @ts-ignore
            } else {
// @ts-ignore
              peg$currPos = s15;
// @ts-ignore
              s15 = peg$FAILED;
            }
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s15;
// @ts-ignore
            s15 = peg$FAILED;
          }
// @ts-ignore
          if (s15 === peg$FAILED) {
// @ts-ignore
            s15 = null;
          }
// @ts-ignore
          s16 = peg$parse_();
// @ts-ignore
          s17 = peg$parseBlock();
// @ts-ignore
          if (s17 !== peg$FAILED) {
// @ts-ignore
            peg$savedPos = s0;
// @ts-ignore
            s0 = peg$f11(s1, s3, s5, s9, s11, s15, s17);
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$currPos;
// @ts-ignore
      s1 = peg$parseAccessModifier();
// @ts-ignore
      if (s1 === peg$FAILED) {
// @ts-ignore
        s1 = null;
      }
// @ts-ignore
      s2 = peg$parse_();
// @ts-ignore
      s3 = peg$parseSTATIC();
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s3 = null;
      }
// @ts-ignore
      s4 = peg$parse_();
// @ts-ignore
      s5 = peg$parseMetaIdentifier();
// @ts-ignore
      if (s5 !== peg$FAILED) {
// @ts-ignore
        s6 = peg$parse_();
// @ts-ignore
        s7 = peg$parseLPAREN();
// @ts-ignore
        if (s7 !== peg$FAILED) {
// @ts-ignore
          s8 = peg$parse_();
// @ts-ignore
          s9 = peg$parsePARAMS();
// @ts-ignore
          if (s9 !== peg$FAILED) {
// @ts-ignore
            s10 = peg$parse_();
// @ts-ignore
            s11 = peg$parseParameter();
// @ts-ignore
            if (s11 !== peg$FAILED) {
// @ts-ignore
              s12 = peg$parse_();
// @ts-ignore
              s13 = peg$parseRPAREN();
// @ts-ignore
              if (s13 !== peg$FAILED) {
// @ts-ignore
                s14 = peg$parse_();
// @ts-ignore
                s15 = peg$currPos;
// @ts-ignore
                s16 = peg$parse_();
// @ts-ignore
                s17 = peg$parseSUPER();
// @ts-ignore
                if (s17 !== peg$FAILED) {
// @ts-ignore
                  s18 = peg$parse_();
// @ts-ignore
                  s19 = peg$parseLPAREN();
// @ts-ignore
                  if (s19 !== peg$FAILED) {
// @ts-ignore
                    s20 = peg$parse_();
// @ts-ignore
                    s21 = peg$parseArgumentList();
// @ts-ignore
                    if (s21 === peg$FAILED) {
// @ts-ignore
                      s21 = null;
                    }
// @ts-ignore
                    s22 = peg$parse_();
// @ts-ignore
                    s23 = peg$parseRPAREN();
// @ts-ignore
                    if (s23 !== peg$FAILED) {
// @ts-ignore
                      s16 = [s16, s17, s18, s19, s20, s21, s22, s23];
// @ts-ignore
                      s15 = s16;
// @ts-ignore
                    } else {
// @ts-ignore
                      peg$currPos = s15;
// @ts-ignore
                      s15 = peg$FAILED;
                    }
// @ts-ignore
                  } else {
// @ts-ignore
                    peg$currPos = s15;
// @ts-ignore
                    s15 = peg$FAILED;
                  }
// @ts-ignore
                } else {
// @ts-ignore
                  peg$currPos = s15;
// @ts-ignore
                  s15 = peg$FAILED;
                }
// @ts-ignore
                if (s15 === peg$FAILED) {
// @ts-ignore
                  s15 = null;
                }
// @ts-ignore
                s16 = peg$parse_();
// @ts-ignore
                s17 = peg$parseBlock();
// @ts-ignore
                if (s17 !== peg$FAILED) {
// @ts-ignore
                  peg$savedPos = s0;
// @ts-ignore
                  s0 = peg$f12(s1, s3, s5, s11, s15, s17);
// @ts-ignore
                } else {
// @ts-ignore
                  peg$currPos = s0;
// @ts-ignore
                  s0 = peg$FAILED;
                }
// @ts-ignore
              } else {
// @ts-ignore
                peg$currPos = s0;
// @ts-ignore
                s0 = peg$FAILED;
              }
// @ts-ignore
            } else {
// @ts-ignore
              peg$currPos = s0;
// @ts-ignore
              s0 = peg$FAILED;
            }
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseField() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = [];
// @ts-ignore
    s2 = peg$parseDecoratorExpression();
// @ts-ignore
    while (s2 !== peg$FAILED) {
// @ts-ignore
      s1.push(s2);
// @ts-ignore
      s2 = peg$parseDecoratorExpression();
    }
// @ts-ignore
    s2 = peg$parse_();
// @ts-ignore
    s3 = peg$parseAccessModifier();
// @ts-ignore
    if (s3 === peg$FAILED) {
// @ts-ignore
      s3 = null;
    }
// @ts-ignore
    s4 = peg$parse_();
// @ts-ignore
    s5 = peg$parseSTATIC();
// @ts-ignore
    if (s5 === peg$FAILED) {
// @ts-ignore
      s5 = null;
    }
// @ts-ignore
    s6 = peg$parse_();
// @ts-ignore
    s7 = peg$parseVAR();
// @ts-ignore
    if (s7 !== peg$FAILED) {
// @ts-ignore
      s8 = peg$parse_();
// @ts-ignore
      s9 = peg$parseIDENTIFIER();
// @ts-ignore
      if (s9 !== peg$FAILED) {
// @ts-ignore
        s10 = peg$parse_();
// @ts-ignore
        s11 = peg$currPos;
// @ts-ignore
        s12 = peg$parseCOLON();
// @ts-ignore
        if (s12 !== peg$FAILED) {
// @ts-ignore
          s13 = peg$parse_();
// @ts-ignore
          s14 = peg$parseType();
// @ts-ignore
          if (s14 !== peg$FAILED) {
// @ts-ignore
            s12 = [s12, s13, s14];
// @ts-ignore
            s11 = s12;
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s11;
// @ts-ignore
            s11 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s11;
// @ts-ignore
          s11 = peg$FAILED;
        }
// @ts-ignore
        if (s11 === peg$FAILED) {
// @ts-ignore
          s11 = null;
        }
// @ts-ignore
        s12 = peg$parse_();
// @ts-ignore
        s13 = peg$currPos;
// @ts-ignore
        s14 = peg$parseEQUALS();
// @ts-ignore
        if (s14 !== peg$FAILED) {
// @ts-ignore
          s15 = peg$parse_();
// @ts-ignore
          s16 = peg$parseExpression();
// @ts-ignore
          if (s16 !== peg$FAILED) {
// @ts-ignore
            s14 = [s14, s15, s16];
// @ts-ignore
            s13 = s14;
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s13;
// @ts-ignore
            s13 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s13;
// @ts-ignore
          s13 = peg$FAILED;
        }
// @ts-ignore
        if (s13 === peg$FAILED) {
// @ts-ignore
          s13 = null;
        }
// @ts-ignore
        s14 = peg$parse_();
// @ts-ignore
        s15 = peg$parseSEMICOLON();
// @ts-ignore
        if (s15 !== peg$FAILED) {
// @ts-ignore
          peg$savedPos = s0;
// @ts-ignore
          s0 = peg$f13(s1, s3, s5, s9, s11, s13);
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseMethod() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19, s20, s21, s22;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = [];
// @ts-ignore
    s2 = peg$parseDecoratorExpression();
// @ts-ignore
    while (s2 !== peg$FAILED) {
// @ts-ignore
      s1.push(s2);
// @ts-ignore
      s2 = peg$parseDecoratorExpression();
    }
// @ts-ignore
    s2 = peg$parse_();
// @ts-ignore
    s3 = peg$parseAccessModifier();
// @ts-ignore
    if (s3 === peg$FAILED) {
// @ts-ignore
      s3 = null;
    }
// @ts-ignore
    s4 = peg$parse_();
// @ts-ignore
    s5 = peg$parseSTATIC();
// @ts-ignore
    if (s5 === peg$FAILED) {
// @ts-ignore
      s5 = null;
    }
// @ts-ignore
    s6 = peg$parse_();
// @ts-ignore
    s7 = peg$parseIDENTIFIER();
// @ts-ignore
    if (s7 !== peg$FAILED) {
// @ts-ignore
      s8 = peg$parse_();
// @ts-ignore
      s9 = peg$parseGenericDeclaration();
// @ts-ignore
      if (s9 === peg$FAILED) {
// @ts-ignore
        s9 = null;
      }
// @ts-ignore
      s10 = peg$parse_();
// @ts-ignore
      s11 = peg$parseLPAREN();
// @ts-ignore
      if (s11 !== peg$FAILED) {
// @ts-ignore
        s12 = peg$parse_();
// @ts-ignore
        s13 = peg$parseParameterList();
// @ts-ignore
        if (s13 === peg$FAILED) {
// @ts-ignore
          s13 = null;
        }
// @ts-ignore
        s14 = peg$parse_();
// @ts-ignore
        s15 = peg$currPos;
// @ts-ignore
        s16 = peg$parseCOMMA();
// @ts-ignore
        if (s16 !== peg$FAILED) {
// @ts-ignore
          s17 = peg$parse_();
// @ts-ignore
          s18 = peg$parsePARAMS();
// @ts-ignore
          if (s18 !== peg$FAILED) {
// @ts-ignore
            s19 = peg$parse_();
// @ts-ignore
            s20 = peg$parseParameter();
// @ts-ignore
            if (s20 !== peg$FAILED) {
// @ts-ignore
              s21 = peg$parse_();
// @ts-ignore
              s16 = [s16, s17, s18, s19, s20, s21];
// @ts-ignore
              s15 = s16;
// @ts-ignore
            } else {
// @ts-ignore
              peg$currPos = s15;
// @ts-ignore
              s15 = peg$FAILED;
            }
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s15;
// @ts-ignore
            s15 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s15;
// @ts-ignore
          s15 = peg$FAILED;
        }
// @ts-ignore
        if (s15 === peg$FAILED) {
// @ts-ignore
          s15 = null;
        }
// @ts-ignore
        s16 = peg$parse_();
// @ts-ignore
        s17 = peg$parseRPAREN();
// @ts-ignore
        if (s17 !== peg$FAILED) {
// @ts-ignore
          s18 = peg$parse_();
// @ts-ignore
          s19 = peg$currPos;
// @ts-ignore
          s20 = peg$parseCOLON();
// @ts-ignore
          if (s20 !== peg$FAILED) {
// @ts-ignore
            s21 = peg$parse_();
// @ts-ignore
            s22 = peg$parseType();
// @ts-ignore
            if (s22 !== peg$FAILED) {
// @ts-ignore
              s20 = [s20, s21, s22];
// @ts-ignore
              s19 = s20;
// @ts-ignore
            } else {
// @ts-ignore
              peg$currPos = s19;
// @ts-ignore
              s19 = peg$FAILED;
            }
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s19;
// @ts-ignore
            s19 = peg$FAILED;
          }
// @ts-ignore
          if (s19 === peg$FAILED) {
// @ts-ignore
            s19 = null;
          }
// @ts-ignore
          s20 = peg$parse_();
// @ts-ignore
          s21 = peg$parseBlock();
// @ts-ignore
          if (s21 !== peg$FAILED) {
// @ts-ignore
            peg$savedPos = s0;
// @ts-ignore
            s0 = peg$f14(s1, s3, s5, s7, s9, s13, s15, s19, s21);
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$currPos;
// @ts-ignore
      s1 = [];
// @ts-ignore
      s2 = peg$parseDecoratorExpression();
// @ts-ignore
      while (s2 !== peg$FAILED) {
// @ts-ignore
        s1.push(s2);
// @ts-ignore
        s2 = peg$parseDecoratorExpression();
      }
// @ts-ignore
      s2 = peg$parse_();
// @ts-ignore
      s3 = peg$parseAccessModifier();
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s3 = null;
      }
// @ts-ignore
      s4 = peg$parse_();
// @ts-ignore
      s5 = peg$parseSTATIC();
// @ts-ignore
      if (s5 === peg$FAILED) {
// @ts-ignore
        s5 = null;
      }
// @ts-ignore
      s6 = peg$parse_();
// @ts-ignore
      s7 = peg$parseIDENTIFIER();
// @ts-ignore
      if (s7 !== peg$FAILED) {
// @ts-ignore
        s8 = peg$parse_();
// @ts-ignore
        s9 = peg$parseGenericDeclaration();
// @ts-ignore
        if (s9 === peg$FAILED) {
// @ts-ignore
          s9 = null;
        }
// @ts-ignore
        s10 = peg$parse_();
// @ts-ignore
        s11 = peg$parseLPAREN();
// @ts-ignore
        if (s11 !== peg$FAILED) {
// @ts-ignore
          s12 = peg$parse_();
// @ts-ignore
          s13 = peg$parsePARAMS();
// @ts-ignore
          if (s13 !== peg$FAILED) {
// @ts-ignore
            s14 = peg$parse_();
// @ts-ignore
            s15 = peg$parseParameter();
// @ts-ignore
            if (s15 !== peg$FAILED) {
// @ts-ignore
              s16 = peg$parse_();
// @ts-ignore
              s17 = peg$parseRPAREN();
// @ts-ignore
              if (s17 !== peg$FAILED) {
// @ts-ignore
                s18 = peg$parse_();
// @ts-ignore
                s19 = peg$currPos;
// @ts-ignore
                s20 = peg$parseCOLON();
// @ts-ignore
                if (s20 !== peg$FAILED) {
// @ts-ignore
                  s21 = peg$parse_();
// @ts-ignore
                  s22 = peg$parseType();
// @ts-ignore
                  if (s22 !== peg$FAILED) {
// @ts-ignore
                    s20 = [s20, s21, s22];
// @ts-ignore
                    s19 = s20;
// @ts-ignore
                  } else {
// @ts-ignore
                    peg$currPos = s19;
// @ts-ignore
                    s19 = peg$FAILED;
                  }
// @ts-ignore
                } else {
// @ts-ignore
                  peg$currPos = s19;
// @ts-ignore
                  s19 = peg$FAILED;
                }
// @ts-ignore
                if (s19 === peg$FAILED) {
// @ts-ignore
                  s19 = null;
                }
// @ts-ignore
                s20 = peg$parse_();
// @ts-ignore
                s21 = peg$parseBlock();
// @ts-ignore
                if (s21 !== peg$FAILED) {
// @ts-ignore
                  peg$savedPos = s0;
// @ts-ignore
                  s0 = peg$f15(s1, s3, s5, s7, s9, s15, s19, s21);
// @ts-ignore
                } else {
// @ts-ignore
                  peg$currPos = s0;
// @ts-ignore
                  s0 = peg$FAILED;
                }
// @ts-ignore
              } else {
// @ts-ignore
                peg$currPos = s0;
// @ts-ignore
                s0 = peg$FAILED;
              }
// @ts-ignore
            } else {
// @ts-ignore
              peg$currPos = s0;
// @ts-ignore
              s0 = peg$FAILED;
            }
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseProperty() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = [];
// @ts-ignore
    s2 = peg$parseDecoratorExpression();
// @ts-ignore
    while (s2 !== peg$FAILED) {
// @ts-ignore
      s1.push(s2);
// @ts-ignore
      s2 = peg$parseDecoratorExpression();
    }
// @ts-ignore
    s2 = peg$parseAccessModifier();
// @ts-ignore
    if (s2 === peg$FAILED) {
// @ts-ignore
      s2 = null;
    }
// @ts-ignore
    s3 = peg$parse_();
// @ts-ignore
    s4 = peg$parseSTATIC();
// @ts-ignore
    if (s4 === peg$FAILED) {
// @ts-ignore
      s4 = null;
    }
// @ts-ignore
    s5 = peg$parse_();
// @ts-ignore
    s6 = peg$parseGetProperty();
// @ts-ignore
    if (s6 === peg$FAILED) {
// @ts-ignore
      s6 = peg$parseSetProperty();
    }
// @ts-ignore
    if (s6 !== peg$FAILED) {
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s0 = peg$f16(s1, s2, s4, s6);
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseGetProperty() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseGET();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse_();
// @ts-ignore
      s3 = peg$parseIDENTIFIER();
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s4 = peg$parse_();
// @ts-ignore
        s5 = peg$currPos;
// @ts-ignore
        s6 = peg$parseCOLON();
// @ts-ignore
        if (s6 !== peg$FAILED) {
// @ts-ignore
          s7 = peg$parse_();
// @ts-ignore
          s8 = peg$parseType();
// @ts-ignore
          if (s8 !== peg$FAILED) {
// @ts-ignore
            s6 = [s6, s7, s8];
// @ts-ignore
            s5 = s6;
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s5;
// @ts-ignore
            s5 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s5;
// @ts-ignore
          s5 = peg$FAILED;
        }
// @ts-ignore
        if (s5 === peg$FAILED) {
// @ts-ignore
          s5 = null;
        }
// @ts-ignore
        s6 = peg$parse_();
// @ts-ignore
        s7 = peg$parseBlock();
// @ts-ignore
        if (s7 !== peg$FAILED) {
// @ts-ignore
          peg$savedPos = s0;
// @ts-ignore
          s0 = peg$f17(s3, s5, s7);
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseSetProperty() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseSET();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse_();
// @ts-ignore
      s3 = peg$parseIDENTIFIER();
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s4 = peg$parse_();
// @ts-ignore
        s5 = peg$parseLPAREN();
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s6 = peg$parseIDENTIFIER();
// @ts-ignore
          if (s6 !== peg$FAILED) {
// @ts-ignore
            s7 = peg$parse_();
// @ts-ignore
            s8 = peg$currPos;
// @ts-ignore
            s9 = peg$parseCOLON();
// @ts-ignore
            if (s9 !== peg$FAILED) {
// @ts-ignore
              s10 = peg$parse_();
// @ts-ignore
              s11 = peg$parseType();
// @ts-ignore
              if (s11 !== peg$FAILED) {
// @ts-ignore
                s12 = peg$parse_();
// @ts-ignore
                s9 = [s9, s10, s11, s12];
// @ts-ignore
                s8 = s9;
// @ts-ignore
              } else {
// @ts-ignore
                peg$currPos = s8;
// @ts-ignore
                s8 = peg$FAILED;
              }
// @ts-ignore
            } else {
// @ts-ignore
              peg$currPos = s8;
// @ts-ignore
              s8 = peg$FAILED;
            }
// @ts-ignore
            if (s8 === peg$FAILED) {
// @ts-ignore
              s8 = null;
            }
// @ts-ignore
            s9 = peg$parseRPAREN();
// @ts-ignore
            if (s9 !== peg$FAILED) {
// @ts-ignore
              s10 = peg$parse_();
// @ts-ignore
              s11 = peg$parseBlock();
// @ts-ignore
              if (s11 !== peg$FAILED) {
// @ts-ignore
                peg$savedPos = s0;
// @ts-ignore
                s0 = peg$f18(s3, s6, s8, s11);
// @ts-ignore
              } else {
// @ts-ignore
                peg$currPos = s0;
// @ts-ignore
                s0 = peg$FAILED;
              }
// @ts-ignore
            } else {
// @ts-ignore
              peg$currPos = s0;
// @ts-ignore
              s0 = peg$FAILED;
            }
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseInterfaceDeclaration() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseINTERFACE();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse_();
// @ts-ignore
      s3 = peg$parseIDENTIFIER();
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s4 = peg$parse_();
// @ts-ignore
        s5 = peg$parseGenericDeclaration();
// @ts-ignore
        if (s5 === peg$FAILED) {
// @ts-ignore
          s5 = null;
        }
// @ts-ignore
        s6 = peg$parse_();
// @ts-ignore
        s7 = peg$currPos;
// @ts-ignore
        s8 = peg$parseCOLON();
// @ts-ignore
        if (s8 !== peg$FAILED) {
// @ts-ignore
          s9 = peg$parse_();
// @ts-ignore
          s10 = peg$parseTypeList();
// @ts-ignore
          if (s10 !== peg$FAILED) {
// @ts-ignore
            s8 = [s8, s9, s10];
// @ts-ignore
            s7 = s8;
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s7;
// @ts-ignore
            s7 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s7;
// @ts-ignore
          s7 = peg$FAILED;
        }
// @ts-ignore
        if (s7 === peg$FAILED) {
// @ts-ignore
          s7 = null;
        }
// @ts-ignore
        s8 = peg$parse_();
// @ts-ignore
        s9 = peg$parseLBRACE();
// @ts-ignore
        if (s9 !== peg$FAILED) {
// @ts-ignore
          s10 = peg$parse_();
// @ts-ignore
          s11 = [];
// @ts-ignore
          s12 = peg$parseInterfaceMember();
// @ts-ignore
          while (s12 !== peg$FAILED) {
// @ts-ignore
            s11.push(s12);
// @ts-ignore
            s12 = peg$parseInterfaceMember();
          }
// @ts-ignore
          s12 = peg$parse_();
// @ts-ignore
          s13 = peg$parseRBRACE();
// @ts-ignore
          if (s13 !== peg$FAILED) {
// @ts-ignore
            peg$savedPos = s0;
// @ts-ignore
            s0 = peg$f19(s3, s5, s7, s11);
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseInterfaceMember() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parse_();
// @ts-ignore
    s2 = peg$parseInterfaceMethodSignature();
// @ts-ignore
    if (s2 === peg$FAILED) {
// @ts-ignore
      s2 = peg$parseInterfacePropertySignature();
// @ts-ignore
      if (s2 === peg$FAILED) {
// @ts-ignore
        s2 = peg$parseInterfaceFieldDeclaration();
      }
    }
// @ts-ignore
    if (s2 !== peg$FAILED) {
// @ts-ignore
      s3 = peg$parse_();
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s0 = peg$f20(s2);
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseInterfaceMethodSignature() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseAccessModifier();
// @ts-ignore
    if (s1 === peg$FAILED) {
// @ts-ignore
      s1 = null;
    }
// @ts-ignore
    s2 = peg$parse_();
// @ts-ignore
    s3 = peg$parseIDENTIFIER();
// @ts-ignore
    if (s3 !== peg$FAILED) {
// @ts-ignore
      s4 = peg$parse_();
// @ts-ignore
      s5 = peg$parseGenericDeclaration();
// @ts-ignore
      if (s5 === peg$FAILED) {
// @ts-ignore
        s5 = null;
      }
// @ts-ignore
      s6 = peg$parse_();
// @ts-ignore
      s7 = peg$parseLPAREN();
// @ts-ignore
      if (s7 !== peg$FAILED) {
// @ts-ignore
        s8 = peg$parse_();
// @ts-ignore
        s9 = peg$parseParameterList();
// @ts-ignore
        if (s9 === peg$FAILED) {
// @ts-ignore
          s9 = null;
        }
// @ts-ignore
        s10 = peg$parse_();
// @ts-ignore
        s11 = peg$currPos;
// @ts-ignore
        s12 = peg$parseCOMMA();
// @ts-ignore
        if (s12 !== peg$FAILED) {
// @ts-ignore
          s13 = peg$parse_();
// @ts-ignore
          s14 = peg$parsePARAMS();
// @ts-ignore
          if (s14 !== peg$FAILED) {
// @ts-ignore
            s15 = peg$parse_();
// @ts-ignore
            s16 = peg$parseParameter();
// @ts-ignore
            if (s16 !== peg$FAILED) {
// @ts-ignore
              s17 = peg$parse_();
// @ts-ignore
              s12 = [s12, s13, s14, s15, s16, s17];
// @ts-ignore
              s11 = s12;
// @ts-ignore
            } else {
// @ts-ignore
              peg$currPos = s11;
// @ts-ignore
              s11 = peg$FAILED;
            }
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s11;
// @ts-ignore
            s11 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s11;
// @ts-ignore
          s11 = peg$FAILED;
        }
// @ts-ignore
        if (s11 === peg$FAILED) {
// @ts-ignore
          s11 = null;
        }
// @ts-ignore
        s12 = peg$parse_();
// @ts-ignore
        s13 = peg$parseRPAREN();
// @ts-ignore
        if (s13 !== peg$FAILED) {
// @ts-ignore
          s14 = peg$parse_();
// @ts-ignore
          s15 = peg$currPos;
// @ts-ignore
          s16 = peg$parseCOLON();
// @ts-ignore
          if (s16 !== peg$FAILED) {
// @ts-ignore
            s17 = peg$parse_();
// @ts-ignore
            s18 = peg$parseType();
// @ts-ignore
            if (s18 !== peg$FAILED) {
// @ts-ignore
              s16 = [s16, s17, s18];
// @ts-ignore
              s15 = s16;
// @ts-ignore
            } else {
// @ts-ignore
              peg$currPos = s15;
// @ts-ignore
              s15 = peg$FAILED;
            }
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s15;
// @ts-ignore
            s15 = peg$FAILED;
          }
// @ts-ignore
          if (s15 === peg$FAILED) {
// @ts-ignore
            s15 = null;
          }
// @ts-ignore
          s16 = peg$parse_();
// @ts-ignore
          s17 = peg$parseSEMICOLON();
// @ts-ignore
          if (s17 !== peg$FAILED) {
// @ts-ignore
            peg$savedPos = s0;
// @ts-ignore
            s0 = peg$f21(s1, s3, s5, s9, s11, s15);
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$currPos;
// @ts-ignore
      s1 = peg$parseAccessModifier();
// @ts-ignore
      if (s1 === peg$FAILED) {
// @ts-ignore
        s1 = null;
      }
// @ts-ignore
      s2 = peg$parse_();
// @ts-ignore
      s3 = peg$parseIDENTIFIER();
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s4 = peg$parse_();
// @ts-ignore
        s5 = peg$parseGenericDeclaration();
// @ts-ignore
        if (s5 === peg$FAILED) {
// @ts-ignore
          s5 = null;
        }
// @ts-ignore
        s6 = peg$parse_();
// @ts-ignore
        s7 = peg$parseLPAREN();
// @ts-ignore
        if (s7 !== peg$FAILED) {
// @ts-ignore
          s8 = peg$parse_();
// @ts-ignore
          s9 = peg$parsePARAMS();
// @ts-ignore
          if (s9 !== peg$FAILED) {
// @ts-ignore
            s10 = peg$parse_();
// @ts-ignore
            s11 = peg$parseParameter();
// @ts-ignore
            if (s11 !== peg$FAILED) {
// @ts-ignore
              s12 = peg$parse_();
// @ts-ignore
              s13 = peg$parseRPAREN();
// @ts-ignore
              if (s13 !== peg$FAILED) {
// @ts-ignore
                s14 = peg$parse_();
// @ts-ignore
                s15 = peg$currPos;
// @ts-ignore
                s16 = peg$parseCOLON();
// @ts-ignore
                if (s16 !== peg$FAILED) {
// @ts-ignore
                  s17 = peg$parse_();
// @ts-ignore
                  s18 = peg$parseType();
// @ts-ignore
                  if (s18 !== peg$FAILED) {
// @ts-ignore
                    s16 = [s16, s17, s18];
// @ts-ignore
                    s15 = s16;
// @ts-ignore
                  } else {
// @ts-ignore
                    peg$currPos = s15;
// @ts-ignore
                    s15 = peg$FAILED;
                  }
// @ts-ignore
                } else {
// @ts-ignore
                  peg$currPos = s15;
// @ts-ignore
                  s15 = peg$FAILED;
                }
// @ts-ignore
                if (s15 === peg$FAILED) {
// @ts-ignore
                  s15 = null;
                }
// @ts-ignore
                s16 = peg$parse_();
// @ts-ignore
                s17 = peg$parseSEMICOLON();
// @ts-ignore
                if (s17 !== peg$FAILED) {
// @ts-ignore
                  peg$savedPos = s0;
// @ts-ignore
                  s0 = peg$f22(s1, s3, s5, s11, s15);
// @ts-ignore
                } else {
// @ts-ignore
                  peg$currPos = s0;
// @ts-ignore
                  s0 = peg$FAILED;
                }
// @ts-ignore
              } else {
// @ts-ignore
                peg$currPos = s0;
// @ts-ignore
                s0 = peg$FAILED;
              }
// @ts-ignore
            } else {
// @ts-ignore
              peg$currPos = s0;
// @ts-ignore
              s0 = peg$FAILED;
            }
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseInterfacePropertySignature() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseAccessModifier();
// @ts-ignore
    if (s1 === peg$FAILED) {
// @ts-ignore
      s1 = null;
    }
// @ts-ignore
    s2 = peg$parse_();
// @ts-ignore
    s3 = peg$parseGetSetModifier();
// @ts-ignore
    if (s3 === peg$FAILED) {
// @ts-ignore
      s3 = null;
    }
// @ts-ignore
    s4 = peg$parse_();
// @ts-ignore
    s5 = peg$parseIDENTIFIER();
// @ts-ignore
    if (s5 !== peg$FAILED) {
// @ts-ignore
      s6 = peg$parse_();
// @ts-ignore
      s7 = peg$currPos;
// @ts-ignore
      s8 = peg$parseCOLON();
// @ts-ignore
      if (s8 !== peg$FAILED) {
// @ts-ignore
        s9 = peg$parse_();
// @ts-ignore
        s10 = peg$parseType();
// @ts-ignore
        if (s10 !== peg$FAILED) {
// @ts-ignore
          s8 = [s8, s9, s10];
// @ts-ignore
          s7 = s8;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s7;
// @ts-ignore
          s7 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s7;
// @ts-ignore
        s7 = peg$FAILED;
      }
// @ts-ignore
      if (s7 === peg$FAILED) {
// @ts-ignore
        s7 = null;
      }
// @ts-ignore
      s8 = peg$parse_();
// @ts-ignore
      s9 = peg$parseSEMICOLON();
// @ts-ignore
      if (s9 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f23(s1, s3, s5, s7);
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseGetSetModifier() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseGET();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse_();
// @ts-ignore
      s3 = peg$parseSET();
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f24();
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$currPos;
// @ts-ignore
      s1 = peg$parseSET();
// @ts-ignore
      if (s1 !== peg$FAILED) {
// @ts-ignore
        s2 = peg$parse_();
// @ts-ignore
        s3 = peg$parseGET();
// @ts-ignore
        if (s3 !== peg$FAILED) {
// @ts-ignore
          peg$savedPos = s0;
// @ts-ignore
          s0 = peg$f25();
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
      if (s0 === peg$FAILED) {
// @ts-ignore
        s0 = peg$currPos;
// @ts-ignore
        s1 = peg$parseGET();
// @ts-ignore
        if (s1 !== peg$FAILED) {
// @ts-ignore
          peg$savedPos = s0;
// @ts-ignore
          s1 = peg$f26();
        }
// @ts-ignore
        s0 = s1;
// @ts-ignore
        if (s0 === peg$FAILED) {
// @ts-ignore
          s0 = peg$currPos;
// @ts-ignore
          s1 = peg$parseSET();
// @ts-ignore
          if (s1 !== peg$FAILED) {
// @ts-ignore
            peg$savedPos = s0;
// @ts-ignore
            s1 = peg$f27();
          }
// @ts-ignore
          s0 = s1;
        }
      }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseInterfaceFieldDeclaration() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseAccessModifier();
// @ts-ignore
    if (s1 === peg$FAILED) {
// @ts-ignore
      s1 = null;
    }
// @ts-ignore
    s2 = peg$parse_();
// @ts-ignore
    s3 = peg$parseVAR();
// @ts-ignore
    if (s3 !== peg$FAILED) {
// @ts-ignore
      s4 = peg$parse_();
// @ts-ignore
      s5 = peg$parseIDENTIFIER();
// @ts-ignore
      if (s5 !== peg$FAILED) {
// @ts-ignore
        s6 = peg$currPos;
// @ts-ignore
        s7 = peg$parse_();
// @ts-ignore
        s8 = peg$parseCOLON();
// @ts-ignore
        if (s8 !== peg$FAILED) {
// @ts-ignore
          s9 = peg$parse_();
// @ts-ignore
          s10 = peg$parseType();
// @ts-ignore
          if (s10 !== peg$FAILED) {
// @ts-ignore
            s7 = [s7, s8, s9, s10];
// @ts-ignore
            s6 = s7;
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s6;
// @ts-ignore
            s6 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s6;
// @ts-ignore
          s6 = peg$FAILED;
        }
// @ts-ignore
        if (s6 === peg$FAILED) {
// @ts-ignore
          s6 = null;
        }
// @ts-ignore
        s7 = peg$parse_();
// @ts-ignore
        s8 = peg$parseSEMICOLON();
// @ts-ignore
        if (s8 !== peg$FAILED) {
// @ts-ignore
          peg$savedPos = s0;
// @ts-ignore
          s0 = peg$f28(s1, s5, s6);
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseEnumDeclaration() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseENUM();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse_();
// @ts-ignore
      s3 = peg$parseIDENTIFIER();
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s4 = peg$parse_();
// @ts-ignore
        s5 = peg$currPos;
// @ts-ignore
        s6 = peg$parseCOLON();
// @ts-ignore
        if (s6 !== peg$FAILED) {
// @ts-ignore
          s7 = peg$parse_();
// @ts-ignore
          s8 = peg$parseType();
// @ts-ignore
          if (s8 !== peg$FAILED) {
// @ts-ignore
            s6 = [s6, s7, s8];
// @ts-ignore
            s5 = s6;
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s5;
// @ts-ignore
            s5 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s5;
// @ts-ignore
          s5 = peg$FAILED;
        }
// @ts-ignore
        if (s5 === peg$FAILED) {
// @ts-ignore
          s5 = null;
        }
// @ts-ignore
        s6 = peg$parse_();
// @ts-ignore
        s7 = peg$parseLBRACE();
// @ts-ignore
        if (s7 !== peg$FAILED) {
// @ts-ignore
          s8 = peg$parse_();
// @ts-ignore
          s9 = [];
// @ts-ignore
          s10 = peg$parseEnumMember();
// @ts-ignore
          if (s10 !== peg$FAILED) {
// @ts-ignore
            while (s10 !== peg$FAILED) {
// @ts-ignore
              s9.push(s10);
// @ts-ignore
              s10 = peg$parseEnumMember();
            }
// @ts-ignore
          } else {
// @ts-ignore
            s9 = peg$FAILED;
          }
// @ts-ignore
          if (s9 !== peg$FAILED) {
// @ts-ignore
            s10 = peg$parse_();
// @ts-ignore
            s11 = peg$parseRBRACE();
// @ts-ignore
            if (s11 !== peg$FAILED) {
// @ts-ignore
              peg$savedPos = s0;
// @ts-ignore
              s0 = peg$f29(s3, s5, s9);
// @ts-ignore
            } else {
// @ts-ignore
              peg$currPos = s0;
// @ts-ignore
              s0 = peg$FAILED;
            }
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseEnumMember() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parse_();
// @ts-ignore
    s2 = peg$parseIDENTIFIER();
// @ts-ignore
    if (s2 !== peg$FAILED) {
// @ts-ignore
      s3 = peg$parse_();
// @ts-ignore
      s4 = peg$currPos;
// @ts-ignore
      s5 = peg$parseEQUALS();
// @ts-ignore
      if (s5 !== peg$FAILED) {
// @ts-ignore
        s6 = peg$parse_();
// @ts-ignore
        s7 = peg$parseExpression();
// @ts-ignore
        if (s7 !== peg$FAILED) {
// @ts-ignore
          s5 = [s5, s6, s7];
// @ts-ignore
          s4 = s5;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s4;
// @ts-ignore
          s4 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s4;
// @ts-ignore
        s4 = peg$FAILED;
      }
// @ts-ignore
      if (s4 === peg$FAILED) {
// @ts-ignore
        s4 = null;
      }
// @ts-ignore
      s5 = peg$parse_();
// @ts-ignore
      s6 = peg$parseCOMMA();
// @ts-ignore
      if (s6 === peg$FAILED) {
// @ts-ignore
        s6 = peg$parseSEMICOLON();
      }
// @ts-ignore
      if (s6 === peg$FAILED) {
// @ts-ignore
        s6 = null;
      }
// @ts-ignore
      s7 = peg$parse_();
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s0 = peg$f30(s2, s4);
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseGenericDeclaration() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseLESS_THAN();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse_();
// @ts-ignore
      s3 = [];
// @ts-ignore
      s4 = peg$parseParameter();
// @ts-ignore
      if (s4 !== peg$FAILED) {
// @ts-ignore
        while (s4 !== peg$FAILED) {
// @ts-ignore
          s3.push(s4);
// @ts-ignore
          s4 = peg$parseParameter();
        }
// @ts-ignore
      } else {
// @ts-ignore
        s3 = peg$FAILED;
      }
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s4 = peg$parse_();
// @ts-ignore
        s5 = peg$parseGREATER_THAN();
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s6 = peg$parse_();
// @ts-ignore
          peg$savedPos = s0;
// @ts-ignore
          s0 = peg$f31(s3);
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseStatement() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parse_();
// @ts-ignore
    s2 = peg$parseControlStatement();
// @ts-ignore
    if (s2 === peg$FAILED) {
// @ts-ignore
      s2 = peg$parseVariableDeclaration();
// @ts-ignore
      if (s2 === peg$FAILED) {
// @ts-ignore
        s2 = peg$parseExpressionStatement();
// @ts-ignore
        if (s2 === peg$FAILED) {
// @ts-ignore
          s2 = peg$parseReturnStatement();
// @ts-ignore
          if (s2 === peg$FAILED) {
// @ts-ignore
            s2 = peg$parseBreakContinueStatement();
// @ts-ignore
            if (s2 === peg$FAILED) {
// @ts-ignore
              s2 = peg$parseOutStatement();
// @ts-ignore
              if (s2 === peg$FAILED) {
// @ts-ignore
                s2 = peg$parseThrowStatement();
// @ts-ignore
                if (s2 === peg$FAILED) {
// @ts-ignore
                  s2 = peg$parseBlock();
                }
              }
            }
          }
        }
      }
    }
// @ts-ignore
    if (s2 !== peg$FAILED) {
// @ts-ignore
      s3 = peg$parse_();
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s0 = peg$f32(s2);
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseExpressionStatement() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseExpression();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse_();
// @ts-ignore
      s3 = peg$parseSEMICOLON();
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f33(s1);
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseVariableDeclaration() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseVAR();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse_();
// @ts-ignore
      s3 = peg$parseDestructuringPattern();
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s3 = peg$parseDestructuringArrayPattern();
// @ts-ignore
        if (s3 === peg$FAILED) {
// @ts-ignore
          s3 = peg$parseIDENTIFIER();
        }
      }
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s4 = peg$currPos;
// @ts-ignore
        s5 = peg$parseCOLON();
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s6 = peg$parse_();
// @ts-ignore
          s7 = peg$parseType();
// @ts-ignore
          if (s7 !== peg$FAILED) {
// @ts-ignore
            s5 = [s5, s6, s7];
// @ts-ignore
            s4 = s5;
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s4;
// @ts-ignore
            s4 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s4;
// @ts-ignore
          s4 = peg$FAILED;
        }
// @ts-ignore
        if (s4 === peg$FAILED) {
// @ts-ignore
          s4 = null;
        }
// @ts-ignore
        s5 = peg$parse_();
// @ts-ignore
        s6 = peg$parseEQUALS();
// @ts-ignore
        if (s6 !== peg$FAILED) {
// @ts-ignore
          s7 = peg$parse_();
// @ts-ignore
          s8 = peg$parseExpression();
// @ts-ignore
          if (s8 !== peg$FAILED) {
// @ts-ignore
            s9 = peg$parse_();
// @ts-ignore
            s10 = peg$parseSEMICOLON();
// @ts-ignore
            if (s10 !== peg$FAILED) {
// @ts-ignore
              peg$savedPos = s0;
// @ts-ignore
              s0 = peg$f34(s3, s4, s8);
// @ts-ignore
            } else {
// @ts-ignore
              peg$currPos = s0;
// @ts-ignore
              s0 = peg$FAILED;
            }
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseControlStatement() {
// @ts-ignore
    var s0;

// @ts-ignore
    s0 = peg$parseIfStatement();
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$parseSwitchStatement();
// @ts-ignore
      if (s0 === peg$FAILED) {
// @ts-ignore
        s0 = peg$parseLoopStatement();
// @ts-ignore
        if (s0 === peg$FAILED) {
// @ts-ignore
          s0 = peg$parseReturnStatement();
// @ts-ignore
          if (s0 === peg$FAILED) {
// @ts-ignore
            s0 = peg$parseBreakContinueStatement();
          }
        }
      }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseReturnStatement() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseRETURN();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse_();
// @ts-ignore
      s3 = peg$parseExpression();
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s3 = null;
      }
// @ts-ignore
      s4 = peg$parse_();
// @ts-ignore
      s5 = peg$parseSEMICOLON();
// @ts-ignore
      if (s5 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f35(s3);
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseBreakContinueStatement() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseBREAK();
// @ts-ignore
    if (s1 === peg$FAILED) {
// @ts-ignore
      s1 = peg$parseCONTINUE();
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse_();
// @ts-ignore
      s3 = peg$parseExpression();
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s3 = null;
      }
// @ts-ignore
      s4 = peg$parse_();
// @ts-ignore
      s5 = peg$parseSEMICOLON();
// @ts-ignore
      if (s5 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f36(s1, s3);
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseOutStatement() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseOUT();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse_();
// @ts-ignore
      s3 = peg$parseExpression();
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s4 = peg$parse_();
// @ts-ignore
        s5 = peg$parseSEMICOLON();
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          peg$savedPos = s0;
// @ts-ignore
          s0 = peg$f37(s3);
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseThrowStatement() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseTHROW();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse_();
// @ts-ignore
      s3 = peg$parseExpression();
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s4 = peg$parse_();
// @ts-ignore
        s5 = peg$parseSEMICOLON();
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          peg$savedPos = s0;
// @ts-ignore
          s0 = peg$f38(s3);
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseIfStatement() {
// @ts-ignore
    var s0, s1;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseIfExpression();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s1 = peg$f39(s1);
    }
// @ts-ignore
    s0 = s1;

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseSwitchStatement() {
// @ts-ignore
    var s0, s1;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseSwitchExpression();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s1 = peg$f40(s1);
    }
// @ts-ignore
    s0 = s1;

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseSwitchCase() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parse_();
// @ts-ignore
    s2 = peg$parseLPAREN();
// @ts-ignore
    if (s2 !== peg$FAILED) {
// @ts-ignore
      s3 = peg$parse_();
// @ts-ignore
      s4 = peg$parseExpression();
// @ts-ignore
      if (s4 !== peg$FAILED) {
// @ts-ignore
        s5 = peg$parse_();
// @ts-ignore
        s6 = peg$parseRPAREN();
// @ts-ignore
        if (s6 !== peg$FAILED) {
// @ts-ignore
          s7 = peg$parse_();
// @ts-ignore
          s8 = peg$parseBlock();
// @ts-ignore
          if (s8 !== peg$FAILED) {
// @ts-ignore
            s9 = peg$parse_();
// @ts-ignore
            peg$savedPos = s0;
// @ts-ignore
            s0 = peg$f41(s4, s8);
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseSwitchDefault() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parse_();
// @ts-ignore
    s2 = peg$parseLPAREN();
// @ts-ignore
    if (s2 !== peg$FAILED) {
// @ts-ignore
      s3 = peg$parse_();
// @ts-ignore
      s4 = peg$parseRPAREN();
// @ts-ignore
      if (s4 !== peg$FAILED) {
// @ts-ignore
        s5 = peg$parse_();
// @ts-ignore
        s6 = peg$parseBlock();
// @ts-ignore
        if (s6 !== peg$FAILED) {
// @ts-ignore
          s7 = peg$parse_();
// @ts-ignore
          peg$savedPos = s0;
// @ts-ignore
          s0 = peg$f42(s6);
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseLoopStatement() {
// @ts-ignore
    var s0, s1;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseLoopExpression();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s1 = peg$f43(s1);
    }
// @ts-ignore
    s0 = s1;

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseLoopExpression() {
// @ts-ignore
    var s0;

// @ts-ignore
    s0 = peg$parseWhileLoop();
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$parseForeachLoop();
// @ts-ignore
      if (s0 === peg$FAILED) {
// @ts-ignore
        s0 = peg$parseForLoop();
      }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseWhileLoop() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseWHILE();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse_();
// @ts-ignore
      s3 = peg$parseLPAREN();
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s4 = peg$parse_();
// @ts-ignore
        s5 = peg$parseExpression();
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s6 = peg$parse_();
// @ts-ignore
          s7 = peg$parseRPAREN();
// @ts-ignore
          if (s7 !== peg$FAILED) {
// @ts-ignore
            s8 = peg$parse_();
// @ts-ignore
            s9 = peg$parseBlock();
// @ts-ignore
            if (s9 !== peg$FAILED) {
// @ts-ignore
              peg$savedPos = s0;
// @ts-ignore
              s0 = peg$f44(s5, s9);
// @ts-ignore
            } else {
// @ts-ignore
              peg$currPos = s0;
// @ts-ignore
              s0 = peg$FAILED;
            }
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseForLoop() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseFOR();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse_();
// @ts-ignore
      s3 = peg$parseLPAREN();
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s4 = peg$parse_();
// @ts-ignore
        s5 = peg$parseVariableDeclaration();
// @ts-ignore
        if (s5 === peg$FAILED) {
// @ts-ignore
          s5 = peg$parseSEMICOLON();
        }
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s6 = peg$parse_();
// @ts-ignore
          s7 = peg$parseExpressionStatement();
// @ts-ignore
          if (s7 === peg$FAILED) {
// @ts-ignore
            s7 = peg$parseSEMICOLON();
          }
// @ts-ignore
          if (s7 !== peg$FAILED) {
// @ts-ignore
            s8 = peg$parse_();
// @ts-ignore
            s9 = peg$parseExpression();
// @ts-ignore
            if (s9 === peg$FAILED) {
// @ts-ignore
              s9 = null;
            }
// @ts-ignore
            s10 = peg$parse_();
// @ts-ignore
            s11 = peg$parseRPAREN();
// @ts-ignore
            if (s11 !== peg$FAILED) {
// @ts-ignore
              s12 = peg$parse_();
// @ts-ignore
              s13 = peg$parseBlock();
// @ts-ignore
              if (s13 !== peg$FAILED) {
// @ts-ignore
                peg$savedPos = s0;
// @ts-ignore
                s0 = peg$f45(s5, s7, s9, s13);
// @ts-ignore
              } else {
// @ts-ignore
                peg$currPos = s0;
// @ts-ignore
                s0 = peg$FAILED;
              }
// @ts-ignore
            } else {
// @ts-ignore
              peg$currPos = s0;
// @ts-ignore
              s0 = peg$FAILED;
            }
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseForeachLoop() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseFOR();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse_();
// @ts-ignore
      s3 = peg$parseLPAREN();
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s4 = peg$parse_();
// @ts-ignore
        s5 = peg$parseVAR();
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s6 = peg$parse_();
// @ts-ignore
          s7 = peg$parseDestructuringPattern();
// @ts-ignore
          if (s7 === peg$FAILED) {
// @ts-ignore
            s7 = peg$parseDestructuringArrayPattern();
// @ts-ignore
            if (s7 === peg$FAILED) {
// @ts-ignore
              s7 = peg$parseIDENTIFIER();
            }
          }
// @ts-ignore
          if (s7 !== peg$FAILED) {
// @ts-ignore
            s8 = peg$currPos;
// @ts-ignore
            s9 = peg$parseCOLON();
// @ts-ignore
            if (s9 !== peg$FAILED) {
// @ts-ignore
              s10 = peg$parse_();
// @ts-ignore
              s11 = peg$parseType();
// @ts-ignore
              if (s11 !== peg$FAILED) {
// @ts-ignore
                s9 = [s9, s10, s11];
// @ts-ignore
                s8 = s9;
// @ts-ignore
              } else {
// @ts-ignore
                peg$currPos = s8;
// @ts-ignore
                s8 = peg$FAILED;
              }
// @ts-ignore
            } else {
// @ts-ignore
              peg$currPos = s8;
// @ts-ignore
              s8 = peg$FAILED;
            }
// @ts-ignore
            if (s8 === peg$FAILED) {
// @ts-ignore
              s8 = null;
            }
// @ts-ignore
            s9 = peg$parse_();
// @ts-ignore
            s10 = peg$parseIN();
// @ts-ignore
            if (s10 !== peg$FAILED) {
// @ts-ignore
              s11 = peg$parse_();
// @ts-ignore
              s12 = peg$parseExpression();
// @ts-ignore
              if (s12 !== peg$FAILED) {
// @ts-ignore
                s13 = peg$parseRPAREN();
// @ts-ignore
                if (s13 !== peg$FAILED) {
// @ts-ignore
                  s14 = peg$parse_();
// @ts-ignore
                  s15 = peg$parseBlock();
// @ts-ignore
                  if (s15 !== peg$FAILED) {
// @ts-ignore
                    peg$savedPos = s0;
// @ts-ignore
                    s0 = peg$f46(s7, s8, s12, s15);
// @ts-ignore
                  } else {
// @ts-ignore
                    peg$currPos = s0;
// @ts-ignore
                    s0 = peg$FAILED;
                  }
// @ts-ignore
                } else {
// @ts-ignore
                  peg$currPos = s0;
// @ts-ignore
                  s0 = peg$FAILED;
                }
// @ts-ignore
              } else {
// @ts-ignore
                peg$currPos = s0;
// @ts-ignore
                s0 = peg$FAILED;
              }
// @ts-ignore
            } else {
// @ts-ignore
              peg$currPos = s0;
// @ts-ignore
              s0 = peg$FAILED;
            }
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseBlock() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseLBRACE();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse_();
// @ts-ignore
      s3 = [];
// @ts-ignore
      s4 = peg$parseStatement();
// @ts-ignore
      while (s4 !== peg$FAILED) {
// @ts-ignore
        s3.push(s4);
// @ts-ignore
        s4 = peg$parseStatement();
      }
// @ts-ignore
      s4 = peg$parse_();
// @ts-ignore
      s5 = peg$parseRBRACE();
// @ts-ignore
      if (s5 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f47(s3);
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseExpression() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parse_();
// @ts-ignore
    s2 = peg$parseAssignmentExpression();
// @ts-ignore
    if (s2 !== peg$FAILED) {
// @ts-ignore
      s3 = peg$parse_();
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s0 = peg$f48(s2);
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseAssignmentExpression() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseConditionalExpression();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse_();
// @ts-ignore
      s3 = peg$parseAssignmentOperator();
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s4 = peg$parse_();
// @ts-ignore
        s5 = peg$parseAssignmentExpression();
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          peg$savedPos = s0;
// @ts-ignore
          s0 = peg$f49(s1, s3, s5);
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$parseConditionalExpression();
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseConditionalExpression() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseLogicalOrExpression();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse_();
// @ts-ignore
      s3 = peg$parseQUESTIONMARK();
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s4 = peg$parse_();
// @ts-ignore
        s5 = peg$parseExpression();
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s6 = peg$parse_();
// @ts-ignore
          s7 = peg$parseCOLON();
// @ts-ignore
          if (s7 !== peg$FAILED) {
// @ts-ignore
            s8 = peg$parse_();
// @ts-ignore
            s9 = peg$parseConditionalExpression();
// @ts-ignore
            if (s9 !== peg$FAILED) {
// @ts-ignore
              peg$savedPos = s0;
// @ts-ignore
              s0 = peg$f50(s1, s5, s9);
// @ts-ignore
            } else {
// @ts-ignore
              peg$currPos = s0;
// @ts-ignore
              s0 = peg$FAILED;
            }
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$parseLogicalOrExpression();
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseLogicalOrExpression() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseLogicalAndExpression();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = [];
// @ts-ignore
      s3 = peg$currPos;
// @ts-ignore
      s4 = peg$parse_();
// @ts-ignore
      s5 = peg$parsePIPE_PIPE();
// @ts-ignore
      if (s5 !== peg$FAILED) {
// @ts-ignore
        s6 = peg$parse_();
// @ts-ignore
        s7 = peg$parseLogicalAndExpression();
// @ts-ignore
        if (s7 !== peg$FAILED) {
// @ts-ignore
          s4 = [s4, s5, s6, s7];
// @ts-ignore
          s3 = s4;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s3;
// @ts-ignore
        s3 = peg$FAILED;
      }
// @ts-ignore
      while (s3 !== peg$FAILED) {
// @ts-ignore
        s2.push(s3);
// @ts-ignore
        s3 = peg$currPos;
// @ts-ignore
        s4 = peg$parse_();
// @ts-ignore
        s5 = peg$parsePIPE_PIPE();
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s6 = peg$parse_();
// @ts-ignore
          s7 = peg$parseLogicalAndExpression();
// @ts-ignore
          if (s7 !== peg$FAILED) {
// @ts-ignore
            s4 = [s4, s5, s6, s7];
// @ts-ignore
            s3 = s4;
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s3;
// @ts-ignore
            s3 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
      }
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s0 = peg$f51(s1, s2);
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseLogicalAndExpression() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseEqualityExpression();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = [];
// @ts-ignore
      s3 = peg$currPos;
// @ts-ignore
      s4 = peg$parse_();
// @ts-ignore
      s5 = peg$parseAMPERSAND_AMPERSAND();
// @ts-ignore
      if (s5 !== peg$FAILED) {
// @ts-ignore
        s6 = peg$parse_();
// @ts-ignore
        s7 = peg$parseEqualityExpression();
// @ts-ignore
        if (s7 !== peg$FAILED) {
// @ts-ignore
          s4 = [s4, s5, s6, s7];
// @ts-ignore
          s3 = s4;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s3;
// @ts-ignore
        s3 = peg$FAILED;
      }
// @ts-ignore
      while (s3 !== peg$FAILED) {
// @ts-ignore
        s2.push(s3);
// @ts-ignore
        s3 = peg$currPos;
// @ts-ignore
        s4 = peg$parse_();
// @ts-ignore
        s5 = peg$parseAMPERSAND_AMPERSAND();
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s6 = peg$parse_();
// @ts-ignore
          s7 = peg$parseEqualityExpression();
// @ts-ignore
          if (s7 !== peg$FAILED) {
// @ts-ignore
            s4 = [s4, s5, s6, s7];
// @ts-ignore
            s3 = s4;
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s3;
// @ts-ignore
            s3 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
      }
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s0 = peg$f52(s1, s2);
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseEqualityExpression() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseRelationalExpression();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = [];
// @ts-ignore
      s3 = peg$currPos;
// @ts-ignore
      s4 = peg$parse_();
// @ts-ignore
      s5 = peg$parseEqualityOperator();
// @ts-ignore
      if (s5 !== peg$FAILED) {
// @ts-ignore
        s6 = peg$parse_();
// @ts-ignore
        s7 = peg$parseRelationalExpression();
// @ts-ignore
        if (s7 !== peg$FAILED) {
// @ts-ignore
          s4 = [s4, s5, s6, s7];
// @ts-ignore
          s3 = s4;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s3;
// @ts-ignore
        s3 = peg$FAILED;
      }
// @ts-ignore
      while (s3 !== peg$FAILED) {
// @ts-ignore
        s2.push(s3);
// @ts-ignore
        s3 = peg$currPos;
// @ts-ignore
        s4 = peg$parse_();
// @ts-ignore
        s5 = peg$parseEqualityOperator();
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s6 = peg$parse_();
// @ts-ignore
          s7 = peg$parseRelationalExpression();
// @ts-ignore
          if (s7 !== peg$FAILED) {
// @ts-ignore
            s4 = [s4, s5, s6, s7];
// @ts-ignore
            s3 = s4;
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s3;
// @ts-ignore
            s3 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
      }
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s0 = peg$f53(s1, s2);
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseRelationalExpression() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseAdditiveExpression();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = [];
// @ts-ignore
      s3 = peg$currPos;
// @ts-ignore
      s4 = peg$parse_();
// @ts-ignore
      s5 = peg$parseRelationalOperator();
// @ts-ignore
      if (s5 !== peg$FAILED) {
// @ts-ignore
        s6 = peg$parse_();
// @ts-ignore
        s7 = peg$parseAdditiveExpression();
// @ts-ignore
        if (s7 !== peg$FAILED) {
// @ts-ignore
          s4 = [s4, s5, s6, s7];
// @ts-ignore
          s3 = s4;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s3;
// @ts-ignore
        s3 = peg$FAILED;
      }
// @ts-ignore
      while (s3 !== peg$FAILED) {
// @ts-ignore
        s2.push(s3);
// @ts-ignore
        s3 = peg$currPos;
// @ts-ignore
        s4 = peg$parse_();
// @ts-ignore
        s5 = peg$parseRelationalOperator();
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s6 = peg$parse_();
// @ts-ignore
          s7 = peg$parseAdditiveExpression();
// @ts-ignore
          if (s7 !== peg$FAILED) {
// @ts-ignore
            s4 = [s4, s5, s6, s7];
// @ts-ignore
            s3 = s4;
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s3;
// @ts-ignore
            s3 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
      }
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s0 = peg$f54(s1, s2);
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseAdditiveExpression() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseMultiplicativeExpression();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = [];
// @ts-ignore
      s3 = peg$currPos;
// @ts-ignore
      s4 = peg$parse_();
// @ts-ignore
      s5 = peg$parseAdditiveOperator();
// @ts-ignore
      if (s5 !== peg$FAILED) {
// @ts-ignore
        s6 = peg$parse_();
// @ts-ignore
        s7 = peg$parseMultiplicativeExpression();
// @ts-ignore
        if (s7 !== peg$FAILED) {
// @ts-ignore
          s4 = [s4, s5, s6, s7];
// @ts-ignore
          s3 = s4;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s3;
// @ts-ignore
        s3 = peg$FAILED;
      }
// @ts-ignore
      while (s3 !== peg$FAILED) {
// @ts-ignore
        s2.push(s3);
// @ts-ignore
        s3 = peg$currPos;
// @ts-ignore
        s4 = peg$parse_();
// @ts-ignore
        s5 = peg$parseAdditiveOperator();
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s6 = peg$parse_();
// @ts-ignore
          s7 = peg$parseMultiplicativeExpression();
// @ts-ignore
          if (s7 !== peg$FAILED) {
// @ts-ignore
            s4 = [s4, s5, s6, s7];
// @ts-ignore
            s3 = s4;
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s3;
// @ts-ignore
            s3 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
      }
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s0 = peg$f55(s1, s2);
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseMultiplicativeExpression() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseUnaryExpression();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = [];
// @ts-ignore
      s3 = peg$currPos;
// @ts-ignore
      s4 = peg$parse_();
// @ts-ignore
      s5 = peg$parseMultiplicativeOperator();
// @ts-ignore
      if (s5 !== peg$FAILED) {
// @ts-ignore
        s6 = peg$parse_();
// @ts-ignore
        s7 = peg$parseUnaryExpression();
// @ts-ignore
        if (s7 !== peg$FAILED) {
// @ts-ignore
          s4 = [s4, s5, s6, s7];
// @ts-ignore
          s3 = s4;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s3;
// @ts-ignore
        s3 = peg$FAILED;
      }
// @ts-ignore
      while (s3 !== peg$FAILED) {
// @ts-ignore
        s2.push(s3);
// @ts-ignore
        s3 = peg$currPos;
// @ts-ignore
        s4 = peg$parse_();
// @ts-ignore
        s5 = peg$parseMultiplicativeOperator();
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s6 = peg$parse_();
// @ts-ignore
          s7 = peg$parseUnaryExpression();
// @ts-ignore
          if (s7 !== peg$FAILED) {
// @ts-ignore
            s4 = [s4, s5, s6, s7];
// @ts-ignore
            s3 = s4;
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s3;
// @ts-ignore
            s3 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
      }
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s0 = peg$f56(s1, s2);
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseUnaryExpression() {
// @ts-ignore
    var s0, s1, s2, s3, s4;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseUnaryOperator();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse_();
// @ts-ignore
      s3 = peg$parseUnaryExpression();
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f57(s1, s3);
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$currPos;
// @ts-ignore
      s1 = peg$parsePrimaryExpression();
// @ts-ignore
      if (s1 !== peg$FAILED) {
// @ts-ignore
        s2 = peg$parse_();
// @ts-ignore
        s3 = [];
// @ts-ignore
        s4 = peg$parseMemberAccess();
// @ts-ignore
        while (s4 !== peg$FAILED) {
// @ts-ignore
          s3.push(s4);
// @ts-ignore
          s4 = peg$parseMemberAccess();
        }
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f58(s1, s3);
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseMemberAccess() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseDOT();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse_();
// @ts-ignore
      s3 = peg$parseIDENTIFIER();
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s4 = peg$parse_();
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f59(s3);
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$currPos;
// @ts-ignore
      s1 = peg$parseLBRACKET();
// @ts-ignore
      if (s1 !== peg$FAILED) {
// @ts-ignore
        s2 = peg$parse_();
// @ts-ignore
        s3 = peg$parseExpression();
// @ts-ignore
        if (s3 !== peg$FAILED) {
// @ts-ignore
          s4 = peg$parse_();
// @ts-ignore
          s5 = peg$parseRBRACKET();
// @ts-ignore
          if (s5 !== peg$FAILED) {
// @ts-ignore
            s6 = peg$parse_();
// @ts-ignore
            peg$savedPos = s0;
// @ts-ignore
            s0 = peg$f60(s3);
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
      if (s0 === peg$FAILED) {
// @ts-ignore
        s0 = peg$currPos;
// @ts-ignore
        s1 = peg$parseLPAREN();
// @ts-ignore
        if (s1 !== peg$FAILED) {
// @ts-ignore
          s2 = peg$parse_();
// @ts-ignore
          s3 = peg$parseArgumentList();
// @ts-ignore
          if (s3 === peg$FAILED) {
// @ts-ignore
            s3 = null;
          }
// @ts-ignore
          s4 = peg$parse_();
// @ts-ignore
          s5 = peg$parseRPAREN();
// @ts-ignore
          if (s5 !== peg$FAILED) {
// @ts-ignore
            s6 = peg$parse_();
// @ts-ignore
            peg$savedPos = s0;
// @ts-ignore
            s0 = peg$f61(s3);
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
      }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsePrimaryExpression() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseLiteral();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s1 = peg$f62(s1);
    }
// @ts-ignore
    s0 = s1;
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$parseObjectLiteral();
// @ts-ignore
      if (s0 === peg$FAILED) {
// @ts-ignore
        s0 = peg$parseArrayLiteral();
// @ts-ignore
        if (s0 === peg$FAILED) {
// @ts-ignore
          s0 = peg$parseUnpackLiteral();
// @ts-ignore
          if (s0 === peg$FAILED) {
// @ts-ignore
            s0 = peg$parseLambdaExpression();
// @ts-ignore
            if (s0 === peg$FAILED) {
// @ts-ignore
              s0 = peg$parseIfExpression();
// @ts-ignore
              if (s0 === peg$FAILED) {
// @ts-ignore
                s0 = peg$parseSwitchExpression();
// @ts-ignore
                if (s0 === peg$FAILED) {
// @ts-ignore
                  s0 = peg$parseLoopExpression();
// @ts-ignore
                  if (s0 === peg$FAILED) {
// @ts-ignore
                    s0 = peg$currPos;
// @ts-ignore
                    s1 = peg$parseIDENTIFIER();
// @ts-ignore
                    if (s1 !== peg$FAILED) {
// @ts-ignore
                      peg$savedPos = s0;
// @ts-ignore
                      s1 = peg$f63(s1);
                    }
// @ts-ignore
                    s0 = s1;
// @ts-ignore
                    if (s0 === peg$FAILED) {
// @ts-ignore
                      s0 = peg$currPos;
// @ts-ignore
                      s1 = peg$parseLPAREN();
// @ts-ignore
                      if (s1 !== peg$FAILED) {
// @ts-ignore
                        s2 = peg$parse_();
// @ts-ignore
                        s3 = peg$parseExpression();
// @ts-ignore
                        if (s3 !== peg$FAILED) {
// @ts-ignore
                          s4 = peg$parse_();
// @ts-ignore
                          s5 = peg$parseRPAREN();
// @ts-ignore
                          if (s5 !== peg$FAILED) {
// @ts-ignore
                            peg$savedPos = s0;
// @ts-ignore
                            s0 = peg$f64(s3);
// @ts-ignore
                          } else {
// @ts-ignore
                            peg$currPos = s0;
// @ts-ignore
                            s0 = peg$FAILED;
                          }
// @ts-ignore
                        } else {
// @ts-ignore
                          peg$currPos = s0;
// @ts-ignore
                          s0 = peg$FAILED;
                        }
// @ts-ignore
                      } else {
// @ts-ignore
                        peg$currPos = s0;
// @ts-ignore
                        s0 = peg$FAILED;
                      }
// @ts-ignore
                      if (s0 === peg$FAILED) {
// @ts-ignore
                        s0 = peg$currPos;
// @ts-ignore
                        s1 = peg$parseLBRACE();
// @ts-ignore
                        if (s1 !== peg$FAILED) {
// @ts-ignore
                          s2 = peg$parse_();
// @ts-ignore
                          s3 = peg$parseBlock();
// @ts-ignore
                          if (s3 !== peg$FAILED) {
// @ts-ignore
                            s4 = peg$parse_();
// @ts-ignore
                            s5 = peg$parseRBRACE();
// @ts-ignore
                            if (s5 !== peg$FAILED) {
// @ts-ignore
                              peg$savedPos = s0;
// @ts-ignore
                              s0 = peg$f65(s3);
// @ts-ignore
                            } else {
// @ts-ignore
                              peg$currPos = s0;
// @ts-ignore
                              s0 = peg$FAILED;
                            }
// @ts-ignore
                          } else {
// @ts-ignore
                            peg$currPos = s0;
// @ts-ignore
                            s0 = peg$FAILED;
                          }
// @ts-ignore
                        } else {
// @ts-ignore
                          peg$currPos = s0;
// @ts-ignore
                          s0 = peg$FAILED;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseArrayLiteral() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseLBRACKET();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse_();
// @ts-ignore
      s3 = peg$currPos;
// @ts-ignore
      s4 = peg$parseExpression();
// @ts-ignore
      if (s4 !== peg$FAILED) {
// @ts-ignore
        s5 = [];
// @ts-ignore
        s6 = peg$currPos;
// @ts-ignore
        s7 = peg$parse_();
// @ts-ignore
        s8 = peg$parseCOMMA();
// @ts-ignore
        if (s8 === peg$FAILED) {
// @ts-ignore
          s8 = peg$parseSEMICOLON();
        }
// @ts-ignore
        if (s8 !== peg$FAILED) {
// @ts-ignore
          s9 = peg$parse_();
// @ts-ignore
          s10 = peg$parseExpression();
// @ts-ignore
          if (s10 !== peg$FAILED) {
// @ts-ignore
            s7 = [s7, s8, s9, s10];
// @ts-ignore
            s6 = s7;
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s6;
// @ts-ignore
            s6 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s6;
// @ts-ignore
          s6 = peg$FAILED;
        }
// @ts-ignore
        while (s6 !== peg$FAILED) {
// @ts-ignore
          s5.push(s6);
// @ts-ignore
          s6 = peg$currPos;
// @ts-ignore
          s7 = peg$parse_();
// @ts-ignore
          s8 = peg$parseCOMMA();
// @ts-ignore
          if (s8 === peg$FAILED) {
// @ts-ignore
            s8 = peg$parseSEMICOLON();
          }
// @ts-ignore
          if (s8 !== peg$FAILED) {
// @ts-ignore
            s9 = peg$parse_();
// @ts-ignore
            s10 = peg$parseExpression();
// @ts-ignore
            if (s10 !== peg$FAILED) {
// @ts-ignore
              s7 = [s7, s8, s9, s10];
// @ts-ignore
              s6 = s7;
// @ts-ignore
            } else {
// @ts-ignore
              peg$currPos = s6;
// @ts-ignore
              s6 = peg$FAILED;
            }
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s6;
// @ts-ignore
            s6 = peg$FAILED;
          }
        }
// @ts-ignore
        s6 = peg$parse_();
// @ts-ignore
        s7 = peg$parseCOMMA();
// @ts-ignore
        if (s7 === peg$FAILED) {
// @ts-ignore
          s7 = peg$parseSEMICOLON();
        }
// @ts-ignore
        if (s7 === peg$FAILED) {
// @ts-ignore
          s7 = null;
        }
// @ts-ignore
        s4 = [s4, s5, s6, s7];
// @ts-ignore
        s3 = s4;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s3;
// @ts-ignore
        s3 = peg$FAILED;
      }
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s3 = null;
      }
// @ts-ignore
      s4 = peg$parse_();
// @ts-ignore
      s5 = peg$parseRBRACKET();
// @ts-ignore
      if (s5 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f66(s3);
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseUnpackLiteral() {
// @ts-ignore
    var s0, s1, s2, s3, s4;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parsePARAMS();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse_();
// @ts-ignore
      s3 = peg$parseExpression();
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s4 = peg$parse_();
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f67(s3);
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseObjectLiteral() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseLBRACE();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse_();
// @ts-ignore
      s3 = peg$currPos;
// @ts-ignore
      s4 = peg$parseKeyValuePair();
// @ts-ignore
      if (s4 !== peg$FAILED) {
// @ts-ignore
        s5 = [];
// @ts-ignore
        s6 = peg$currPos;
// @ts-ignore
        s7 = peg$parse_();
// @ts-ignore
        s8 = peg$parseCOMMA();
// @ts-ignore
        if (s8 === peg$FAILED) {
// @ts-ignore
          s8 = peg$parseSEMICOLON();
        }
// @ts-ignore
        if (s8 === peg$FAILED) {
// @ts-ignore
          s8 = null;
        }
// @ts-ignore
        s9 = peg$parse_();
// @ts-ignore
        s10 = peg$parseKeyValuePair();
// @ts-ignore
        if (s10 !== peg$FAILED) {
// @ts-ignore
          s7 = [s7, s8, s9, s10];
// @ts-ignore
          s6 = s7;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s6;
// @ts-ignore
          s6 = peg$FAILED;
        }
// @ts-ignore
        while (s6 !== peg$FAILED) {
// @ts-ignore
          s5.push(s6);
// @ts-ignore
          s6 = peg$currPos;
// @ts-ignore
          s7 = peg$parse_();
// @ts-ignore
          s8 = peg$parseCOMMA();
// @ts-ignore
          if (s8 === peg$FAILED) {
// @ts-ignore
            s8 = peg$parseSEMICOLON();
          }
// @ts-ignore
          if (s8 === peg$FAILED) {
// @ts-ignore
            s8 = null;
          }
// @ts-ignore
          s9 = peg$parse_();
// @ts-ignore
          s10 = peg$parseKeyValuePair();
// @ts-ignore
          if (s10 !== peg$FAILED) {
// @ts-ignore
            s7 = [s7, s8, s9, s10];
// @ts-ignore
            s6 = s7;
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s6;
// @ts-ignore
            s6 = peg$FAILED;
          }
        }
// @ts-ignore
        s6 = peg$parse_();
// @ts-ignore
        s7 = peg$parseCOMMA();
// @ts-ignore
        if (s7 === peg$FAILED) {
// @ts-ignore
          s7 = peg$parseSEMICOLON();
        }
// @ts-ignore
        if (s7 === peg$FAILED) {
// @ts-ignore
          s7 = null;
        }
// @ts-ignore
        s4 = [s4, s5, s6, s7];
// @ts-ignore
        s3 = s4;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s3;
// @ts-ignore
        s3 = peg$FAILED;
      }
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s3 = null;
      }
// @ts-ignore
      s4 = peg$parse_();
// @ts-ignore
      s5 = peg$parseRBRACE();
// @ts-ignore
      if (s5 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f68(s3);
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseKeyValuePair() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseSTRING();
// @ts-ignore
    if (s1 === peg$FAILED) {
// @ts-ignore
      s1 = peg$parseComputedKey();
// @ts-ignore
      if (s1 === peg$FAILED) {
// @ts-ignore
        s1 = peg$parseIDENTIFIER();
      }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse_();
// @ts-ignore
      s3 = peg$parseCOLON();
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s4 = peg$parse_();
// @ts-ignore
        s5 = peg$parseExpression();
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          peg$savedPos = s0;
// @ts-ignore
          s0 = peg$f69(s1, s5);
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseComputedKey() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseLBRACKET();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse_();
// @ts-ignore
      s3 = peg$parseExpression();
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s4 = peg$parse_();
// @ts-ignore
        s5 = peg$parseRBRACKET();
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          peg$savedPos = s0;
// @ts-ignore
          s0 = peg$f70(s3);
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseLambdaExpression() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseLPAREN();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse_();
// @ts-ignore
      s3 = peg$parseParameterList();
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s3 = null;
      }
// @ts-ignore
      s4 = peg$parse_();
// @ts-ignore
      s5 = peg$currPos;
// @ts-ignore
      s6 = peg$parseCOMMA();
// @ts-ignore
      if (s6 !== peg$FAILED) {
// @ts-ignore
        s7 = peg$parse_();
// @ts-ignore
        s8 = peg$parsePARAMS();
// @ts-ignore
        if (s8 !== peg$FAILED) {
// @ts-ignore
          s9 = peg$parse_();
// @ts-ignore
          s10 = peg$parseParameter();
// @ts-ignore
          if (s10 !== peg$FAILED) {
// @ts-ignore
            s11 = peg$parse_();
// @ts-ignore
            s6 = [s6, s7, s8, s9, s10, s11];
// @ts-ignore
            s5 = s6;
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s5;
// @ts-ignore
            s5 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s5;
// @ts-ignore
          s5 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s5;
// @ts-ignore
        s5 = peg$FAILED;
      }
// @ts-ignore
      if (s5 === peg$FAILED) {
// @ts-ignore
        s5 = null;
      }
// @ts-ignore
      s6 = peg$parse_();
// @ts-ignore
      s7 = peg$parseRPAREN();
// @ts-ignore
      if (s7 !== peg$FAILED) {
// @ts-ignore
        s8 = peg$parse_();
// @ts-ignore
        s9 = peg$parseRIGHT_ARROW();
// @ts-ignore
        if (s9 !== peg$FAILED) {
// @ts-ignore
          s10 = peg$parse_();
// @ts-ignore
          s11 = peg$parseBlock();
// @ts-ignore
          if (s11 !== peg$FAILED) {
// @ts-ignore
            s12 = peg$parse_();
// @ts-ignore
            peg$savedPos = s0;
// @ts-ignore
            s0 = peg$f71(s3, s5, s11);
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$currPos;
// @ts-ignore
      s1 = peg$parseLPAREN();
// @ts-ignore
      if (s1 !== peg$FAILED) {
// @ts-ignore
        s2 = peg$parse_();
// @ts-ignore
        s3 = peg$parsePARAMS();
// @ts-ignore
        if (s3 !== peg$FAILED) {
// @ts-ignore
          s4 = peg$parse_();
// @ts-ignore
          s5 = peg$parseParameter();
// @ts-ignore
          if (s5 !== peg$FAILED) {
// @ts-ignore
            s6 = peg$parse_();
// @ts-ignore
            s7 = peg$parseRPAREN();
// @ts-ignore
            if (s7 !== peg$FAILED) {
// @ts-ignore
              s8 = peg$parse_();
// @ts-ignore
              s9 = peg$parseRIGHT_ARROW();
// @ts-ignore
              if (s9 !== peg$FAILED) {
// @ts-ignore
                s10 = peg$parse_();
// @ts-ignore
                s11 = peg$parseBlock();
// @ts-ignore
                if (s11 !== peg$FAILED) {
// @ts-ignore
                  s12 = peg$parse_();
// @ts-ignore
                  peg$savedPos = s0;
// @ts-ignore
                  s0 = peg$f72(s5, s11);
// @ts-ignore
                } else {
// @ts-ignore
                  peg$currPos = s0;
// @ts-ignore
                  s0 = peg$FAILED;
                }
// @ts-ignore
              } else {
// @ts-ignore
                peg$currPos = s0;
// @ts-ignore
                s0 = peg$FAILED;
              }
// @ts-ignore
            } else {
// @ts-ignore
              peg$currPos = s0;
// @ts-ignore
              s0 = peg$FAILED;
            }
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseIfExpression() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseIF();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse_();
// @ts-ignore
      s3 = peg$parseLPAREN();
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s4 = peg$parse_();
// @ts-ignore
        s5 = peg$parseExpression();
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s6 = peg$parse_();
// @ts-ignore
          s7 = peg$parseRPAREN();
// @ts-ignore
          if (s7 !== peg$FAILED) {
// @ts-ignore
            s8 = peg$parse_();
// @ts-ignore
            s9 = peg$parseBlock();
// @ts-ignore
            if (s9 !== peg$FAILED) {
// @ts-ignore
              s10 = peg$currPos;
// @ts-ignore
              s11 = peg$parse_();
// @ts-ignore
              s12 = peg$parseELSE();
// @ts-ignore
              if (s12 !== peg$FAILED) {
// @ts-ignore
                s13 = peg$parse_();
// @ts-ignore
                s14 = peg$parseBlock();
// @ts-ignore
                if (s14 === peg$FAILED) {
// @ts-ignore
                  s14 = peg$parseIfExpression();
                }
// @ts-ignore
                if (s14 !== peg$FAILED) {
// @ts-ignore
                  s11 = [s11, s12, s13, s14];
// @ts-ignore
                  s10 = s11;
// @ts-ignore
                } else {
// @ts-ignore
                  peg$currPos = s10;
// @ts-ignore
                  s10 = peg$FAILED;
                }
// @ts-ignore
              } else {
// @ts-ignore
                peg$currPos = s10;
// @ts-ignore
                s10 = peg$FAILED;
              }
// @ts-ignore
              if (s10 === peg$FAILED) {
// @ts-ignore
                s10 = null;
              }
// @ts-ignore
              peg$savedPos = s0;
// @ts-ignore
              s0 = peg$f73(s5, s9, s10);
// @ts-ignore
            } else {
// @ts-ignore
              peg$currPos = s0;
// @ts-ignore
              s0 = peg$FAILED;
            }
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseSwitchExpression() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseSWITCH();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse_();
// @ts-ignore
      s3 = peg$parseLPAREN();
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s4 = peg$parse_();
// @ts-ignore
        s5 = peg$parseExpression();
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s6 = peg$parse_();
// @ts-ignore
          s7 = peg$parseRPAREN();
// @ts-ignore
          if (s7 !== peg$FAILED) {
// @ts-ignore
            s8 = peg$parse_();
// @ts-ignore
            s9 = peg$parseLBRACE();
// @ts-ignore
            if (s9 !== peg$FAILED) {
// @ts-ignore
              s10 = peg$parse_();
// @ts-ignore
              s11 = [];
// @ts-ignore
              s12 = peg$parseSwitchCase();
// @ts-ignore
              while (s12 !== peg$FAILED) {
// @ts-ignore
                s11.push(s12);
// @ts-ignore
                s12 = peg$parseSwitchCase();
              }
// @ts-ignore
              s12 = peg$parseSwitchDefault();
// @ts-ignore
              if (s12 === peg$FAILED) {
// @ts-ignore
                s12 = null;
              }
// @ts-ignore
              s13 = peg$parse_();
// @ts-ignore
              s14 = peg$parseRBRACE();
// @ts-ignore
              if (s14 !== peg$FAILED) {
// @ts-ignore
                peg$savedPos = s0;
// @ts-ignore
                s0 = peg$f74(s5, s11, s12);
// @ts-ignore
              } else {
// @ts-ignore
                peg$currPos = s0;
// @ts-ignore
                s0 = peg$FAILED;
              }
// @ts-ignore
            } else {
// @ts-ignore
              peg$currPos = s0;
// @ts-ignore
              s0 = peg$FAILED;
            }
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseAssignmentOperator() {
// @ts-ignore
    var s0;

// @ts-ignore
    s0 = peg$parseEQUALS();
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$parsePLUS_EQUALS();
// @ts-ignore
      if (s0 === peg$FAILED) {
// @ts-ignore
        s0 = peg$parseMINUS_EQUALS();
// @ts-ignore
        if (s0 === peg$FAILED) {
// @ts-ignore
          s0 = peg$parseSTAR_EQUALS();
// @ts-ignore
          if (s0 === peg$FAILED) {
// @ts-ignore
            s0 = peg$parseSLASH_EQUALS();
// @ts-ignore
            if (s0 === peg$FAILED) {
// @ts-ignore
              s0 = peg$parsePERCENT_EQUALS();
            }
          }
        }
      }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseEqualityOperator() {
// @ts-ignore
    var s0;

// @ts-ignore
    s0 = peg$parseDOUBLE_EQUALS();
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$parseBANG_EQUALS();
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseRelationalOperator() {
// @ts-ignore
    var s0;

// @ts-ignore
    s0 = peg$parseLESS_THAN_EQUALS();
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$parseGREATER_THAN_EQUALS();
// @ts-ignore
      if (s0 === peg$FAILED) {
// @ts-ignore
        s0 = peg$parseLESS_THAN();
// @ts-ignore
        if (s0 === peg$FAILED) {
// @ts-ignore
          s0 = peg$parseGREATER_THAN();
        }
      }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseAdditiveOperator() {
// @ts-ignore
    var s0;

// @ts-ignore
    s0 = peg$parsePLUS();
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$parseMINUS();
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseMultiplicativeOperator() {
// @ts-ignore
    var s0;

// @ts-ignore
    s0 = peg$parseSTAR();
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$parseSLASH();
// @ts-ignore
      if (s0 === peg$FAILED) {
// @ts-ignore
        s0 = peg$parsePERCENT();
      }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseUnaryOperator() {
// @ts-ignore
    var s0, s1;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseBANG();
// @ts-ignore
    if (s1 === peg$FAILED) {
// @ts-ignore
      s1 = peg$parseTILDE();
// @ts-ignore
      if (s1 === peg$FAILED) {
// @ts-ignore
        s1 = peg$parsePLUS();
// @ts-ignore
        if (s1 === peg$FAILED) {
// @ts-ignore
          s1 = peg$parseMINUS();
// @ts-ignore
          if (s1 === peg$FAILED) {
// @ts-ignore
            s1 = peg$parseDOLLAR();
// @ts-ignore
            if (s1 === peg$FAILED) {
// @ts-ignore
              s1 = peg$parseNEW();
            }
          }
        }
      }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s1 = peg$f75();
    }
// @ts-ignore
    s0 = s1;

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseFunctionDeclaration() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parse_();
// @ts-ignore
    s2 = [];
// @ts-ignore
    s3 = peg$parseDecoratorExpression();
// @ts-ignore
    while (s3 !== peg$FAILED) {
// @ts-ignore
      s2.push(s3);
// @ts-ignore
      s3 = peg$parseDecoratorExpression();
    }
// @ts-ignore
    s3 = peg$parse_();
// @ts-ignore
    s4 = peg$parseIDENTIFIER();
// @ts-ignore
    if (s4 !== peg$FAILED) {
// @ts-ignore
      s5 = peg$parse_();
// @ts-ignore
      s6 = peg$parseGenericDeclaration();
// @ts-ignore
      if (s6 === peg$FAILED) {
// @ts-ignore
        s6 = null;
      }
// @ts-ignore
      s7 = peg$parse_();
// @ts-ignore
      s8 = peg$parseLPAREN();
// @ts-ignore
      if (s8 !== peg$FAILED) {
// @ts-ignore
        s9 = peg$parse_();
// @ts-ignore
        s10 = peg$parseParameterList();
// @ts-ignore
        if (s10 === peg$FAILED) {
// @ts-ignore
          s10 = null;
        }
// @ts-ignore
        s11 = peg$parse_();
// @ts-ignore
        s12 = peg$currPos;
// @ts-ignore
        s13 = peg$parseCOMMA();
// @ts-ignore
        if (s13 !== peg$FAILED) {
// @ts-ignore
          s14 = peg$parse_();
// @ts-ignore
          s15 = peg$parsePARAMS();
// @ts-ignore
          if (s15 !== peg$FAILED) {
// @ts-ignore
            s16 = peg$parse_();
// @ts-ignore
            s17 = peg$parseParameter();
// @ts-ignore
            if (s17 !== peg$FAILED) {
// @ts-ignore
              s18 = peg$parse_();
// @ts-ignore
              s13 = [s13, s14, s15, s16, s17, s18];
// @ts-ignore
              s12 = s13;
// @ts-ignore
            } else {
// @ts-ignore
              peg$currPos = s12;
// @ts-ignore
              s12 = peg$FAILED;
            }
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s12;
// @ts-ignore
            s12 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s12;
// @ts-ignore
          s12 = peg$FAILED;
        }
// @ts-ignore
        if (s12 === peg$FAILED) {
// @ts-ignore
          s12 = null;
        }
// @ts-ignore
        s13 = peg$parse_();
// @ts-ignore
        s14 = peg$parseRPAREN();
// @ts-ignore
        if (s14 !== peg$FAILED) {
// @ts-ignore
          s15 = peg$parse_();
// @ts-ignore
          s16 = peg$currPos;
// @ts-ignore
          s17 = peg$parseCOLON();
// @ts-ignore
          if (s17 !== peg$FAILED) {
// @ts-ignore
            s18 = peg$parse_();
// @ts-ignore
            s19 = peg$parseType();
// @ts-ignore
            if (s19 !== peg$FAILED) {
// @ts-ignore
              s17 = [s17, s18, s19];
// @ts-ignore
              s16 = s17;
// @ts-ignore
            } else {
// @ts-ignore
              peg$currPos = s16;
// @ts-ignore
              s16 = peg$FAILED;
            }
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s16;
// @ts-ignore
            s16 = peg$FAILED;
          }
// @ts-ignore
          if (s16 === peg$FAILED) {
// @ts-ignore
            s16 = null;
          }
// @ts-ignore
          s17 = peg$parse_();
// @ts-ignore
          s18 = peg$parseBlock();
// @ts-ignore
          if (s18 !== peg$FAILED) {
// @ts-ignore
            peg$savedPos = s0;
// @ts-ignore
            s0 = peg$f76(s2, s4, s6, s10, s12, s16, s18);
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$currPos;
// @ts-ignore
      s1 = peg$parse_();
// @ts-ignore
      s2 = [];
// @ts-ignore
      s3 = peg$parseDecoratorExpression();
// @ts-ignore
      while (s3 !== peg$FAILED) {
// @ts-ignore
        s2.push(s3);
// @ts-ignore
        s3 = peg$parseDecoratorExpression();
      }
// @ts-ignore
      s3 = peg$parse_();
// @ts-ignore
      s4 = peg$parseIDENTIFIER();
// @ts-ignore
      if (s4 !== peg$FAILED) {
// @ts-ignore
        s5 = peg$parse_();
// @ts-ignore
        s6 = peg$parseGenericDeclaration();
// @ts-ignore
        if (s6 === peg$FAILED) {
// @ts-ignore
          s6 = null;
        }
// @ts-ignore
        s7 = peg$parse_();
// @ts-ignore
        s8 = peg$parseLPAREN();
// @ts-ignore
        if (s8 !== peg$FAILED) {
// @ts-ignore
          s9 = peg$parse_();
// @ts-ignore
          s10 = peg$parsePARAMS();
// @ts-ignore
          if (s10 !== peg$FAILED) {
// @ts-ignore
            s11 = peg$parse_();
// @ts-ignore
            s12 = peg$parseParameter();
// @ts-ignore
            if (s12 !== peg$FAILED) {
// @ts-ignore
              s13 = peg$parse_();
// @ts-ignore
              s14 = peg$parseRPAREN();
// @ts-ignore
              if (s14 !== peg$FAILED) {
// @ts-ignore
                s15 = peg$parse_();
// @ts-ignore
                s16 = peg$currPos;
// @ts-ignore
                s17 = peg$parseCOLON();
// @ts-ignore
                if (s17 !== peg$FAILED) {
// @ts-ignore
                  s18 = peg$parse_();
// @ts-ignore
                  s19 = peg$parseType();
// @ts-ignore
                  if (s19 !== peg$FAILED) {
// @ts-ignore
                    s17 = [s17, s18, s19];
// @ts-ignore
                    s16 = s17;
// @ts-ignore
                  } else {
// @ts-ignore
                    peg$currPos = s16;
// @ts-ignore
                    s16 = peg$FAILED;
                  }
// @ts-ignore
                } else {
// @ts-ignore
                  peg$currPos = s16;
// @ts-ignore
                  s16 = peg$FAILED;
                }
// @ts-ignore
                if (s16 === peg$FAILED) {
// @ts-ignore
                  s16 = null;
                }
// @ts-ignore
                s17 = peg$parse_();
// @ts-ignore
                s18 = peg$parseBlock();
// @ts-ignore
                if (s18 !== peg$FAILED) {
// @ts-ignore
                  peg$savedPos = s0;
// @ts-ignore
                  s0 = peg$f77(s2, s4, s6, s12, s16, s18);
// @ts-ignore
                } else {
// @ts-ignore
                  peg$currPos = s0;
// @ts-ignore
                  s0 = peg$FAILED;
                }
// @ts-ignore
              } else {
// @ts-ignore
                peg$currPos = s0;
// @ts-ignore
                s0 = peg$FAILED;
              }
// @ts-ignore
            } else {
// @ts-ignore
              peg$currPos = s0;
// @ts-ignore
              s0 = peg$FAILED;
            }
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseTestDeclaration() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseTEST();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse_();
// @ts-ignore
      s3 = peg$parseSTRING();
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s4 = peg$parse_();
// @ts-ignore
        s5 = peg$parseLPAREN();
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s6 = peg$parse_();
// @ts-ignore
          s7 = peg$parseParameterList();
// @ts-ignore
          if (s7 === peg$FAILED) {
// @ts-ignore
            s7 = null;
          }
// @ts-ignore
          s8 = peg$parse_();
// @ts-ignore
          s9 = peg$currPos;
// @ts-ignore
          s10 = peg$parseCOMMA();
// @ts-ignore
          if (s10 !== peg$FAILED) {
// @ts-ignore
            s11 = peg$parse_();
// @ts-ignore
            s12 = peg$parsePARAMS();
// @ts-ignore
            if (s12 !== peg$FAILED) {
// @ts-ignore
              s13 = peg$parse_();
// @ts-ignore
              s14 = peg$parseParameter();
// @ts-ignore
              if (s14 !== peg$FAILED) {
// @ts-ignore
                s15 = peg$parse_();
// @ts-ignore
                s10 = [s10, s11, s12, s13, s14, s15];
// @ts-ignore
                s9 = s10;
// @ts-ignore
              } else {
// @ts-ignore
                peg$currPos = s9;
// @ts-ignore
                s9 = peg$FAILED;
              }
// @ts-ignore
            } else {
// @ts-ignore
              peg$currPos = s9;
// @ts-ignore
              s9 = peg$FAILED;
            }
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s9;
// @ts-ignore
            s9 = peg$FAILED;
          }
// @ts-ignore
          if (s9 === peg$FAILED) {
// @ts-ignore
            s9 = null;
          }
// @ts-ignore
          s10 = peg$parse_();
// @ts-ignore
          s11 = peg$parseRPAREN();
// @ts-ignore
          if (s11 !== peg$FAILED) {
// @ts-ignore
            s12 = peg$parse_();
// @ts-ignore
            s13 = peg$parseBlock();
// @ts-ignore
            if (s13 !== peg$FAILED) {
// @ts-ignore
              peg$savedPos = s0;
// @ts-ignore
              s0 = peg$f78(s3, s7, s9, s13);
// @ts-ignore
            } else {
// @ts-ignore
              peg$currPos = s0;
// @ts-ignore
              s0 = peg$FAILED;
            }
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseAccessModifier() {
// @ts-ignore
    var s0;

// @ts-ignore
    s0 = peg$parsePUB();
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$parsePRI();
// @ts-ignore
      if (s0 === peg$FAILED) {
// @ts-ignore
        s0 = peg$parsePRO();
      }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseType() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseGenericType();
// @ts-ignore
    if (s1 === peg$FAILED) {
// @ts-ignore
      s1 = peg$parseTupleType();
// @ts-ignore
      if (s1 === peg$FAILED) {
// @ts-ignore
        s1 = peg$parseIDENTIFIER();
      }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse_();
// @ts-ignore
      s3 = [];
// @ts-ignore
      s4 = peg$currPos;
// @ts-ignore
      s5 = peg$parseLBRACKET();
// @ts-ignore
      if (s5 !== peg$FAILED) {
// @ts-ignore
        s6 = peg$parseRBRACKET();
// @ts-ignore
        if (s6 !== peg$FAILED) {
// @ts-ignore
          s5 = [s5, s6];
// @ts-ignore
          s4 = s5;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s4;
// @ts-ignore
          s4 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s4;
// @ts-ignore
        s4 = peg$FAILED;
      }
// @ts-ignore
      while (s4 !== peg$FAILED) {
// @ts-ignore
        s3.push(s4);
// @ts-ignore
        s4 = peg$currPos;
// @ts-ignore
        s5 = peg$parseLBRACKET();
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s6 = peg$parseRBRACKET();
// @ts-ignore
          if (s6 !== peg$FAILED) {
// @ts-ignore
            s5 = [s5, s6];
// @ts-ignore
            s4 = s5;
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s4;
// @ts-ignore
            s4 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s4;
// @ts-ignore
          s4 = peg$FAILED;
        }
      }
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s0 = peg$f79(s1, s3);
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseGenericType() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseIDENTIFIER();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse_();
// @ts-ignore
      s3 = peg$parseLESS_THAN();
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s4 = peg$parse_();
// @ts-ignore
        s5 = peg$parseTypeList();
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s6 = peg$parse_();
// @ts-ignore
          s7 = peg$parseGREATER_THAN();
// @ts-ignore
          if (s7 !== peg$FAILED) {
// @ts-ignore
            s8 = peg$parse_();
// @ts-ignore
            peg$savedPos = s0;
// @ts-ignore
            s0 = peg$f80(s1, s5);
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseTupleType() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseLBRACKET();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse_();
// @ts-ignore
      s3 = peg$parseTypeList();
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s4 = peg$parse_();
// @ts-ignore
        s5 = peg$parseRBRACKET();
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s6 = peg$parse_();
// @ts-ignore
          peg$savedPos = s0;
// @ts-ignore
          s0 = peg$f81(s3);
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseParameter() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseIDENTIFIER();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse_();
// @ts-ignore
      s3 = peg$currPos;
// @ts-ignore
      s4 = peg$parseCOLON();
// @ts-ignore
      if (s4 !== peg$FAILED) {
// @ts-ignore
        s5 = peg$parse_();
// @ts-ignore
        s6 = peg$parseType();
// @ts-ignore
        if (s6 !== peg$FAILED) {
// @ts-ignore
          s4 = [s4, s5, s6];
// @ts-ignore
          s3 = s4;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s3;
// @ts-ignore
        s3 = peg$FAILED;
      }
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s3 = null;
      }
// @ts-ignore
      s4 = peg$parse_();
// @ts-ignore
      s5 = peg$currPos;
// @ts-ignore
      s6 = peg$parseEQUALS();
// @ts-ignore
      if (s6 !== peg$FAILED) {
// @ts-ignore
        s7 = peg$parse_();
// @ts-ignore
        s8 = peg$parseExpression();
// @ts-ignore
        if (s8 !== peg$FAILED) {
// @ts-ignore
          s6 = [s6, s7, s8];
// @ts-ignore
          s5 = s6;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s5;
// @ts-ignore
          s5 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s5;
// @ts-ignore
        s5 = peg$FAILED;
      }
// @ts-ignore
      if (s5 === peg$FAILED) {
// @ts-ignore
        s5 = null;
      }
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s0 = peg$f82(s1, s3, s5);
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseParameterList() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseParameter();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse_();
// @ts-ignore
      s3 = [];
// @ts-ignore
      s4 = peg$currPos;
// @ts-ignore
      s5 = peg$parseCOMMA();
// @ts-ignore
      if (s5 !== peg$FAILED) {
// @ts-ignore
        s6 = peg$parse_();
// @ts-ignore
        s7 = peg$parseParameter();
// @ts-ignore
        if (s7 !== peg$FAILED) {
// @ts-ignore
          s8 = peg$parse_();
// @ts-ignore
          s5 = [s5, s6, s7, s8];
// @ts-ignore
          s4 = s5;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s4;
// @ts-ignore
          s4 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s4;
// @ts-ignore
        s4 = peg$FAILED;
      }
// @ts-ignore
      while (s4 !== peg$FAILED) {
// @ts-ignore
        s3.push(s4);
// @ts-ignore
        s4 = peg$currPos;
// @ts-ignore
        s5 = peg$parseCOMMA();
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s6 = peg$parse_();
// @ts-ignore
          s7 = peg$parseParameter();
// @ts-ignore
          if (s7 !== peg$FAILED) {
// @ts-ignore
            s8 = peg$parse_();
// @ts-ignore
            s5 = [s5, s6, s7, s8];
// @ts-ignore
            s4 = s5;
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s4;
// @ts-ignore
            s4 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s4;
// @ts-ignore
          s4 = peg$FAILED;
        }
      }
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s0 = peg$f83(s1, s3);
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseArgumentList() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseExpression();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse_();
// @ts-ignore
      s3 = [];
// @ts-ignore
      s4 = peg$currPos;
// @ts-ignore
      s5 = peg$parseCOMMA();
// @ts-ignore
      if (s5 !== peg$FAILED) {
// @ts-ignore
        s6 = peg$parse_();
// @ts-ignore
        s7 = peg$parseExpression();
// @ts-ignore
        if (s7 !== peg$FAILED) {
// @ts-ignore
          s8 = peg$parse_();
// @ts-ignore
          s5 = [s5, s6, s7, s8];
// @ts-ignore
          s4 = s5;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s4;
// @ts-ignore
          s4 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s4;
// @ts-ignore
        s4 = peg$FAILED;
      }
// @ts-ignore
      while (s4 !== peg$FAILED) {
// @ts-ignore
        s3.push(s4);
// @ts-ignore
        s4 = peg$currPos;
// @ts-ignore
        s5 = peg$parseCOMMA();
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s6 = peg$parse_();
// @ts-ignore
          s7 = peg$parseExpression();
// @ts-ignore
          if (s7 !== peg$FAILED) {
// @ts-ignore
            s8 = peg$parse_();
// @ts-ignore
            s5 = [s5, s6, s7, s8];
// @ts-ignore
            s4 = s5;
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s4;
// @ts-ignore
            s4 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s4;
// @ts-ignore
          s4 = peg$FAILED;
        }
      }
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s0 = peg$f84(s1, s3);
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseTypeList() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseType();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse_();
// @ts-ignore
      s3 = [];
// @ts-ignore
      s4 = peg$currPos;
// @ts-ignore
      s5 = peg$parseCOMMA();
// @ts-ignore
      if (s5 !== peg$FAILED) {
// @ts-ignore
        s6 = peg$parse_();
// @ts-ignore
        s7 = peg$parseType();
// @ts-ignore
        if (s7 !== peg$FAILED) {
// @ts-ignore
          s8 = peg$parse_();
// @ts-ignore
          s5 = [s5, s6, s7, s8];
// @ts-ignore
          s4 = s5;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s4;
// @ts-ignore
          s4 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s4;
// @ts-ignore
        s4 = peg$FAILED;
      }
// @ts-ignore
      while (s4 !== peg$FAILED) {
// @ts-ignore
        s3.push(s4);
// @ts-ignore
        s4 = peg$currPos;
// @ts-ignore
        s5 = peg$parseCOMMA();
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s6 = peg$parse_();
// @ts-ignore
          s7 = peg$parseType();
// @ts-ignore
          if (s7 !== peg$FAILED) {
// @ts-ignore
            s8 = peg$parse_();
// @ts-ignore
            s5 = [s5, s6, s7, s8];
// @ts-ignore
            s4 = s5;
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s4;
// @ts-ignore
            s4 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s4;
// @ts-ignore
          s4 = peg$FAILED;
        }
      }
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s0 = peg$f85(s1, s3);
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseMetaIdentifier() {
// @ts-ignore
    var s0, s1, s2, s3, s4;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseAT();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse_();
// @ts-ignore
      s3 = peg$parseIDENTIFIER();
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s4 = peg$parse_();
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f86(s3);
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseDecoratorExpression() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseSHARP();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse_();
// @ts-ignore
      s3 = peg$parseExpression();
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s4 = peg$parse_();
// @ts-ignore
        s5 = peg$parseSHARP();
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s6 = peg$parse_();
// @ts-ignore
          peg$savedPos = s0;
// @ts-ignore
          s0 = peg$f87(s3);
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseDestructuringPattern() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseLBRACE();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse_();
// @ts-ignore
      s3 = peg$parseIdentifierList();
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s4 = peg$parse_();
// @ts-ignore
        s5 = peg$parseRBRACE();
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s6 = peg$parse_();
// @ts-ignore
          peg$savedPos = s0;
// @ts-ignore
          s0 = peg$f88(s3);
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseDestructuringArrayPattern() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseLBRACKET();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse_();
// @ts-ignore
      s3 = peg$parseIdentifierList();
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s4 = peg$parse_();
// @ts-ignore
        s5 = peg$parseRBRACKET();
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s6 = peg$parse_();
// @ts-ignore
          peg$savedPos = s0;
// @ts-ignore
          s0 = peg$f89(s3);
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseIdentifierList() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseIDENTIFIER();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse_();
// @ts-ignore
      s3 = [];
// @ts-ignore
      s4 = peg$currPos;
// @ts-ignore
      s5 = peg$parseCOMMA();
// @ts-ignore
      if (s5 !== peg$FAILED) {
// @ts-ignore
        s6 = peg$parse_();
// @ts-ignore
        s7 = peg$parseIDENTIFIER();
// @ts-ignore
        if (s7 !== peg$FAILED) {
// @ts-ignore
          s8 = peg$parse_();
// @ts-ignore
          s5 = [s5, s6, s7, s8];
// @ts-ignore
          s4 = s5;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s4;
// @ts-ignore
          s4 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s4;
// @ts-ignore
        s4 = peg$FAILED;
      }
// @ts-ignore
      while (s4 !== peg$FAILED) {
// @ts-ignore
        s3.push(s4);
// @ts-ignore
        s4 = peg$currPos;
// @ts-ignore
        s5 = peg$parseCOMMA();
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s6 = peg$parse_();
// @ts-ignore
          s7 = peg$parseIDENTIFIER();
// @ts-ignore
          if (s7 !== peg$FAILED) {
// @ts-ignore
            s8 = peg$parse_();
// @ts-ignore
            s5 = [s5, s6, s7, s8];
// @ts-ignore
            s4 = s5;
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s4;
// @ts-ignore
            s4 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s4;
// @ts-ignore
          s4 = peg$FAILED;
        }
      }
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s0 = peg$f90(s1, s3);
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseIDENTIFIER() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (peg$r0.test(input.charAt(peg$currPos))) {
// @ts-ignore
      s1 = input.charAt(peg$currPos);
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e0); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = [];
// @ts-ignore
      if (peg$r1.test(input.charAt(peg$currPos))) {
// @ts-ignore
        s3 = input.charAt(peg$currPos);
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s3 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e1); }
      }
// @ts-ignore
      while (s3 !== peg$FAILED) {
// @ts-ignore
        s2.push(s3);
// @ts-ignore
        if (peg$r1.test(input.charAt(peg$currPos))) {
// @ts-ignore
          s3 = input.charAt(peg$currPos);
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s3 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e1); }
        }
      }
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s0 = peg$f91();
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseMODULE() {
// @ts-ignore
    var s0;

// @ts-ignore
    if (input.substr(peg$currPos, 6) === peg$c0) {
// @ts-ignore
      s0 = peg$c0;
// @ts-ignore
      peg$currPos += 6;
// @ts-ignore
    } else {
// @ts-ignore
      s0 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e2); }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseSTRUCT() {
// @ts-ignore
    var s0;

// @ts-ignore
    if (input.substr(peg$currPos, 6) === peg$c1) {
// @ts-ignore
      s0 = peg$c1;
// @ts-ignore
      peg$currPos += 6;
// @ts-ignore
    } else {
// @ts-ignore
      s0 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e3); }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseCLASS() {
// @ts-ignore
    var s0;

// @ts-ignore
    if (input.substr(peg$currPos, 5) === peg$c2) {
// @ts-ignore
      s0 = peg$c2;
// @ts-ignore
      peg$currPos += 5;
// @ts-ignore
    } else {
// @ts-ignore
      s0 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e4); }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseINTERFACE() {
// @ts-ignore
    var s0;

// @ts-ignore
    if (input.substr(peg$currPos, 9) === peg$c3) {
// @ts-ignore
      s0 = peg$c3;
// @ts-ignore
      peg$currPos += 9;
// @ts-ignore
    } else {
// @ts-ignore
      s0 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e5); }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseENUM() {
// @ts-ignore
    var s0;

// @ts-ignore
    if (input.substr(peg$currPos, 4) === peg$c4) {
// @ts-ignore
      s0 = peg$c4;
// @ts-ignore
      peg$currPos += 4;
// @ts-ignore
    } else {
// @ts-ignore
      s0 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e6); }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseTEST() {
// @ts-ignore
    var s0;

// @ts-ignore
    if (input.substr(peg$currPos, 4) === peg$c5) {
// @ts-ignore
      s0 = peg$c5;
// @ts-ignore
      peg$currPos += 4;
// @ts-ignore
    } else {
// @ts-ignore
      s0 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e7); }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseVAR() {
// @ts-ignore
    var s0;

// @ts-ignore
    if (input.substr(peg$currPos, 3) === peg$c6) {
// @ts-ignore
      s0 = peg$c6;
// @ts-ignore
      peg$currPos += 3;
// @ts-ignore
    } else {
// @ts-ignore
      s0 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e8); }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsePUB() {
// @ts-ignore
    var s0;

// @ts-ignore
    if (input.substr(peg$currPos, 3) === peg$c7) {
// @ts-ignore
      s0 = peg$c7;
// @ts-ignore
      peg$currPos += 3;
// @ts-ignore
    } else {
// @ts-ignore
      s0 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e9); }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsePRI() {
// @ts-ignore
    var s0;

// @ts-ignore
    if (input.substr(peg$currPos, 3) === peg$c8) {
// @ts-ignore
      s0 = peg$c8;
// @ts-ignore
      peg$currPos += 3;
// @ts-ignore
    } else {
// @ts-ignore
      s0 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e10); }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsePRO() {
// @ts-ignore
    var s0;

// @ts-ignore
    if (input.substr(peg$currPos, 3) === peg$c9) {
// @ts-ignore
      s0 = peg$c9;
// @ts-ignore
      peg$currPos += 3;
// @ts-ignore
    } else {
// @ts-ignore
      s0 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e11); }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseIF() {
// @ts-ignore
    var s0;

// @ts-ignore
    if (input.substr(peg$currPos, 2) === peg$c10) {
// @ts-ignore
      s0 = peg$c10;
// @ts-ignore
      peg$currPos += 2;
// @ts-ignore
    } else {
// @ts-ignore
      s0 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e12); }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseELSE() {
// @ts-ignore
    var s0;

// @ts-ignore
    if (input.substr(peg$currPos, 4) === peg$c11) {
// @ts-ignore
      s0 = peg$c11;
// @ts-ignore
      peg$currPos += 4;
// @ts-ignore
    } else {
// @ts-ignore
      s0 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e13); }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseSWITCH() {
// @ts-ignore
    var s0;

// @ts-ignore
    if (input.substr(peg$currPos, 6) === peg$c12) {
// @ts-ignore
      s0 = peg$c12;
// @ts-ignore
      peg$currPos += 6;
// @ts-ignore
    } else {
// @ts-ignore
      s0 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e14); }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseWHILE() {
// @ts-ignore
    var s0;

// @ts-ignore
    if (input.substr(peg$currPos, 5) === peg$c13) {
// @ts-ignore
      s0 = peg$c13;
// @ts-ignore
      peg$currPos += 5;
// @ts-ignore
    } else {
// @ts-ignore
      s0 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e15); }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseFOR() {
// @ts-ignore
    var s0;

// @ts-ignore
    if (input.substr(peg$currPos, 3) === peg$c14) {
// @ts-ignore
      s0 = peg$c14;
// @ts-ignore
      peg$currPos += 3;
// @ts-ignore
    } else {
// @ts-ignore
      s0 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e16); }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseBREAK() {
// @ts-ignore
    var s0;

// @ts-ignore
    if (input.substr(peg$currPos, 5) === peg$c15) {
// @ts-ignore
      s0 = peg$c15;
// @ts-ignore
      peg$currPos += 5;
// @ts-ignore
    } else {
// @ts-ignore
      s0 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e17); }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseCONTINUE() {
// @ts-ignore
    var s0;

// @ts-ignore
    if (input.substr(peg$currPos, 8) === peg$c16) {
// @ts-ignore
      s0 = peg$c16;
// @ts-ignore
      peg$currPos += 8;
// @ts-ignore
    } else {
// @ts-ignore
      s0 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e18); }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseRETURN() {
// @ts-ignore
    var s0;

// @ts-ignore
    if (input.substr(peg$currPos, 6) === peg$c17) {
// @ts-ignore
      s0 = peg$c17;
// @ts-ignore
      peg$currPos += 6;
// @ts-ignore
    } else {
// @ts-ignore
      s0 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e19); }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseSUPER() {
// @ts-ignore
    var s0;

// @ts-ignore
    if (input.substr(peg$currPos, 5) === peg$c18) {
// @ts-ignore
      s0 = peg$c18;
// @ts-ignore
      peg$currPos += 5;
// @ts-ignore
    } else {
// @ts-ignore
      s0 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e20); }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseNEW() {
// @ts-ignore
    var s0;

// @ts-ignore
    if (input.substr(peg$currPos, 3) === peg$c19) {
// @ts-ignore
      s0 = peg$c19;
// @ts-ignore
      peg$currPos += 3;
// @ts-ignore
    } else {
// @ts-ignore
      s0 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e21); }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseSET() {
// @ts-ignore
    var s0;

// @ts-ignore
    if (input.substr(peg$currPos, 3) === peg$c20) {
// @ts-ignore
      s0 = peg$c20;
// @ts-ignore
      peg$currPos += 3;
// @ts-ignore
    } else {
// @ts-ignore
      s0 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e22); }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseGET() {
// @ts-ignore
    var s0;

// @ts-ignore
    if (input.substr(peg$currPos, 3) === peg$c21) {
// @ts-ignore
      s0 = peg$c21;
// @ts-ignore
      peg$currPos += 3;
// @ts-ignore
    } else {
// @ts-ignore
      s0 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e23); }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseSTATIC() {
// @ts-ignore
    var s0;

// @ts-ignore
    if (input.substr(peg$currPos, 6) === peg$c22) {
// @ts-ignore
      s0 = peg$c22;
// @ts-ignore
      peg$currPos += 6;
// @ts-ignore
    } else {
// @ts-ignore
      s0 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e24); }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseIN() {
// @ts-ignore
    var s0;

// @ts-ignore
    if (input.substr(peg$currPos, 2) === peg$c23) {
// @ts-ignore
      s0 = peg$c23;
// @ts-ignore
      peg$currPos += 2;
// @ts-ignore
    } else {
// @ts-ignore
      s0 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e25); }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseOUT() {
// @ts-ignore
    var s0;

// @ts-ignore
    if (input.substr(peg$currPos, 3) === peg$c24) {
// @ts-ignore
      s0 = peg$c24;
// @ts-ignore
      peg$currPos += 3;
// @ts-ignore
    } else {
// @ts-ignore
      s0 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e26); }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseTHROW() {
// @ts-ignore
    var s0;

// @ts-ignore
    if (input.substr(peg$currPos, 5) === peg$c25) {
// @ts-ignore
      s0 = peg$c25;
// @ts-ignore
      peg$currPos += 5;
// @ts-ignore
    } else {
// @ts-ignore
      s0 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e27); }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsePARAMS() {
// @ts-ignore
    var s0;

// @ts-ignore
    if (input.substr(peg$currPos, 3) === peg$c26) {
// @ts-ignore
      s0 = peg$c26;
// @ts-ignore
      peg$currPos += 3;
// @ts-ignore
    } else {
// @ts-ignore
      s0 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e28); }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseQUESTIONMARK() {
// @ts-ignore
    var s0;

// @ts-ignore
    if (input.charCodeAt(peg$currPos) === 63) {
// @ts-ignore
      s0 = peg$c27;
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s0 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e29); }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseCOLON() {
// @ts-ignore
    var s0;

// @ts-ignore
    if (input.charCodeAt(peg$currPos) === 58) {
// @ts-ignore
      s0 = peg$c28;
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s0 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e30); }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseSEMICOLON() {
// @ts-ignore
    var s0;

// @ts-ignore
    if (input.charCodeAt(peg$currPos) === 59) {
// @ts-ignore
      s0 = peg$c29;
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s0 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e31); }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseCOMMA() {
// @ts-ignore
    var s0;

// @ts-ignore
    if (input.charCodeAt(peg$currPos) === 44) {
// @ts-ignore
      s0 = peg$c30;
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s0 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e32); }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseDOT() {
// @ts-ignore
    var s0;

// @ts-ignore
    if (input.charCodeAt(peg$currPos) === 46) {
// @ts-ignore
      s0 = peg$c31;
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s0 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e33); }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseTILDE() {
// @ts-ignore
    var s0;

// @ts-ignore
    if (input.charCodeAt(peg$currPos) === 126) {
// @ts-ignore
      s0 = peg$c32;
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s0 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e34); }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseAT() {
// @ts-ignore
    var s0;

// @ts-ignore
    if (input.charCodeAt(peg$currPos) === 64) {
// @ts-ignore
      s0 = peg$c33;
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s0 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e35); }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseSHARP() {
// @ts-ignore
    var s0;

// @ts-ignore
    if (input.charCodeAt(peg$currPos) === 35) {
// @ts-ignore
      s0 = peg$c34;
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s0 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e36); }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseDOLLAR() {
// @ts-ignore
    var s0;

// @ts-ignore
    if (input.charCodeAt(peg$currPos) === 36) {
// @ts-ignore
      s0 = peg$c35;
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s0 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e37); }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseLPAREN() {
// @ts-ignore
    var s0;

// @ts-ignore
    if (input.charCodeAt(peg$currPos) === 40) {
// @ts-ignore
      s0 = peg$c36;
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s0 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e38); }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseRPAREN() {
// @ts-ignore
    var s0;

// @ts-ignore
    if (input.charCodeAt(peg$currPos) === 41) {
// @ts-ignore
      s0 = peg$c37;
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s0 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e39); }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseLBRACE() {
// @ts-ignore
    var s0;

// @ts-ignore
    if (input.charCodeAt(peg$currPos) === 123) {
// @ts-ignore
      s0 = peg$c38;
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s0 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e40); }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseRBRACE() {
// @ts-ignore
    var s0;

// @ts-ignore
    if (input.charCodeAt(peg$currPos) === 125) {
// @ts-ignore
      s0 = peg$c39;
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s0 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e41); }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseLBRACKET() {
// @ts-ignore
    var s0;

// @ts-ignore
    if (input.charCodeAt(peg$currPos) === 91) {
// @ts-ignore
      s0 = peg$c40;
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s0 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e42); }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseRBRACKET() {
// @ts-ignore
    var s0;

// @ts-ignore
    if (input.charCodeAt(peg$currPos) === 93) {
// @ts-ignore
      s0 = peg$c41;
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s0 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e43); }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseEQUALS() {
// @ts-ignore
    var s0;

// @ts-ignore
    if (input.charCodeAt(peg$currPos) === 61) {
// @ts-ignore
      s0 = peg$c42;
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s0 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e44); }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsePLUS_EQUALS() {
// @ts-ignore
    var s0;

// @ts-ignore
    if (input.substr(peg$currPos, 2) === peg$c43) {
// @ts-ignore
      s0 = peg$c43;
// @ts-ignore
      peg$currPos += 2;
// @ts-ignore
    } else {
// @ts-ignore
      s0 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e45); }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseMINUS_EQUALS() {
// @ts-ignore
    var s0;

// @ts-ignore
    if (input.substr(peg$currPos, 2) === peg$c44) {
// @ts-ignore
      s0 = peg$c44;
// @ts-ignore
      peg$currPos += 2;
// @ts-ignore
    } else {
// @ts-ignore
      s0 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e46); }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseSTAR_EQUALS() {
// @ts-ignore
    var s0;

// @ts-ignore
    if (input.substr(peg$currPos, 2) === peg$c45) {
// @ts-ignore
      s0 = peg$c45;
// @ts-ignore
      peg$currPos += 2;
// @ts-ignore
    } else {
// @ts-ignore
      s0 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e47); }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseSLASH_EQUALS() {
// @ts-ignore
    var s0;

// @ts-ignore
    if (input.substr(peg$currPos, 2) === peg$c46) {
// @ts-ignore
      s0 = peg$c46;
// @ts-ignore
      peg$currPos += 2;
// @ts-ignore
    } else {
// @ts-ignore
      s0 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e48); }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsePERCENT_EQUALS() {
// @ts-ignore
    var s0;

// @ts-ignore
    if (input.substr(peg$currPos, 2) === peg$c47) {
// @ts-ignore
      s0 = peg$c47;
// @ts-ignore
      peg$currPos += 2;
// @ts-ignore
    } else {
// @ts-ignore
      s0 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e49); }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseDOUBLE_EQUALS() {
// @ts-ignore
    var s0;

// @ts-ignore
    if (input.substr(peg$currPos, 2) === peg$c48) {
// @ts-ignore
      s0 = peg$c48;
// @ts-ignore
      peg$currPos += 2;
// @ts-ignore
    } else {
// @ts-ignore
      s0 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e50); }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseBANG_EQUALS() {
// @ts-ignore
    var s0;

// @ts-ignore
    if (input.substr(peg$currPos, 2) === peg$c49) {
// @ts-ignore
      s0 = peg$c49;
// @ts-ignore
      peg$currPos += 2;
// @ts-ignore
    } else {
// @ts-ignore
      s0 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e51); }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseBANG() {
// @ts-ignore
    var s0;

// @ts-ignore
    if (input.charCodeAt(peg$currPos) === 33) {
// @ts-ignore
      s0 = peg$c50;
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s0 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e52); }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseLESS_THAN() {
// @ts-ignore
    var s0;

// @ts-ignore
    if (input.charCodeAt(peg$currPos) === 60) {
// @ts-ignore
      s0 = peg$c51;
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s0 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e53); }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseLESS_THAN_EQUALS() {
// @ts-ignore
    var s0;

// @ts-ignore
    if (input.substr(peg$currPos, 2) === peg$c52) {
// @ts-ignore
      s0 = peg$c52;
// @ts-ignore
      peg$currPos += 2;
// @ts-ignore
    } else {
// @ts-ignore
      s0 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e54); }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseGREATER_THAN() {
// @ts-ignore
    var s0;

// @ts-ignore
    if (input.charCodeAt(peg$currPos) === 62) {
// @ts-ignore
      s0 = peg$c53;
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s0 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e55); }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseGREATER_THAN_EQUALS() {
// @ts-ignore
    var s0;

// @ts-ignore
    if (input.substr(peg$currPos, 2) === peg$c54) {
// @ts-ignore
      s0 = peg$c54;
// @ts-ignore
      peg$currPos += 2;
// @ts-ignore
    } else {
// @ts-ignore
      s0 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e56); }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsePLUS() {
// @ts-ignore
    var s0;

// @ts-ignore
    if (input.charCodeAt(peg$currPos) === 43) {
// @ts-ignore
      s0 = peg$c55;
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s0 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e57); }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseMINUS() {
// @ts-ignore
    var s0;

// @ts-ignore
    if (input.charCodeAt(peg$currPos) === 45) {
// @ts-ignore
      s0 = peg$c56;
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s0 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e58); }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseSTAR() {
// @ts-ignore
    var s0;

// @ts-ignore
    if (input.charCodeAt(peg$currPos) === 42) {
// @ts-ignore
      s0 = peg$c57;
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s0 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e59); }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseSLASH() {
// @ts-ignore
    var s0;

// @ts-ignore
    if (input.charCodeAt(peg$currPos) === 47) {
// @ts-ignore
      s0 = peg$c58;
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s0 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e60); }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsePERCENT() {
// @ts-ignore
    var s0;

// @ts-ignore
    if (input.charCodeAt(peg$currPos) === 37) {
// @ts-ignore
      s0 = peg$c59;
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s0 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e61); }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseAMPERSAND_AMPERSAND() {
// @ts-ignore
    var s0;

// @ts-ignore
    if (input.substr(peg$currPos, 2) === peg$c60) {
// @ts-ignore
      s0 = peg$c60;
// @ts-ignore
      peg$currPos += 2;
// @ts-ignore
    } else {
// @ts-ignore
      s0 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e62); }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsePIPE_PIPE() {
// @ts-ignore
    var s0;

// @ts-ignore
    if (input.substr(peg$currPos, 2) === peg$c61) {
// @ts-ignore
      s0 = peg$c61;
// @ts-ignore
      peg$currPos += 2;
// @ts-ignore
    } else {
// @ts-ignore
      s0 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e63); }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseRIGHT_ARROW() {
// @ts-ignore
    var s0;

// @ts-ignore
    if (input.substr(peg$currPos, 2) === peg$c62) {
// @ts-ignore
      s0 = peg$c62;
// @ts-ignore
      peg$currPos += 2;
// @ts-ignore
    } else {
// @ts-ignore
      s0 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e64); }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseLiteral() {
// @ts-ignore
    var s0;

// @ts-ignore
    s0 = peg$parseBOOLEAN();
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$parseFLOAT();
// @ts-ignore
      if (s0 === peg$FAILED) {
// @ts-ignore
        s0 = peg$parseHEXADECIMAL();
// @ts-ignore
        if (s0 === peg$FAILED) {
// @ts-ignore
          s0 = peg$parseOCTAL();
// @ts-ignore
          if (s0 === peg$FAILED) {
// @ts-ignore
            s0 = peg$parseDECIMAL();
// @ts-ignore
            if (s0 === peg$FAILED) {
// @ts-ignore
              s0 = peg$parseSTRING();
// @ts-ignore
              if (s0 === peg$FAILED) {
// @ts-ignore
                s0 = peg$parseCHAR();
// @ts-ignore
                if (s0 === peg$FAILED) {
// @ts-ignore
                  s0 = peg$parseVALUENULL();
                }
              }
            }
          }
        }
      }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseBOOLEAN() {
// @ts-ignore
    var s0, s1;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 4) === peg$c63) {
// @ts-ignore
      s1 = peg$c63;
// @ts-ignore
      peg$currPos += 4;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e65); }
    }
// @ts-ignore
    if (s1 === peg$FAILED) {
// @ts-ignore
      if (input.substr(peg$currPos, 5) === peg$c64) {
// @ts-ignore
        s1 = peg$c64;
// @ts-ignore
        peg$currPos += 5;
// @ts-ignore
      } else {
// @ts-ignore
        s1 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e66); }
      }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s1 = peg$f92();
    }
// @ts-ignore
    s0 = s1;

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseDECIMAL() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (peg$r2.test(input.charAt(peg$currPos))) {
// @ts-ignore
      s1 = input.charAt(peg$currPos);
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e67); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = [];
// @ts-ignore
      if (peg$r3.test(input.charAt(peg$currPos))) {
// @ts-ignore
        s3 = input.charAt(peg$currPos);
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s3 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e68); }
      }
// @ts-ignore
      while (s3 !== peg$FAILED) {
// @ts-ignore
        s2.push(s3);
// @ts-ignore
        if (peg$r3.test(input.charAt(peg$currPos))) {
// @ts-ignore
          s3 = input.charAt(peg$currPos);
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s3 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e68); }
        }
      }
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s0 = peg$f93();
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseHEXADECIMAL() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 2) === peg$c65) {
// @ts-ignore
      s1 = peg$c65;
// @ts-ignore
      peg$currPos += 2;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e69); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = [];
// @ts-ignore
      if (peg$r4.test(input.charAt(peg$currPos))) {
// @ts-ignore
        s3 = input.charAt(peg$currPos);
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s3 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e70); }
      }
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        while (s3 !== peg$FAILED) {
// @ts-ignore
          s2.push(s3);
// @ts-ignore
          if (peg$r4.test(input.charAt(peg$currPos))) {
// @ts-ignore
            s3 = input.charAt(peg$currPos);
// @ts-ignore
            peg$currPos++;
// @ts-ignore
          } else {
// @ts-ignore
            s3 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e70); }
          }
        }
// @ts-ignore
      } else {
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f94();
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseOCTAL() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.charCodeAt(peg$currPos) === 48) {
// @ts-ignore
      s1 = peg$c66;
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e71); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = [];
// @ts-ignore
      if (peg$r5.test(input.charAt(peg$currPos))) {
// @ts-ignore
        s3 = input.charAt(peg$currPos);
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s3 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e72); }
      }
// @ts-ignore
      while (s3 !== peg$FAILED) {
// @ts-ignore
        s2.push(s3);
// @ts-ignore
        if (peg$r5.test(input.charAt(peg$currPos))) {
// @ts-ignore
          s3 = input.charAt(peg$currPos);
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s3 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e72); }
        }
      }
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s0 = peg$f95();
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseCHAR() {
// @ts-ignore
    var s0, s1, s2, s3, s4;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.charCodeAt(peg$currPos) === 39) {
// @ts-ignore
      s1 = peg$c67;
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e73); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      s3 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      if (peg$r6.test(input.charAt(peg$currPos))) {
// @ts-ignore
        s4 = input.charAt(peg$currPos);
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s4 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e74); }
      }
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s4 === peg$FAILED) {
// @ts-ignore
        s3 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s3;
// @ts-ignore
        s3 = peg$FAILED;
      }
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        if (input.length > peg$currPos) {
// @ts-ignore
          s4 = input.charAt(peg$currPos);
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s4 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e75); }
        }
// @ts-ignore
        if (s4 !== peg$FAILED) {
// @ts-ignore
          s3 = [s3, s4];
// @ts-ignore
          s2 = s3;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s2;
// @ts-ignore
          s2 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        if (input.charCodeAt(peg$currPos) === 39) {
// @ts-ignore
          s3 = peg$c67;
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s3 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e73); }
        }
// @ts-ignore
        if (s3 !== peg$FAILED) {
// @ts-ignore
          peg$savedPos = s0;
// @ts-ignore
          s0 = peg$f96(s2);
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseSTRING() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.charCodeAt(peg$currPos) === 34) {
// @ts-ignore
      s1 = peg$c68;
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e76); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = [];
// @ts-ignore
      s3 = peg$currPos;
// @ts-ignore
      s4 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      if (peg$r6.test(input.charAt(peg$currPos))) {
// @ts-ignore
        s5 = input.charAt(peg$currPos);
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s5 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e74); }
      }
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s5 === peg$FAILED) {
// @ts-ignore
        s4 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s4;
// @ts-ignore
        s4 = peg$FAILED;
      }
// @ts-ignore
      if (s4 !== peg$FAILED) {
// @ts-ignore
        if (input.length > peg$currPos) {
// @ts-ignore
          s5 = input.charAt(peg$currPos);
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s5 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e75); }
        }
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s4 = [s4, s5];
// @ts-ignore
          s3 = s4;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s3;
// @ts-ignore
        s3 = peg$FAILED;
      }
// @ts-ignore
      while (s3 !== peg$FAILED) {
// @ts-ignore
        s2.push(s3);
// @ts-ignore
        s3 = peg$currPos;
// @ts-ignore
        s4 = peg$currPos;
// @ts-ignore
        peg$silentFails++;
// @ts-ignore
        if (peg$r6.test(input.charAt(peg$currPos))) {
// @ts-ignore
          s5 = input.charAt(peg$currPos);
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s5 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e74); }
        }
// @ts-ignore
        peg$silentFails--;
// @ts-ignore
        if (s5 === peg$FAILED) {
// @ts-ignore
          s4 = undefined;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s4;
// @ts-ignore
          s4 = peg$FAILED;
        }
// @ts-ignore
        if (s4 !== peg$FAILED) {
// @ts-ignore
          if (input.length > peg$currPos) {
// @ts-ignore
            s5 = input.charAt(peg$currPos);
// @ts-ignore
            peg$currPos++;
// @ts-ignore
          } else {
// @ts-ignore
            s5 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e75); }
          }
// @ts-ignore
          if (s5 !== peg$FAILED) {
// @ts-ignore
            s4 = [s4, s5];
// @ts-ignore
            s3 = s4;
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s3;
// @ts-ignore
            s3 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
      }
// @ts-ignore
      if (input.charCodeAt(peg$currPos) === 34) {
// @ts-ignore
        s3 = peg$c68;
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s3 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e76); }
      }
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f97(s2);
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseVALUENULL() {
// @ts-ignore
    var s0, s1;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 4) === peg$c69) {
// @ts-ignore
      s1 = peg$c69;
// @ts-ignore
      peg$currPos += 4;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e77); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s1 = peg$f98();
    }
// @ts-ignore
    s0 = s1;

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseFLOAT() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$currPos;
// @ts-ignore
    s2 = [];
// @ts-ignore
    if (peg$r3.test(input.charAt(peg$currPos))) {
// @ts-ignore
      s3 = input.charAt(peg$currPos);
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s3 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e68); }
    }
// @ts-ignore
    if (s3 !== peg$FAILED) {
// @ts-ignore
      while (s3 !== peg$FAILED) {
// @ts-ignore
        s2.push(s3);
// @ts-ignore
        if (peg$r3.test(input.charAt(peg$currPos))) {
// @ts-ignore
          s3 = input.charAt(peg$currPos);
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s3 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e68); }
        }
      }
// @ts-ignore
    } else {
// @ts-ignore
      s2 = peg$FAILED;
    }
// @ts-ignore
    if (s2 !== peg$FAILED) {
// @ts-ignore
      if (input.charCodeAt(peg$currPos) === 46) {
// @ts-ignore
        s3 = peg$c31;
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s3 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e33); }
      }
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s4 = [];
// @ts-ignore
        if (peg$r3.test(input.charAt(peg$currPos))) {
// @ts-ignore
          s5 = input.charAt(peg$currPos);
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s5 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e68); }
        }
// @ts-ignore
        while (s5 !== peg$FAILED) {
// @ts-ignore
          s4.push(s5);
// @ts-ignore
          if (peg$r3.test(input.charAt(peg$currPos))) {
// @ts-ignore
            s5 = input.charAt(peg$currPos);
// @ts-ignore
            peg$currPos++;
// @ts-ignore
          } else {
// @ts-ignore
            s5 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e68); }
          }
        }
// @ts-ignore
        s2 = [s2, s3, s4];
// @ts-ignore
        s1 = s2;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s1;
// @ts-ignore
        s1 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s1;
// @ts-ignore
      s1 = peg$FAILED;
    }
// @ts-ignore
    if (s1 === peg$FAILED) {
// @ts-ignore
      s1 = peg$currPos;
// @ts-ignore
      if (input.charCodeAt(peg$currPos) === 46) {
// @ts-ignore
        s2 = peg$c31;
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s2 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e33); }
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        s3 = [];
// @ts-ignore
        if (peg$r3.test(input.charAt(peg$currPos))) {
// @ts-ignore
          s4 = input.charAt(peg$currPos);
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s4 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e68); }
        }
// @ts-ignore
        if (s4 !== peg$FAILED) {
// @ts-ignore
          while (s4 !== peg$FAILED) {
// @ts-ignore
            s3.push(s4);
// @ts-ignore
            if (peg$r3.test(input.charAt(peg$currPos))) {
// @ts-ignore
              s4 = input.charAt(peg$currPos);
// @ts-ignore
              peg$currPos++;
// @ts-ignore
            } else {
// @ts-ignore
              s4 = peg$FAILED;
// @ts-ignore
              if (peg$silentFails === 0) { peg$fail(peg$e68); }
            }
          }
// @ts-ignore
        } else {
// @ts-ignore
          s3 = peg$FAILED;
        }
// @ts-ignore
        if (s3 !== peg$FAILED) {
// @ts-ignore
          s2 = [s2, s3];
// @ts-ignore
          s1 = s2;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s1;
// @ts-ignore
          s1 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s1;
// @ts-ignore
        s1 = peg$FAILED;
      }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      if (peg$r7.test(input.charAt(peg$currPos))) {
// @ts-ignore
        s3 = input.charAt(peg$currPos);
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s3 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e78); }
      }
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        if (peg$r8.test(input.charAt(peg$currPos))) {
// @ts-ignore
          s4 = input.charAt(peg$currPos);
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s4 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e79); }
        }
// @ts-ignore
        if (s4 === peg$FAILED) {
// @ts-ignore
          s4 = null;
        }
// @ts-ignore
        s5 = [];
// @ts-ignore
        if (peg$r3.test(input.charAt(peg$currPos))) {
// @ts-ignore
          s6 = input.charAt(peg$currPos);
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s6 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e68); }
        }
// @ts-ignore
        if (s6 !== peg$FAILED) {
// @ts-ignore
          while (s6 !== peg$FAILED) {
// @ts-ignore
            s5.push(s6);
// @ts-ignore
            if (peg$r3.test(input.charAt(peg$currPos))) {
// @ts-ignore
              s6 = input.charAt(peg$currPos);
// @ts-ignore
              peg$currPos++;
// @ts-ignore
            } else {
// @ts-ignore
              s6 = peg$FAILED;
// @ts-ignore
              if (peg$silentFails === 0) { peg$fail(peg$e68); }
            }
          }
// @ts-ignore
        } else {
// @ts-ignore
          s5 = peg$FAILED;
        }
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s3 = [s3, s4, s5];
// @ts-ignore
          s2 = s3;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s2;
// @ts-ignore
          s2 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
      if (s2 === peg$FAILED) {
// @ts-ignore
        s2 = null;
      }
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s0 = peg$f99();
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseComment() {
// @ts-ignore
    var s0;

// @ts-ignore
    s0 = peg$parseLineComment();
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$parseBlockComment();
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseLineComment() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 2) === peg$c70) {
// @ts-ignore
      s1 = peg$c70;
// @ts-ignore
      peg$currPos += 2;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e80); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = [];
// @ts-ignore
      s3 = peg$currPos;
// @ts-ignore
      s4 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      if (peg$r9.test(input.charAt(peg$currPos))) {
// @ts-ignore
        s5 = input.charAt(peg$currPos);
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s5 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e81); }
      }
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s5 === peg$FAILED) {
// @ts-ignore
        s4 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s4;
// @ts-ignore
        s4 = peg$FAILED;
      }
// @ts-ignore
      if (s4 !== peg$FAILED) {
// @ts-ignore
        if (input.length > peg$currPos) {
// @ts-ignore
          s5 = input.charAt(peg$currPos);
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s5 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e75); }
        }
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s4 = [s4, s5];
// @ts-ignore
          s3 = s4;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s3;
// @ts-ignore
        s3 = peg$FAILED;
      }
// @ts-ignore
      while (s3 !== peg$FAILED) {
// @ts-ignore
        s2.push(s3);
// @ts-ignore
        s3 = peg$currPos;
// @ts-ignore
        s4 = peg$currPos;
// @ts-ignore
        peg$silentFails++;
// @ts-ignore
        if (peg$r9.test(input.charAt(peg$currPos))) {
// @ts-ignore
          s5 = input.charAt(peg$currPos);
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s5 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e81); }
        }
// @ts-ignore
        peg$silentFails--;
// @ts-ignore
        if (s5 === peg$FAILED) {
// @ts-ignore
          s4 = undefined;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s4;
// @ts-ignore
          s4 = peg$FAILED;
        }
// @ts-ignore
        if (s4 !== peg$FAILED) {
// @ts-ignore
          if (input.length > peg$currPos) {
// @ts-ignore
            s5 = input.charAt(peg$currPos);
// @ts-ignore
            peg$currPos++;
// @ts-ignore
          } else {
// @ts-ignore
            s5 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e75); }
          }
// @ts-ignore
          if (s5 !== peg$FAILED) {
// @ts-ignore
            s4 = [s4, s5];
// @ts-ignore
            s3 = s4;
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s3;
// @ts-ignore
            s3 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
      }
// @ts-ignore
      s1 = [s1, s2];
// @ts-ignore
      s0 = s1;
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseBlockComment() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 2) === peg$c71) {
// @ts-ignore
      s1 = peg$c71;
// @ts-ignore
      peg$currPos += 2;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e82); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = [];
// @ts-ignore
      s3 = peg$currPos;
// @ts-ignore
      s4 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      if (input.substr(peg$currPos, 2) === peg$c72) {
// @ts-ignore
        s5 = peg$c72;
// @ts-ignore
        peg$currPos += 2;
// @ts-ignore
      } else {
// @ts-ignore
        s5 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e83); }
      }
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s5 === peg$FAILED) {
// @ts-ignore
        s4 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s4;
// @ts-ignore
        s4 = peg$FAILED;
      }
// @ts-ignore
      if (s4 !== peg$FAILED) {
// @ts-ignore
        if (input.length > peg$currPos) {
// @ts-ignore
          s5 = input.charAt(peg$currPos);
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s5 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e75); }
        }
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s4 = [s4, s5];
// @ts-ignore
          s3 = s4;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s3;
// @ts-ignore
        s3 = peg$FAILED;
      }
// @ts-ignore
      while (s3 !== peg$FAILED) {
// @ts-ignore
        s2.push(s3);
// @ts-ignore
        s3 = peg$currPos;
// @ts-ignore
        s4 = peg$currPos;
// @ts-ignore
        peg$silentFails++;
// @ts-ignore
        if (input.substr(peg$currPos, 2) === peg$c72) {
// @ts-ignore
          s5 = peg$c72;
// @ts-ignore
          peg$currPos += 2;
// @ts-ignore
        } else {
// @ts-ignore
          s5 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e83); }
        }
// @ts-ignore
        peg$silentFails--;
// @ts-ignore
        if (s5 === peg$FAILED) {
// @ts-ignore
          s4 = undefined;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s4;
// @ts-ignore
          s4 = peg$FAILED;
        }
// @ts-ignore
        if (s4 !== peg$FAILED) {
// @ts-ignore
          if (input.length > peg$currPos) {
// @ts-ignore
            s5 = input.charAt(peg$currPos);
// @ts-ignore
            peg$currPos++;
// @ts-ignore
          } else {
// @ts-ignore
            s5 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e75); }
          }
// @ts-ignore
          if (s5 !== peg$FAILED) {
// @ts-ignore
            s4 = [s4, s5];
// @ts-ignore
            s3 = s4;
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s3;
// @ts-ignore
            s3 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
      }
// @ts-ignore
      if (input.substr(peg$currPos, 2) === peg$c72) {
// @ts-ignore
        s3 = peg$c72;
// @ts-ignore
        peg$currPos += 2;
// @ts-ignore
      } else {
// @ts-ignore
        s3 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e83); }
      }
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s1 = [s1, s2, s3];
// @ts-ignore
        s0 = s1;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseWhitespace() {
// @ts-ignore
    var s0, s1;

// @ts-ignore
    s0 = [];
// @ts-ignore
    if (peg$r10.test(input.charAt(peg$currPos))) {
// @ts-ignore
      s1 = input.charAt(peg$currPos);
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e84); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      while (s1 !== peg$FAILED) {
// @ts-ignore
        s0.push(s1);
// @ts-ignore
        if (peg$r10.test(input.charAt(peg$currPos))) {
// @ts-ignore
          s1 = input.charAt(peg$currPos);
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s1 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e84); }
        }
      }
// @ts-ignore
    } else {
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parse_() {
// @ts-ignore
    var s0, s1, s2;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = [];
// @ts-ignore
    s2 = peg$parseWhitespace();
// @ts-ignore
    if (s2 === peg$FAILED) {
// @ts-ignore
      s2 = peg$parseComment();
    }
// @ts-ignore
    while (s2 !== peg$FAILED) {
// @ts-ignore
      s1.push(s2);
// @ts-ignore
      s2 = peg$parseWhitespace();
// @ts-ignore
      if (s2 === peg$FAILED) {
// @ts-ignore
        s2 = peg$parseComment();
      }
    }
// @ts-ignore
    peg$savedPos = s0;
// @ts-ignore
    s1 = peg$f100();
// @ts-ignore
    s0 = s1;

// @ts-ignore
    return s0;
  }

// @ts-ignore
  peg$result = peg$startRuleFunction();

// @ts-ignore
  if (peg$result !== peg$FAILED && peg$currPos === input.length) {
// @ts-ignore
    return peg$result;
// @ts-ignore
  } else {
// @ts-ignore
    if (peg$result !== peg$FAILED && peg$currPos < input.length) {
// @ts-ignore
      peg$fail(peg$endExpectation());
    }

// @ts-ignore
    throw peg$buildStructuredError(
// @ts-ignore
      peg$maxFailExpected,
// @ts-ignore
      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
// @ts-ignore
      peg$maxFailPos < input.length
// @ts-ignore
        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
// @ts-ignore
        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
    );
  }
}

// @ts-ignore
  return {
    SyntaxError: peg$SyntaxError,
    parse: peg$parse
  };
})()

export interface FilePosition {
  offset: number;
  line: number;
  column: number;
}

export interface FileRange {
  start: FilePosition;
  end: FilePosition;
  source: string;
}

export interface LiteralExpectation {
  type: "literal";
  text: string;
  ignoreCase: boolean;
}

export interface ClassParts extends Array<string | ClassParts> {}

export interface ClassExpectation {
  type: "class";
  parts: ClassParts;
  inverted: boolean;
  ignoreCase: boolean;
}

export interface AnyExpectation {
  type: "any";
}

export interface EndExpectation {
  type: "end";
}

export interface OtherExpectation {
  type: "other";
  description: string;
}

export type Expectation = LiteralExpectation | ClassExpectation | AnyExpectation | EndExpectation | OtherExpectation;

declare class _PeggySyntaxError extends Error {
  public static buildMessage(expected: Expectation[], found: string | null): string;
  public message: string;
  public expected: Expectation[];
  public found: string | null;
  public location: FileRange;
  public name: string;
  constructor(message: string, expected: Expectation[], found: string | null, location: FileRange);
  format(sources: {
    source?: any;
    text: string;
  }[]): string;
}

export interface TraceEvent {
    type: string;
    rule: string;
    result?: any;
    location: FileRange;
  }

declare class _DefaultTracer {
  private indentLevel: number;
  public trace(event: TraceEvent): void;
}

peggyParser.SyntaxError.prototype.name = "PeggySyntaxError";

export interface ParseOptions {
  filename?: string;
  startRule?: "start";
  tracer?: any;
  [key: string]: any;
}
export type ParseFunction = <Options extends ParseOptions>(
    input: string,
    options?: Options
  ) => Options extends { startRule: infer StartRule } ?
    StartRule extends "start" ? Start : Start
    : Start;
export const parse: ParseFunction = peggyParser.parse;

export const PeggySyntaxError = peggyParser.SyntaxError as typeof _PeggySyntaxError;

export type PeggySyntaxError = _PeggySyntaxError;

// These types were autogenerated by ts-pegjs
export type Start = {
  type: "Script";
  moduleName: ModuleDeclaration | null;
  statements: TopLevelStatement[];
  location: {
    source: string | undefined;
    start: { offset: number; line: number; column: number };
    end: { offset: number; line: number; column: number };
  };
};
export type TopLevelStatement =
  | StructDeclaration
  | ClassDeclaration
  | EnumDeclaration
  | InterfaceDeclaration
  | VariableDeclaration
  | FunctionDeclaration
  | TestDeclaration
  | ExpressionStatement;
export type ModuleDeclaration = {
  type: "ModuleDeclaration";
  name: IDENTIFIER | STRING;
  location: {
    source: string | undefined;
    start: { offset: number; line: number; column: number };
    end: { offset: number; line: number; column: number };
  };
};
export type StructDeclaration = {
  type: "StructDeclaration";
  name: IDENTIFIER;
  members: StructMember[];
  generic: GenericDeclaration | null;
  location: {
    source: string | undefined;
    start: { offset: number; line: number; column: number };
    end: { offset: number; line: number; column: number };
  };
};
export type StructMember = StructField | StructMethod | StructMetaFunction;
export type StructMetaFunction =
  | {
      type: "StructMetaFunction";
      static: STATIC | null;
      meta: MetaIdentifier;
      params: never[] | NonNullable<ParameterList | null>;
      args: any;
      body: Block;
      access: AccessModifier | null;
      location: {
        source: string | undefined;
        start: { offset: number; line: number; column: number };
        end: { offset: number; line: number; column: number };
      };
    }
  | {
      type: "StructMetaFunction";
      static: STATIC | null;
      meta: MetaIdentifier;
      params: [];
      args: Parameter;
      body: Block;
      access: AccessModifier | null;
      location: {
        source: string | undefined;
        start: { offset: number; line: number; column: number };
        end: { offset: number; line: number; column: number };
      };
    };
export type StructField = {
  type: "StructField";
  access: AccessModifier | null;
  static: STATIC | null;
  name: IDENTIFIER;
  typeInfo: any;
  init: any;
  location: {
    source: string | undefined;
    start: { offset: number; line: number; column: number };
    end: { offset: number; line: number; column: number };
  };
};
export type StructMethod =
  | {
      type: "StructMethod";
      decorator: DecoratorExpression[];
      access: AccessModifier | null;
      static: STATIC | null;
      generic: GenericDeclaration | null;
      name: IDENTIFIER;
      params: never[] | NonNullable<ParameterList | null>;
      args: any;
      returnType: any;
      body: Block;
      location: {
        source: string | undefined;
        start: { offset: number; line: number; column: number };
        end: { offset: number; line: number; column: number };
      };
    }
  | {
      type: "StructMethod";
      decorator: DecoratorExpression[];
      access: AccessModifier | null;
      static: STATIC | null;
      generic: GenericDeclaration | null;
      name: IDENTIFIER;
      params: [];
      args: Parameter;
      returnType: any;
      body: Block;
      location: {
        source: string | undefined;
        start: { offset: number; line: number; column: number };
        end: { offset: number; line: number; column: number };
      };
    };
export type ClassDeclaration = {
  type: "ClassDeclaration";
  name: IDENTIFIER;
  inherits: any;
  members: ClassMember[];
  decorator: DecoratorExpression[];
  generic: GenericDeclaration | null;
  location: {
    source: string | undefined;
    start: { offset: number; line: number; column: number };
    end: { offset: number; line: number; column: number };
  };
};
export type ClassMember = Method | Property | MetaFunction | Field;
export type MetaFunction =
  | {
      type: "ClassMetaFunction";
      meta: MetaIdentifier;
      static: STATIC | null;
      params: never[] | NonNullable<ParameterList | null>;
      args: any;
      superArgs: any;
      body: Block;
      access: AccessModifier | null;
      location: {
        source: string | undefined;
        start: { offset: number; line: number; column: number };
        end: { offset: number; line: number; column: number };
      };
    }
  | {
      type: "ClassMetaFunction";
      meta: MetaIdentifier;
      static: STATIC | null;
      params: [];
      args: Parameter;
      superArgs: any;
      body: Block;
      access: AccessModifier | null;
      location: {
        source: string | undefined;
        start: { offset: number; line: number; column: number };
        end: { offset: number; line: number; column: number };
      };
    };
export type Field = {
  type: "ClassField";
  decorator: DecoratorExpression[];
  access: AccessModifier | null;
  static: STATIC | null;
  name: IDENTIFIER;
  typeInfo: any;
  init: any;
  location: {
    source: string | undefined;
    start: { offset: number; line: number; column: number };
    end: { offset: number; line: number; column: number };
  };
};
export type Method =
  | {
      type: "ClassMethod";
      decorator: DecoratorExpression[];
      generic: GenericDeclaration | null;
      access: AccessModifier | null;
      static: STATIC | null;
      name: IDENTIFIER;
      params: never[] | NonNullable<ParameterList | null>;
      args: any;
      returnType: any;
      body: Block;
      location: {
        source: string | undefined;
        start: { offset: number; line: number; column: number };
        end: { offset: number; line: number; column: number };
      };
    }
  | {
      type: "ClassMethod";
      decorator: DecoratorExpression[];
      generic: GenericDeclaration | null;
      access: AccessModifier | null;
      static: STATIC | null;
      name: IDENTIFIER;
      params: [];
      args: Parameter;
      returnType: any;
      body: Block;
      location: {
        source: string | undefined;
        start: { offset: number; line: number; column: number };
        end: { offset: number; line: number; column: number };
      };
    };
export type Property = {
  type: "ClassProperty";
  access: AccessModifier | null;
  static: STATIC | null;
  modifier: GetProperty | SetProperty;
  decorator: DecoratorExpression[];
  location: {
    source: string | undefined;
    start: { offset: number; line: number; column: number };
    end: { offset: number; line: number; column: number };
  };
};
export type GetProperty = {
  type: "Property";
  kind: "get";
  name: IDENTIFIER;
  targetType: any;
  param: null;
  body: Block;
  location: {
    source: string | undefined;
    start: { offset: number; line: number; column: number };
    end: { offset: number; line: number; column: number };
  };
};
export type SetProperty = {
  type: "Property";
  kind: "set";
  name: IDENTIFIER;
  param: IDENTIFIER;
  targetType: any;
  body: Block;
  location: {
    source: string | undefined;
    start: { offset: number; line: number; column: number };
    end: { offset: number; line: number; column: number };
  };
};
export type InterfaceDeclaration = {
  type: "InterfaceDeclaration";
  name: IDENTIFIER;
  members: InterfaceMember[];
  generic: GenericDeclaration | null;
  inherits: any;
  location: {
    source: string | undefined;
    start: { offset: number; line: number; column: number };
    end: { offset: number; line: number; column: number };
  };
};
export type InterfaceMember =
  | InterfaceMethodSignature
  | InterfacePropertySignature
  | InterfaceFieldDeclaration;
export type InterfaceMethodSignature =
  | {
      type: "InterfaceMethodSignature";
      name: IDENTIFIER;
      params: never[] | NonNullable<ParameterList | null>;
      args: any;
      returnType: any;
      access: AccessModifier | null;
      generic: GenericDeclaration | null;
      location: {
        source: string | undefined;
        start: { offset: number; line: number; column: number };
        end: { offset: number; line: number; column: number };
      };
    }
  | {
      type: "InterfaceMethodSignature";
      name: IDENTIFIER;
      params: [];
      args: Parameter;
      returnType: any;
      access: AccessModifier | null;
      generic: GenericDeclaration | null;
      location: {
        source: string | undefined;
        start: { offset: number; line: number; column: number };
        end: { offset: number; line: number; column: number };
      };
    };
export type InterfacePropertySignature = {
  type: "InterfacePropertySignature";
  name: IDENTIFIER;
  typeInfo: any;
  access: AccessModifier | null;
  propertyType: GetSetModifier | null;
  location: {
    source: string | undefined;
    start: { offset: number; line: number; column: number };
    end: { offset: number; line: number; column: number };
  };
};
export type GetSetModifier = "get_set" | "get" | "set";
export type InterfaceFieldDeclaration = {
  type: "InterfaceFieldDeclaration";
  name: IDENTIFIER;
  targetType: any;
  access: AccessModifier | null;
  location: {
    source: string | undefined;
    start: { offset: number; line: number; column: number };
    end: { offset: number; line: number; column: number };
  };
};
export type EnumDeclaration = {
  type: "EnumDeclaration";
  name: IDENTIFIER;
  baseType: any;
  members: EnumMember[];
  location: {
    source: string | undefined;
    start: { offset: number; line: number; column: number };
    end: { offset: number; line: number; column: number };
  };
};
export type EnumMember = {
  type: "EnumMember";
  name: IDENTIFIER;
  value: any;
  location: {
    source: string | undefined;
    start: { offset: number; line: number; column: number };
    end: { offset: number; line: number; column: number };
  };
};
export type GenericDeclaration = {
  type: "GenericDeclaration";
  params: Parameter[];
  location: {
    source: string | undefined;
    start: { offset: number; line: number; column: number };
    end: { offset: number; line: number; column: number };
  };
};
export type Statement =
  | ControlStatement
  | VariableDeclaration
  | ExpressionStatement
  | ReturnStatement
  | BreakContinueStatement
  | OutStatement
  | ThrowStatement
  | Block;
export type ExpressionStatement = {
  type: "ExpressionStatement";
  expr: Expression;
  location: {
    source: string | undefined;
    start: { offset: number; line: number; column: number };
    end: { offset: number; line: number; column: number };
  };
};
export type VariableDeclaration = {
  type: "VariableDeclaration";
  pattern: DestructuringPattern | DestructuringArrayPattern | IDENTIFIER;
  value: Expression;
  typeInfo: null | undefined;
  location: {
    source: string | undefined;
    start: { offset: number; line: number; column: number };
    end: { offset: number; line: number; column: number };
  };
};
export type ControlStatement =
  | IfStatement
  | SwitchStatement
  | LoopStatement
  | ReturnStatement
  | BreakContinueStatement;
export type ReturnStatement = {
  type: "ReturnStatement";
  expr: Expression | null;
  location: {
    source: string | undefined;
    start: { offset: number; line: number; column: number };
    end: { offset: number; line: number; column: number };
  };
};
export type BreakContinueStatement = {
  type: "BreakContinueStatement";
  isBreak: boolean;
  expr: Expression | null;
  location: {
    source: string | undefined;
    start: { offset: number; line: number; column: number };
    end: { offset: number; line: number; column: number };
  };
};
export type OutStatement = {
  type: "OutStatement";
  expr: Expression;
  location: {
    source: string | undefined;
    start: { offset: number; line: number; column: number };
    end: { offset: number; line: number; column: number };
  };
};
export type ThrowStatement = {
  type: "ThrowStatement";
  expr: Expression;
  location: {
    source: string | undefined;
    start: { offset: number; line: number; column: number };
    end: { offset: number; line: number; column: number };
  };
};
export type IfStatement = IfExpression;
export type SwitchStatement = SwitchExpression;
export type SwitchCase = {
  type: "SwitchCase";
  value: Expression;
  block: Block;
  location: {
    source: string | undefined;
    start: { offset: number; line: number; column: number };
    end: { offset: number; line: number; column: number };
  };
};
export type SwitchDefault = {
  type: "SwitchDefault";
  block: Block;
  location: {
    source: string | undefined;
    start: { offset: number; line: number; column: number };
    end: { offset: number; line: number; column: number };
  };
};
export type LoopStatement = LoopExpression;
export type LoopExpression = WhileLoop | ForeachLoop | ForLoop;
export type WhileLoop = {
  type: "WhileLoop";
  isStatement: false;
  cond: Expression;
  block: Block;
  location: {
    source: string | undefined;
    start: { offset: number; line: number; column: number };
    end: { offset: number; line: number; column: number };
  };
};
export type ForLoop = {
  type: "ForLoop";
  isStatement: false;
  init: VariableDeclaration | SEMICOLON;
  cond: ExpressionStatement | SEMICOLON;
  step: Expression | null;
  block: Block;
  location: {
    source: string | undefined;
    start: { offset: number; line: number; column: number };
    end: { offset: number; line: number; column: number };
  };
};
export type ForeachLoop = {
  type: "ForeachLoop";
  pattern: DestructuringPattern | DestructuringArrayPattern | IDENTIFIER;
  isStatement: false;
  typeInfo: null | undefined;
  expr: Expression;
  block: Block;
  location: {
    source: string | undefined;
    start: { offset: number; line: number; column: number };
    end: { offset: number; line: number; column: number };
  };
};
export type Block = {
  type: "Block";
  isStatement: true;
  body: Statement[];
  location: {
    source: string | undefined;
    start: { offset: number; line: number; column: number };
    end: { offset: number; line: number; column: number };
  };
};
export type Expression = AssignmentExpression;
export type AssignmentExpression =
  | {
      type: "Assignment";
      op: AssignmentOperator;
      left: ConditionalExpression;
      right: AssignmentExpression;
      location: {
        source: string | undefined;
        start: { offset: number; line: number; column: number };
        end: { offset: number; line: number; column: number };
      };
    }
  | ConditionalExpression;
export type ConditionalExpression =
  | {
      type: "Conditional";
      test: LogicalOrExpression;
      consequent: Expression;
      alternate: ConditionalExpression;
      location: {
        source: string | undefined;
        start: { offset: number; line: number; column: number };
        end: { offset: number; line: number; column: number };
      };
    }
  | LogicalOrExpression;
export type LogicalOrExpression = [_, PIPEPIPE, _, LogicalAndExpression];
export type LogicalAndExpression = [
  _,
  AMPERSANDAMPERSAND,
  _,
  EqualityExpression
];
export type EqualityExpression = [_, EqualityOperator, _, RelationalExpression];
export type RelationalExpression = [
  _,
  RelationalOperator,
  _,
  AdditiveExpression
];
export type AdditiveExpression = [
  _,
  AdditiveOperator,
  _,
  MultiplicativeExpression
];
export type MultiplicativeExpression = [
  _,
  MultiplicativeOperator,
  _,
  UnaryExpression
];
export type UnaryExpression =
  | {
      type: "Unary";
      op: UnaryOperator;
      argument: UnaryExpression;
      location: {
        source: string | undefined;
        start: { offset: number; line: number; column: number };
        end: { offset: number; line: number; column: number };
      };
    }
  | {
      type: "PrimaryExpression";
      property: PrimaryExpression;
      members: MemberAccess[];
      location: {
        source: string | undefined;
        start: { offset: number; line: number; column: number };
        end: { offset: number; line: number; column: number };
      };
    };
export type MemberAccess =
  | {
      type: "MemberExpression";
      property: IDENTIFIER;
      computed: false;
      location: {
        source: string | undefined;
        start: { offset: number; line: number; column: number };
        end: { offset: number; line: number; column: number };
      };
    }
  | {
      type: "MemberExpression";
      property: Expression;
      computed: true;
      location: {
        source: string | undefined;
        start: { offset: number; line: number; column: number };
        end: { offset: number; line: number; column: number };
      };
    }
  | {
      type: "FunctionCall";
      args: never[] | NonNullable<ArgumentList | null>;
      location: {
        source: string | undefined;
        start: { offset: number; line: number; column: number };
        end: { offset: number; line: number; column: number };
      };
    };
export type PrimaryExpression =
  | {
      type: "ValueLiteral";
      value: Literal;
      location: {
        source: string | undefined;
        start: { offset: number; line: number; column: number };
        end: { offset: number; line: number; column: number };
      };
    }
  | ObjectLiteral
  | ArrayLiteral
  | UnpackLiteral
  | LambdaExpression
  | IfExpression
  | SwitchExpression
  | LoopExpression
  | {
      type: "IdentifierLiteral";
      value: IDENTIFIER;
      location: {
        source: string | undefined;
        start: { offset: number; line: number; column: number };
        end: { offset: number; line: number; column: number };
      };
    }
  | Expression
  | Block;
export type ArrayLiteral = {
  type: "ArrayLiteral";
  elements: any[];
  location: {
    source: string | undefined;
    start: { offset: number; line: number; column: number };
    end: { offset: number; line: number; column: number };
  };
};
export type UnpackLiteral = {
  type: "UnpackLiteral";
  element: Expression;
  location: {
    source: string | undefined;
    start: { offset: number; line: number; column: number };
    end: { offset: number; line: number; column: number };
  };
};
export type ObjectLiteral = {
  type: "ObjectLiteral";
  properties: any[];
  location: {
    source: string | undefined;
    start: { offset: number; line: number; column: number };
    end: { offset: number; line: number; column: number };
  };
};
export type KeyValuePair = {
  type: "KeyValuePair";
  key: STRING | ComputedKey | IDENTIFIER;
  value: Expression;
  location: {
    source: string | undefined;
    start: { offset: number; line: number; column: number };
    end: { offset: number; line: number; column: number };
  };
};
export type ComputedKey = Expression;
export type LambdaExpression =
  | {
      type: "LambdaExpression";
      params: never[] | NonNullable<ParameterList | null>;
      args: any;
      block: Block;
      location: {
        source: string | undefined;
        start: { offset: number; line: number; column: number };
        end: { offset: number; line: number; column: number };
      };
    }
  | {
      type: "LambdaExpression";
      params: [];
      args: Parameter;
      block: Block;
      location: {
        source: string | undefined;
        start: { offset: number; line: number; column: number };
        end: { offset: number; line: number; column: number };
      };
    };
export type IfExpression = {
  type: "IfExpression";
  isStatement: false;
  condition: Expression;
  then: Block;
  else: any;
  location: {
    source: string | undefined;
    start: { offset: number; line: number; column: number };
    end: { offset: number; line: number; column: number };
  };
};
export type SwitchExpression = {
  type: "SwitchExpression";
  isStatement: false;
  expr: Expression;
  cases: SwitchCase[] | never[];
  default: SwitchDefault | null;
  location: {
    source: string | undefined;
    start: { offset: number; line: number; column: number };
    end: { offset: number; line: number; column: number };
  };
};
export type AssignmentOperator =
  | EQUALS
  | PLUSEQUALS
  | MINUSEQUALS
  | STAREQUALS
  | SLASHEQUALS
  | PERCENTEQUALS;
export type EqualityOperator = DOUBLEEQUALS | BANGEQUALS;
export type RelationalOperator =
  | LESSTHANEQUALS
  | GREATERTHANEQUALS
  | LESSTHAN
  | GREATERTHAN;
export type AdditiveOperator = PLUS | MINUS;
export type MultiplicativeOperator = STAR | SLASH | PERCENT;
export type UnaryOperator = {
  type: "UnaryOperator";
  operator: string;
  location: {
    source: string | undefined;
    start: { offset: number; line: number; column: number };
    end: { offset: number; line: number; column: number };
  };
};
export type FunctionDeclaration =
  | {
      type: "FunctionDeclaration";
      name: IDENTIFIER;
      params: never[] | NonNullable<ParameterList | null>;
      args: any;
      generic: GenericDeclaration | null;
      decorator: DecoratorExpression[];
      returnType: any;
      body: Block;
      location: () => {
        source: string | undefined;
        start: { offset: number; line: number; column: number };
        end: { offset: number; line: number; column: number };
      };
    }
  | {
      type: "FunctionDeclaration";
      name: IDENTIFIER;
      params: [];
      args: Parameter;
      generic: GenericDeclaration | null;
      decorator: DecoratorExpression[];
      returnType: any;
      body: Block;
      location: () => {
        source: string | undefined;
        start: { offset: number; line: number; column: number };
        end: { offset: number; line: number; column: number };
      };
    };
export type TestDeclaration = {
  type: "TestDeclaration";
  name: STRING;
  params: never[] | NonNullable<ParameterList | null>;
  args: any;
  body: Block;
  location: {
    source: string | undefined;
    start: { offset: number; line: number; column: number };
    end: { offset: number; line: number; column: number };
  };
};
export type AccessModifier = PUB | PRI | PRO;
export type Type = {
  type: "Type";
  name: GenericType | TupleType | IDENTIFIER;
  dimensions: number;
  location: {
    source: string | undefined;
    start: { offset: number; line: number; column: number };
    end: { offset: number; line: number; column: number };
  };
};
export type GenericType = {
  type: "GenericType";
  name: IDENTIFIER;
  params: TypeList;
  location: {
    source: string | undefined;
    start: { offset: number; line: number; column: number };
    end: { offset: number; line: number; column: number };
  };
};
export type TupleType = {
  type: "TupleType";
  elements: TypeList;
  location: {
    source: string | undefined;
    start: { offset: number; line: number; column: number };
    end: { offset: number; line: number; column: number };
  };
};
export type Parameter = {
  type: "Parameter";
  name: IDENTIFIER;
  typeInfo: any;
  defaultValue: any;
  location: {
    source: string | undefined;
    start: { offset: number; line: number; column: number };
    end: { offset: number; line: number; column: number };
  };
};
export type ParameterList = Parameter[];
export type ArgumentList = Expression[];
export type TypeList = Type[];
export type MetaIdentifier = {
  type: "Meta";
  name: IDENTIFIER;
  location: {
    source: string | undefined;
    start: { offset: number; line: number; column: number };
    end: { offset: number; line: number; column: number };
  };
};
export type DecoratorExpression = {
  type: "DecoratorExpression";
  expr: Expression;
  location: {
    source: string | undefined;
    start: { offset: number; line: number; column: number };
    end: { offset: number; line: number; column: number };
  };
};
export type DestructuringPattern = {
  type: "DestructuringObject";
  keys: IdentifierList;
  location: {
    source: string | undefined;
    start: { offset: number; line: number; column: number };
    end: { offset: number; line: number; column: number };
  };
};
export type DestructuringArrayPattern = {
  type: "DestructuringArray";
  keys: IdentifierList;
  location: {
    source: string | undefined;
    start: { offset: number; line: number; column: number };
    end: { offset: number; line: number; column: number };
  };
};
export type IdentifierList = IDENTIFIER[];
export type IDENTIFIER = {
  type: "Identifier";
  name: string;
  location: {
    source: string | undefined;
    start: { offset: number; line: number; column: number };
    end: { offset: number; line: number; column: number };
  };
};
export type MODULE = "module";
export type STRUCT = "struct";
export type CLASS = "class";
export type INTERFACE = "interface";
export type ENUM = "enum";
export type TEST = "test";
export type VAR = "var";
export type PUB = "pub";
export type PRI = "pri";
export type PRO = "pro";
export type IF = "if";
export type ELSE = "else";
export type SWITCH = "switch";
export type WHILE = "while";
export type FOR = "for";
export type BREAK = "break";
export type CONTINUE = "continue";
export type RETURN = "return";
export type SUPER = "super";
export type NEW = "new";
export type SET = "set";
export type GET = "get";
export type STATIC = "static";
export type IN = "in";
export type OUT = "out";
export type THROW = "throw";
export type PARAMS = "...";
export type QUESTIONMARK = "?";
export type COLON = ":";
export type SEMICOLON = ";";
export type COMMA = ",";
export type DOT = ".";
export type TILDE = "~";
export type AT = "@";
export type SHARP = "#";
export type DOLLAR = "$";
export type LPAREN = "(";
export type RPAREN = ")";
export type LBRACE = "{";
export type RBRACE = "}";
export type LBRACKET = "[";
export type RBRACKET = "]";
export type EQUALS = "=";
export type PLUSEQUALS = "+=";
export type MINUSEQUALS = "-=";
export type STAREQUALS = "*=";
export type SLASHEQUALS = "/=";
export type PERCENTEQUALS = "%=";
export type DOUBLEEQUALS = "==";
export type BANGEQUALS = "!=";
export type BANG = "!";
export type LESSTHAN = "<";
export type LESSTHANEQUALS = "<=";
export type GREATERTHAN = ">";
export type GREATERTHANEQUALS = ">=";
export type PLUS = "+";
export type MINUS = "-";
export type STAR = "*";
export type SLASH = "/";
export type PERCENT = "%";
export type AMPERSANDAMPERSAND = "&&";
export type PIPEPIPE = "||";
export type RIGHTARROW = "=>";
export type Literal =
  | BOOLEAN
  | FLOAT
  | HEXADECIMAL
  | OCTAL
  | DECIMAL
  | STRING
  | CHAR
  | VALUENULL;
export type BOOLEAN = {
  type: "Boolean";
  value: boolean;
  location: {
    source: string | undefined;
    start: { offset: number; line: number; column: number };
    end: { offset: number; line: number; column: number };
  };
};
export type DECIMAL = {
  type: "Integer";
  value: number;
  location: {
    source: string | undefined;
    start: { offset: number; line: number; column: number };
    end: { offset: number; line: number; column: number };
  };
};
export type HEXADECIMAL = {
  type: "Integer";
  value: number;
  location: {
    source: string | undefined;
    start: { offset: number; line: number; column: number };
    end: { offset: number; line: number; column: number };
  };
};
export type OCTAL = {
  type: "Integer";
  value: number;
  location: {
    source: string | undefined;
    start: { offset: number; line: number; column: number };
    end: { offset: number; line: number; column: number };
  };
};
export type CHAR = {
  type: "Char";
  value: string;
  location: {
    source: string | undefined;
    start: { offset: number; line: number; column: number };
    end: { offset: number; line: number; column: number };
  };
};
export type STRING = {
  type: "String";
  value: string;
  location: {
    source: string | undefined;
    start: { offset: number; line: number; column: number };
    end: { offset: number; line: number; column: number };
  };
};
export type VALUENULL = {
  type: "Null";
  location: {
    source: string | undefined;
    start: { offset: number; line: number; column: number };
    end: { offset: number; line: number; column: number };
  };
};
export type FLOAT = {
  type: "Float";
  value: number;
  location: {
    source: string | undefined;
    start: { offset: number; line: number; column: number };
    end: { offset: number; line: number; column: number };
  };
};
export type Comment = LineComment | BlockComment;
export type LineComment = ["//", [undefined, string][]];
export type BlockComment = ["/*", [undefined, string][], "*/"];
export type Whitespace = string[];
export type _ = undefined;
