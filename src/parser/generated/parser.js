// Generated by Peggy 3.0.2.
//
// https://peggyjs.org/

function peg$subclass(child, parent) {
  function C() { this.constructor = child; }
  C.prototype = parent.prototype;
  child.prototype = new C();
}

function peg$SyntaxError(message, expected, found, location) {
  var self = Error.call(this, message);
  // istanbul ignore next Check is a necessary evil to support older environments
  if (Object.setPrototypeOf) {
    Object.setPrototypeOf(self, peg$SyntaxError.prototype);
  }
  self.expected = expected;
  self.found = found;
  self.location = location;
  self.name = "SyntaxError";
  return self;
}

peg$subclass(peg$SyntaxError, Error);

function peg$padEnd(str, targetLength, padString) {
  padString = padString || " ";
  if (str.length > targetLength) { return str; }
  targetLength -= str.length;
  padString += padString.repeat(targetLength);
  return str + padString.slice(0, targetLength);
}

peg$SyntaxError.prototype.format = function(sources) {
  var str = "Error: " + this.message;
  if (this.location) {
    var src = null;
    var k;
    for (k = 0; k < sources.length; k++) {
      if (sources[k].source === this.location.source) {
        src = sources[k].text.split(/\r\n|\n|\r/g);
        break;
      }
    }
    var s = this.location.start;
    var offset_s = (this.location.source && (typeof this.location.source.offset === "function"))
      ? this.location.source.offset(s)
      : s;
    var loc = this.location.source + ":" + offset_s.line + ":" + offset_s.column;
    if (src) {
      var e = this.location.end;
      var filler = peg$padEnd("", offset_s.line.toString().length, ' ');
      var line = src[s.line - 1];
      var last = s.line === e.line ? e.column : line.length + 1;
      var hatLen = (last - s.column) || 1;
      str += "\n --> " + loc + "\n"
          + filler + " |\n"
          + offset_s.line + " | " + line + "\n"
          + filler + " | " + peg$padEnd("", s.column - 1, ' ')
          + peg$padEnd("", hatLen, "^");
    } else {
      str += "\n at " + loc;
    }
  }
  return str;
};

peg$SyntaxError.buildMessage = function(expected, found) {
  var DESCRIBE_EXPECTATION_FNS = {
    literal: function(expectation) {
      return "\"" + literalEscape(expectation.text) + "\"";
    },

    class: function(expectation) {
      var escapedParts = expectation.parts.map(function(part) {
        return Array.isArray(part)
          ? classEscape(part[0]) + "-" + classEscape(part[1])
          : classEscape(part);
      });

      return "[" + (expectation.inverted ? "^" : "") + escapedParts.join("") + "]";
    },

    any: function() {
      return "any character";
    },

    end: function() {
      return "end of input";
    },

    other: function(expectation) {
      return expectation.description;
    }
  };

  function hex(ch) {
    return ch.charCodeAt(0).toString(16).toUpperCase();
  }

  function literalEscape(s) {
    return s
      .replace(/\\/g, "\\\\")
      .replace(/"/g,  "\\\"")
      .replace(/\0/g, "\\0")
      .replace(/\t/g, "\\t")
      .replace(/\n/g, "\\n")
      .replace(/\r/g, "\\r")
      .replace(/[\x00-\x0F]/g,          function(ch) { return "\\x0" + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return "\\x"  + hex(ch); });
  }

  function classEscape(s) {
    return s
      .replace(/\\/g, "\\\\")
      .replace(/\]/g, "\\]")
      .replace(/\^/g, "\\^")
      .replace(/-/g,  "\\-")
      .replace(/\0/g, "\\0")
      .replace(/\t/g, "\\t")
      .replace(/\n/g, "\\n")
      .replace(/\r/g, "\\r")
      .replace(/[\x00-\x0F]/g,          function(ch) { return "\\x0" + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return "\\x"  + hex(ch); });
  }

  function describeExpectation(expectation) {
    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
  }

  function describeExpected(expected) {
    var descriptions = expected.map(describeExpectation);
    var i, j;

    descriptions.sort();

    if (descriptions.length > 0) {
      for (i = 1, j = 1; i < descriptions.length; i++) {
        if (descriptions[i - 1] !== descriptions[i]) {
          descriptions[j] = descriptions[i];
          j++;
        }
      }
      descriptions.length = j;
    }

    switch (descriptions.length) {
      case 1:
        return descriptions[0];

      case 2:
        return descriptions[0] + " or " + descriptions[1];

      default:
        return descriptions.slice(0, -1).join(", ")
          + ", or "
          + descriptions[descriptions.length - 1];
    }
  }

  function describeFound(found) {
    return found ? "\"" + literalEscape(found) + "\"" : "end of input";
  }

  return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
};

function peg$parse(input, options) {
  options = options !== undefined ? options : {};

  var peg$FAILED = {};
  var peg$source = options.grammarSource;

  var peg$startRuleFunctions = { start: peg$parsestart };
  var peg$startRuleFunction = peg$parsestart;

  var peg$c0 = "module";
  var peg$c1 = "struct";
  var peg$c2 = "class";
  var peg$c3 = "interface";
  var peg$c4 = "enum";
  var peg$c5 = "var";
  var peg$c6 = "pub";
  var peg$c7 = "pri";
  var peg$c8 = "pro";
  var peg$c9 = "fn";
  var peg$c10 = "if";
  var peg$c11 = "else";
  var peg$c12 = "switch";
  var peg$c13 = "while";
  var peg$c14 = "for";
  var peg$c15 = "foreach";
  var peg$c16 = "break";
  var peg$c17 = "continue";
  var peg$c18 = "return";
  var peg$c19 = "super";
  var peg$c20 = "new";
  var peg$c21 = "set";
  var peg$c22 = "get";
  var peg$c23 = "static";
  var peg$c24 = "in";
  var peg$c25 = "?";
  var peg$c26 = ":";
  var peg$c27 = ";";
  var peg$c28 = ",";
  var peg$c29 = ".";
  var peg$c30 = "~";
  var peg$c31 = "@";
  var peg$c32 = "$";
  var peg$c33 = "(";
  var peg$c34 = ")";
  var peg$c35 = "{";
  var peg$c36 = "}";
  var peg$c37 = "[";
  var peg$c38 = "]";
  var peg$c39 = "=";
  var peg$c40 = "+=";
  var peg$c41 = "-=";
  var peg$c42 = "*=";
  var peg$c43 = "/=";
  var peg$c44 = "%=";
  var peg$c45 = "==";
  var peg$c46 = "!=";
  var peg$c47 = "!";
  var peg$c48 = "<";
  var peg$c49 = "<=";
  var peg$c50 = ">";
  var peg$c51 = ">=";
  var peg$c52 = "+";
  var peg$c53 = "-";
  var peg$c54 = "*";
  var peg$c55 = "/";
  var peg$c56 = "%";
  var peg$c57 = "&&";
  var peg$c58 = "||";
  var peg$c59 = "true";
  var peg$c60 = "false";
  var peg$c61 = "0x";
  var peg$c62 = "0";
  var peg$c63 = "'";
  var peg$c64 = "\"";
  var peg$c65 = "null";
  var peg$c66 = "//";
  var peg$c67 = "/*";
  var peg$c68 = "*/";

  var peg$r0 = /^[A-Za-z_]/;
  var peg$r1 = /^[A-Za-z0-9_]/;
  var peg$r2 = /^[1-9]/;
  var peg$r3 = /^[0-9]/;
  var peg$r4 = /^[0-9a-fA-F]/;
  var peg$r5 = /^[0-7]/;
  var peg$r6 = /^["\n\r"]/;
  var peg$r7 = /^[eE]/;
  var peg$r8 = /^[+\-]/;
  var peg$r9 = /^[\n\r]/;
  var peg$r10 = /^[ \t\n\r]/;

  var peg$e0 = peg$classExpectation([["A", "Z"], ["a", "z"], "_"], false, false);
  var peg$e1 = peg$classExpectation([["A", "Z"], ["a", "z"], ["0", "9"], "_"], false, false);
  var peg$e2 = peg$literalExpectation("module", false);
  var peg$e3 = peg$literalExpectation("struct", false);
  var peg$e4 = peg$literalExpectation("class", false);
  var peg$e5 = peg$literalExpectation("interface", false);
  var peg$e6 = peg$literalExpectation("enum", false);
  var peg$e7 = peg$literalExpectation("var", false);
  var peg$e8 = peg$literalExpectation("pub", false);
  var peg$e9 = peg$literalExpectation("pri", false);
  var peg$e10 = peg$literalExpectation("pro", false);
  var peg$e11 = peg$literalExpectation("fn", false);
  var peg$e12 = peg$literalExpectation("if", false);
  var peg$e13 = peg$literalExpectation("else", false);
  var peg$e14 = peg$literalExpectation("switch", false);
  var peg$e15 = peg$literalExpectation("while", false);
  var peg$e16 = peg$literalExpectation("for", false);
  var peg$e17 = peg$literalExpectation("foreach", false);
  var peg$e18 = peg$literalExpectation("break", false);
  var peg$e19 = peg$literalExpectation("continue", false);
  var peg$e20 = peg$literalExpectation("return", false);
  var peg$e21 = peg$literalExpectation("super", false);
  var peg$e22 = peg$literalExpectation("new", false);
  var peg$e23 = peg$literalExpectation("set", false);
  var peg$e24 = peg$literalExpectation("get", false);
  var peg$e25 = peg$literalExpectation("static", false);
  var peg$e26 = peg$literalExpectation("in", false);
  var peg$e27 = peg$literalExpectation("?", false);
  var peg$e28 = peg$literalExpectation(":", false);
  var peg$e29 = peg$literalExpectation(";", false);
  var peg$e30 = peg$literalExpectation(",", false);
  var peg$e31 = peg$literalExpectation(".", false);
  var peg$e32 = peg$literalExpectation("~", false);
  var peg$e33 = peg$literalExpectation("@", false);
  var peg$e34 = peg$literalExpectation("$", false);
  var peg$e35 = peg$literalExpectation("(", false);
  var peg$e36 = peg$literalExpectation(")", false);
  var peg$e37 = peg$literalExpectation("{", false);
  var peg$e38 = peg$literalExpectation("}", false);
  var peg$e39 = peg$literalExpectation("[", false);
  var peg$e40 = peg$literalExpectation("]", false);
  var peg$e41 = peg$literalExpectation("=", false);
  var peg$e42 = peg$literalExpectation("+=", false);
  var peg$e43 = peg$literalExpectation("-=", false);
  var peg$e44 = peg$literalExpectation("*=", false);
  var peg$e45 = peg$literalExpectation("/=", false);
  var peg$e46 = peg$literalExpectation("%=", false);
  var peg$e47 = peg$literalExpectation("==", false);
  var peg$e48 = peg$literalExpectation("!=", false);
  var peg$e49 = peg$literalExpectation("!", false);
  var peg$e50 = peg$literalExpectation("<", false);
  var peg$e51 = peg$literalExpectation("<=", false);
  var peg$e52 = peg$literalExpectation(">", false);
  var peg$e53 = peg$literalExpectation(">=", false);
  var peg$e54 = peg$literalExpectation("+", false);
  var peg$e55 = peg$literalExpectation("-", false);
  var peg$e56 = peg$literalExpectation("*", false);
  var peg$e57 = peg$literalExpectation("/", false);
  var peg$e58 = peg$literalExpectation("%", false);
  var peg$e59 = peg$literalExpectation("&&", false);
  var peg$e60 = peg$literalExpectation("||", false);
  var peg$e61 = peg$literalExpectation("true", false);
  var peg$e62 = peg$literalExpectation("false", false);
  var peg$e63 = peg$classExpectation([["1", "9"]], false, false);
  var peg$e64 = peg$classExpectation([["0", "9"]], false, false);
  var peg$e65 = peg$literalExpectation("0x", false);
  var peg$e66 = peg$classExpectation([["0", "9"], ["a", "f"], ["A", "F"]], false, false);
  var peg$e67 = peg$literalExpectation("0", false);
  var peg$e68 = peg$classExpectation([["0", "7"]], false, false);
  var peg$e69 = peg$literalExpectation("'", false);
  var peg$e70 = peg$classExpectation(["\"", "\n", "\r", "\""], false, false);
  var peg$e71 = peg$anyExpectation();
  var peg$e72 = peg$literalExpectation("\"", false);
  var peg$e73 = peg$literalExpectation("null", false);
  var peg$e74 = peg$classExpectation(["e", "E"], false, false);
  var peg$e75 = peg$classExpectation(["+", "-"], false, false);
  var peg$e76 = peg$literalExpectation("//", false);
  var peg$e77 = peg$classExpectation(["\n", "\r"], false, false);
  var peg$e78 = peg$literalExpectation("/*", false);
  var peg$e79 = peg$literalExpectation("*/", false);
  var peg$e80 = peg$classExpectation([" ", "\t", "\n", "\r"], false, false);

  var peg$f0 = function(moduleName, statements) { 
  return moduleName ? [moduleName[0]].concat(statements.map(v=>v[0])) : statements.map(v=>v[0])
};
  var peg$f1 = function(name) {
    return { 
      type: "ModuleDeclaration",
      name,
      location: location()
    } 
  };
  var peg$f2 = function(name, members) {
      return { 
        type: "Struct", 
        name, 
        members,
        location: location()
      }
  };
  var peg$f3 = function(dec) {
    return dec; 
  };
  var peg$f4 = function(access, staticSymbol, decorator, params, body) {
      return { 
        type: "Constructor",
        static: staticSymbol,
        decorator, 
        params: params || [], 
        body, 
        access,
        location: location()
      }
    };
  var peg$f5 = function(access, staticSymbol, name, typePart, initPart) {
      return {
        type: "Field",
        access,
        static: staticSymbol,
        name,
        typeInfo: typePart?typePart[2] : null,
        init: initPart? initPart[2] : null,
        location: location()
      }
    };
  var peg$f6 = function(decorator, access, name, params, returnPart, body) {
      return {
        type: "Method",
        decorator,
        access: access,
        name,
        params: params || [],
        returnType: returnPart? returnPart[2] : null,
        body: body,
        location: location()
      }
    };
  var peg$f7 = function(name, superPart, members) {
      return { 
        type: "Class", 
        name, 
        extends: superPart?superPart[2] : null, 
        implements: superPart?(superPart[4]?superPart[4][2]:[]) : [],
        members,
        location: location()
      }
    };
  var peg$f8 = function(dec) {
    return dec;
  };
  var peg$f9 = function(access, decorator, params, argsPart, body) {
      return { 
        type: "Constructor", 
        decorator, 
        params: params || [], 
        superArgs: argsPart? argsPart[2] : [], 
        body: body,
        access,
        location: location()
      }
    };
  var peg$f10 = function(decorator, access, staticSymbol, name, typePart, initPart) {
      return {
        type: "Field",
        decorator,
        access: access,
        static: !!staticSymbol,
        name,
        typeInfo: typePart?typePart[2] : null,
        init: initPart?initPart[2] : null,
        location: location()
      }
    };
  var peg$f11 = function(decorator, access, staticSymbol, name, params, returnPart, body) {
      return {
        type: "Method",
        decorator,
        access: access,
        static: !!staticSymbol,
        name,
        params: params || [],
        returnType: returnPart?returnPart[2] : null,
        body,
        location: location()
      }
    };
  var peg$f12 = function(access, modifier) {
    return {
      type: "GetSetProperty",
      access,
      modifier,
      location: location()
    }
  };
  var peg$f13 = function(name, returnPart, body) {
      return {
        type: "Property",
        kind: "get",
        name,
        returnType: returnPart?returnPart[2] : null,
        body,
        location: location()
      }
    };
  var peg$f14 = function(name, param, paramTypePart, body) {
      return {
        type: "Property",
        kind: "set",
        name,
        paramType:paramTypePart?paramTypePart[2]:null,
        body,
        location: location()
      }
    };
  var peg$f15 = function(name, extendsPart, members) {
      return { 
        type: "Interface", 
        name, 
        members,
        extends: extendsPart?extendsPart[2]:[],
        location: location()
      }
    };
  var peg$f16 = function(dec) {
    return dec;
  };
  var peg$f17 = function(access, name, params, returnPart) {
      return {
        type: "MethodSignature",
        name,
        params: params || [],
        returnType: returnPart?returnPart[2] : null,
        access,
        location: location()
      }
    };
  var peg$f18 = function(access, getset, name, typePart) {
      return {
        type: "PropertySignature",
        name,
        typeInfo: typePart?typePart[2] : null,
        access: access,
        getset,
        location: location()
      }
    };
  var peg$f19 = function() {return "GetSet"};
  var peg$f20 = function() {return "GetSet"};
  var peg$f21 = function() {return "Get"};
  var peg$f22 = function() {return "Set"};
  var peg$f23 = function(access, name, typePart) {
      return {
        type: "FieldDeclaration",
        name,
        type: typePart? typePart[3] : null,
        access,
        location: location()
      }
    };
  var peg$f24 = function(name, baseTypePart, members) {
      return { 
        type: "Enum", 
        name, 
        baseType: baseTypePart?baseTypePart[2]:null, 
        members,
        location: location()
      }
    };
  var peg$f25 = function(key, valuePart) {
      return { 
        key: key, 
        value: valuePart?valuePart[2] : null,
        location: location()
      }
    };
  var peg$f26 = function(dec) {
    // Block 本身也是语句（如 if 的 then 块） 
    return dec;
  };
  var peg$f27 = function(expr) { 
    return { 
      type: "ExpressionStatement", 
      expr,
      location: location()
    } 
  };
  var peg$f28 = function(pattern, typePart, value) { 
      return { 
        type: "VariableDeclaration", 
        pattern, 
        value,
        typeInfo: typePart? typePart[3] : null,
        location: location()
      } 
    };
  var peg$f29 = function(expr) {
    return {
      type: "ReturnStatement",
      expr,
      location: location()
    }
  };
  var peg$f30 = function(ctrl) {
    return ctrl;
  };
  var peg$f31 = function(cond, thenBlock, elseBlock) {
      return {
        type: "IfStatement",
        condition: cond,
        then: thenBlock,
        else: elseBlock ? elseBlock[3] : null,
        location: location()
      }
    };
  var peg$f32 = function(expr, cases, defaultCase) {
      return {
        type: "SwitchStatement",
        expr,
        cases,
        default: defaultCase,
        location: location()
      }
    };
  var peg$f33 = function(value, block) { 
    return { 
      type: "Case", 
      value, 
      block,
      location: location() 
    } 
  };
  var peg$f34 = function(block) { 
    return { 
      type: "DefaultCase", 
      block,
      location: location()
    } 
  };
  var peg$f35 = function(cond, block) {
    return {
      type: "WhileLoop",
      cond,
      block,
      location: location()
    }
  };
  var peg$f36 = function(init, cond, step, block) {
    return {
      type: "ForLoop",
      init,
      cond,
      step,
      block,
      location: location()
    }
  };
  var peg$f37 = function(pattern, typePart, expr, block) {
    return {
      type:"ForeachLoop",
      pattern,
      typeInfo: typePart? typePart[3] : null,
      expr,
      block,
      location: location()
    }
  };
  var peg$f38 = function(statements) { 
      return { 
        type: "Block", 
        body: statements.filter(s => s !== null), // 过滤空白和注释
        location: location()
      } 
    };
  var peg$f39 = function(left, op, right) { 
    return { 
      type: "Assignment", 
      op, 
      left, 
      right,
      location: location(),
    } 
  };
  var peg$f40 = function(test, consequent, alternate) { 
    return { 
      type: "Conditional", 
      test, 
      consequent, 
      alternate,
      location: location()
    } 
  };
  var peg$f41 = function(left, parts) { 
    return parts.reduce((acc, [,,,right]) => ({ 
      type: "Logical", 
      op: "||", 
      left: acc, 
      right, 
      location: location()
    }), left) 
  };
  var peg$f42 = function(left, parts) { 
    return parts.reduce((acc, [,,,right]) => ({ 
      type: "Logical", 
      op: "&&", 
      left: acc, 
      right,
      location: location()
    }), left) 
  };
  var peg$f43 = function(left, parts) { 
    return parts.reduce((acc, [,op,,right]) => ({ 
      type: "Binary", 
      op, 
      left: acc, 
      right,
      location: location()
    }), left) 
  };
  var peg$f44 = function(left, parts) { 
    return parts.reduce((acc, [,op,,right]) => ({ 
      type: "Binary", 
      op, 
      left: acc, 
      right,
      location: location()
    }), left) 
  };
  var peg$f45 = function(left, parts) { 
    return parts.reduce((acc, [,op,,right]) => ({ 
      type: "Binary", 
      op, 
      left: acc, 
      right,
      location: location() 
    }), left) 
  };
  var peg$f46 = function(left, parts) { 
    return parts.reduce((acc, [,op,,right]) => ({ 
      type: "Binary", 
      op, 
      left: acc, 
      right,
      location: location()
    }), left) 
  };
  var peg$f47 = function(op, argument) { 
    return { 
      type: "Unary", 
      op, 
      argument,
      location: location()
    } 
  };
  var peg$f48 = function(property, member) {
    return {
      type: "PrimaryExpression",
      property,
      member,
      location: location()
    }
  };
  var peg$f49 = function(property) { 
    return { 
      type: "MemberExpression", 
      property, 
      computed: false,
      location: location()
    } 
  };
  var peg$f50 = function(property) { 
    return { 
      type: "MemberExpression", 
      property, 
      computed: true,
      location: location(), 
    } 
  };
  var peg$f51 = function(value) {return {type: "Literal", value, location: location()}};
  var peg$f52 = function(expr) { return expr };
  var peg$f53 = function(elements) { 
    return { 
      type: 'Array', 
      elements: elements? ([elements[0], ...(elements[1]?elements[1].map(v=>v[3]):[])]) :[], 
      location: location()
    } 
  };
  var peg$f54 = function(pairs) { 
      return { 
        type: "Object", 
        properties: pairs ? [pairs[0], ...(pairs[1]?pairs[1].map(v=>v[3]):[])] : [],
        location: location() 
      } 
    };
  var peg$f55 = function(key, value) {
      return { 
        key, 
        value,
        location: location(),
      }
    };
  var peg$f56 = function(expr) { return expr };
  var peg$f57 = function(condition, thenExpr) {
      return {
        type: "IfExpression",
        condition,
        then: thenExpr,
        else: elseExpr ? elseExpr[1] : null,
        location: location()
      }
    };
  var peg$f58 = function(expr, cases, defaultCase) {
      return {
        type: "Switch",
        expr,
        cases,
        default: defaultCase,
        location: location()
      }
    };
  var peg$f59 = function(name, params, returnPart, block) {
    return {
      type: "FunctionDeclaration",
      name,
      params,
      returns: returnPart? returnPart[2] : null,
      block,
      location: location
    }
  };
  var peg$f60 = function(callee, args) {
    return {
      type: "FunctionCall",
      callee,
      args,
      location: location()
    }
  };
  var peg$f61 = function(name, params) {
  return{
    type: "GenericType",
    name,
    params,
    location: location()
  }
};
  var peg$f62 = function(types) {
  return{
    type: "TupleType",
    types,
    location: location()
  }
};
  var peg$f63 = function(name, dimensions) {
  return{
    type: "ArrayType",
    name,
    dimensions: dimensions.length,
    location: location()
  }
};
  var peg$f64 = function(name, type) { 
    return { 
      name, 
      type,
      location: location(),
    } 
  };
  var peg$f65 = function(head, tail) { 
      return [head].concat(tail.map(t => t[2])) 
    };
  var peg$f66 = function(head, tail) {
    return [head].concat(tail.map(t => t[2])) 
  };
  var peg$f67 = function(head, tail) {
    return [head].concat(tail.map(t => t[2])) 
  };
  var peg$f68 = function(name) {
  return {
    type: "Decorator",
    name,
    location: location()
  }
};
  var peg$f69 = function(keys) { 
    return {
      type: "Destructuring",
      keys,
      location: location()
    } 
  };
  var peg$f70 = function(keys) { 
    return {
      type: "DestructuringArray",
      keys,
      location: location()
    } 
  };
  var peg$f71 = function(head, tail) { 
    return [head].concat(tail.map(t => t[2])) 
  };
  var peg$f72 = function() { return text() };
  var peg$f73 = function() {
  return {
    type: "Boolean",
    value: text() == "true",
    location: location()
  }
};
  var peg$f74 = function() {
  return {
    type: "Integer",
    value: parseInt(text(), 10),
    location: location()
  }
};
  var peg$f75 = function() {
  return {
    type: "Integer",
    value: parseInt(text(), 16),
    location: location()
  }
};
  var peg$f76 = function() {
  return {
    type: "Integer",
    value: parseInt(text(), 8),
    location: location()
  }
};
  var peg$f77 = function(ch) {
  return {
    type:"Char",
    value:ch? ch[1]: '',
    location: location()
  }
};
  var peg$f78 = function(str) {
  return{ 
    type: "String",
    value: str? str.map(v=>v[1]).join('') : '',
    location: location()
  }
};
  var peg$f79 = function() {
  return {
    type: "Null",
    location: location()
  }
};
  var peg$f80 = function() {
  return {
    type:"Float",
    value:parseFloat(text()),
    location: location()
  };
};
  var peg$f81 = function() {
  return undefined;
};
  var peg$currPos = 0;
  var peg$savedPos = 0;
  var peg$posDetailsCache = [{ line: 1, column: 1 }];
  var peg$maxFailPos = 0;
  var peg$maxFailExpected = [];
  var peg$silentFails = 0;

  var peg$result;

  if ("startRule" in options) {
    if (!(options.startRule in peg$startRuleFunctions)) {
      throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
    }

    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
  }

  function text() {
    return input.substring(peg$savedPos, peg$currPos);
  }

  function offset() {
    return peg$savedPos;
  }

  function range() {
    return {
      source: peg$source,
      start: peg$savedPos,
      end: peg$currPos
    };
  }

  function location() {
    return peg$computeLocation(peg$savedPos, peg$currPos);
  }

  function expected(description, location) {
    location = location !== undefined
      ? location
      : peg$computeLocation(peg$savedPos, peg$currPos);

    throw peg$buildStructuredError(
      [peg$otherExpectation(description)],
      input.substring(peg$savedPos, peg$currPos),
      location
    );
  }

  function error(message, location) {
    location = location !== undefined
      ? location
      : peg$computeLocation(peg$savedPos, peg$currPos);

    throw peg$buildSimpleError(message, location);
  }

  function peg$literalExpectation(text, ignoreCase) {
    return { type: "literal", text: text, ignoreCase: ignoreCase };
  }

  function peg$classExpectation(parts, inverted, ignoreCase) {
    return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
  }

  function peg$anyExpectation() {
    return { type: "any" };
  }

  function peg$endExpectation() {
    return { type: "end" };
  }

  function peg$otherExpectation(description) {
    return { type: "other", description: description };
  }

  function peg$computePosDetails(pos) {
    var details = peg$posDetailsCache[pos];
    var p;

    if (details) {
      return details;
    } else {
      p = pos - 1;
      while (!peg$posDetailsCache[p]) {
        p--;
      }

      details = peg$posDetailsCache[p];
      details = {
        line: details.line,
        column: details.column
      };

      while (p < pos) {
        if (input.charCodeAt(p) === 10) {
          details.line++;
          details.column = 1;
        } else {
          details.column++;
        }

        p++;
      }

      peg$posDetailsCache[pos] = details;

      return details;
    }
  }

  function peg$computeLocation(startPos, endPos, offset) {
    var startPosDetails = peg$computePosDetails(startPos);
    var endPosDetails = peg$computePosDetails(endPos);

    var res = {
      source: peg$source,
      start: {
        offset: startPos,
        line: startPosDetails.line,
        column: startPosDetails.column
      },
      end: {
        offset: endPos,
        line: endPosDetails.line,
        column: endPosDetails.column
      }
    };
    if (offset && peg$source && (typeof peg$source.offset === "function")) {
      res.start = peg$source.offset(res.start);
      res.end = peg$source.offset(res.end);
    }
    return res;
  }

  function peg$fail(expected) {
    if (peg$currPos < peg$maxFailPos) { return; }

    if (peg$currPos > peg$maxFailPos) {
      peg$maxFailPos = peg$currPos;
      peg$maxFailExpected = [];
    }

    peg$maxFailExpected.push(expected);
  }

  function peg$buildSimpleError(message, location) {
    return new peg$SyntaxError(message, null, null, location);
  }

  function peg$buildStructuredError(expected, found, location) {
    return new peg$SyntaxError(
      peg$SyntaxError.buildMessage(expected, found),
      expected,
      found,
      location
    );
  }

  function peg$parsestart() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = peg$parse_();
    s2 = peg$currPos;
    s3 = peg$parseModuleDeclaration();
    if (s3 !== peg$FAILED) {
      s4 = peg$parse_();
      s3 = [s3, s4];
      s2 = s3;
    } else {
      peg$currPos = s2;
      s2 = peg$FAILED;
    }
    if (s2 === peg$FAILED) {
      s2 = null;
    }
    s3 = [];
    s4 = peg$currPos;
    s5 = peg$parseTopLevelStatement();
    if (s5 !== peg$FAILED) {
      s6 = peg$parse_();
      s5 = [s5, s6];
      s4 = s5;
    } else {
      peg$currPos = s4;
      s4 = peg$FAILED;
    }
    while (s4 !== peg$FAILED) {
      s3.push(s4);
      s4 = peg$currPos;
      s5 = peg$parseTopLevelStatement();
      if (s5 !== peg$FAILED) {
        s6 = peg$parse_();
        s5 = [s5, s6];
        s4 = s5;
      } else {
        peg$currPos = s4;
        s4 = peg$FAILED;
      }
    }
    peg$savedPos = s0;
    s0 = peg$f0(s2, s3);

    return s0;
  }

  function peg$parseTopLevelStatement() {
    var s0;

    s0 = peg$parseStructDeclaration();
    if (s0 === peg$FAILED) {
      s0 = peg$parseClassDeclaration();
      if (s0 === peg$FAILED) {
        s0 = peg$parseEnumDeclaration();
        if (s0 === peg$FAILED) {
          s0 = peg$parseInterfaceDeclaration();
          if (s0 === peg$FAILED) {
            s0 = peg$parseVariableDeclaration();
            if (s0 === peg$FAILED) {
              s0 = peg$parseFunctionDeclaration();
              if (s0 === peg$FAILED) {
                s0 = peg$parseExpressionStatement();
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseModuleDeclaration() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseMODULE();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseIDENTIFIER();
      if (s3 === peg$FAILED) {
        s3 = peg$parseSTRING();
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parseSEMICOLON();
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f1(s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseStructDeclaration() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    s0 = peg$currPos;
    s1 = peg$parseSTRUCT();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseIDENTIFIER();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parseLBRACE();
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s7 = [];
          s8 = peg$parseStructMember();
          while (s8 !== peg$FAILED) {
            s7.push(s8);
            s8 = peg$parseStructMember();
          }
          s8 = peg$parse_();
          s9 = peg$parseRBRACE();
          if (s9 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f2(s3, s7);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseStructMember() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parse_();
    s2 = peg$parseVarDeclaration();
    if (s2 === peg$FAILED) {
      s2 = peg$parseStructMethod();
      if (s2 === peg$FAILED) {
        s2 = peg$parseStructConstructor();
      }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      peg$savedPos = s0;
      s0 = peg$f3(s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseStructConstructor() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

    s0 = peg$currPos;
    s1 = peg$parseAccessModifier();
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    s2 = peg$parse_();
    s3 = peg$parseSTATIC();
    if (s3 === peg$FAILED) {
      s3 = null;
    }
    s4 = peg$parse_();
    s5 = peg$parseDecoratorIdentifier();
    if (s5 !== peg$FAILED) {
      s6 = peg$parse_();
      s7 = peg$parseLPAREN();
      if (s7 !== peg$FAILED) {
        s8 = peg$parseParameterList();
        if (s8 === peg$FAILED) {
          s8 = null;
        }
        s9 = peg$parseRPAREN();
        if (s9 !== peg$FAILED) {
          s10 = peg$parse_();
          s11 = peg$parseBlock();
          if (s11 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f4(s1, s3, s5, s8, s11);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseVarDeclaration() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14;

    s0 = peg$currPos;
    s1 = peg$parseAccessModifier();
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    s2 = peg$parse_();
    s3 = peg$parseSTATIC();
    if (s3 === peg$FAILED) {
      s3 = null;
    }
    s4 = peg$parse_();
    s5 = peg$parseVAR();
    if (s5 !== peg$FAILED) {
      s6 = peg$parse_();
      s7 = peg$parseIDENTIFIER();
      if (s7 !== peg$FAILED) {
        s8 = peg$parse_();
        s9 = peg$currPos;
        s10 = peg$parseCOLON();
        if (s10 !== peg$FAILED) {
          s11 = peg$parse_();
          s12 = peg$parseType();
          if (s12 !== peg$FAILED) {
            s10 = [s10, s11, s12];
            s9 = s10;
          } else {
            peg$currPos = s9;
            s9 = peg$FAILED;
          }
        } else {
          peg$currPos = s9;
          s9 = peg$FAILED;
        }
        if (s9 === peg$FAILED) {
          s9 = null;
        }
        s10 = peg$parse_();
        s11 = peg$currPos;
        s12 = peg$parseEQUALS();
        if (s12 !== peg$FAILED) {
          s13 = peg$parse_();
          s14 = peg$parseAssignmentExpression();
          if (s14 !== peg$FAILED) {
            s12 = [s12, s13, s14];
            s11 = s12;
          } else {
            peg$currPos = s11;
            s11 = peg$FAILED;
          }
        } else {
          peg$currPos = s11;
          s11 = peg$FAILED;
        }
        if (s11 === peg$FAILED) {
          s11 = null;
        }
        s12 = peg$parse_();
        s13 = peg$parseSEMICOLON();
        if (s13 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f5(s1, s3, s7, s9, s11);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseStructMethod() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14;

    s0 = peg$currPos;
    s1 = peg$parseDecoratorIdentifier();
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    s2 = peg$parse_();
    s3 = peg$parseAccessModifier();
    if (s3 === peg$FAILED) {
      s3 = null;
    }
    s4 = peg$parse_();
    s5 = peg$parseIDENTIFIER();
    if (s5 !== peg$FAILED) {
      s6 = peg$parse_();
      s7 = peg$parseLPAREN();
      if (s7 !== peg$FAILED) {
        s8 = peg$parseParameterList();
        if (s8 === peg$FAILED) {
          s8 = null;
        }
        s9 = peg$parseRPAREN();
        if (s9 !== peg$FAILED) {
          s10 = peg$parse_();
          s11 = peg$currPos;
          s12 = peg$parseCOLON();
          if (s12 !== peg$FAILED) {
            s13 = peg$parse_();
            s14 = peg$parseType();
            if (s14 !== peg$FAILED) {
              s12 = [s12, s13, s14];
              s11 = s12;
            } else {
              peg$currPos = s11;
              s11 = peg$FAILED;
            }
          } else {
            peg$currPos = s11;
            s11 = peg$FAILED;
          }
          if (s11 === peg$FAILED) {
            s11 = null;
          }
          s12 = peg$parse_();
          s13 = peg$parseBlock();
          if (s13 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f6(s1, s3, s5, s8, s11, s13);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseClassDeclaration() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;

    s0 = peg$currPos;
    s1 = peg$parseCLASS();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseIDENTIFIER();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$currPos;
        s6 = peg$parseCOLON();
        if (s6 !== peg$FAILED) {
          s7 = peg$parse_();
          s8 = peg$parseType();
          if (s8 !== peg$FAILED) {
            s9 = peg$parse_();
            s10 = peg$currPos;
            s11 = peg$parseCOMMA();
            if (s11 !== peg$FAILED) {
              s12 = peg$parse_();
              s13 = peg$parseTypeList();
              if (s13 !== peg$FAILED) {
                s11 = [s11, s12, s13];
                s10 = s11;
              } else {
                peg$currPos = s10;
                s10 = peg$FAILED;
              }
            } else {
              peg$currPos = s10;
              s10 = peg$FAILED;
            }
            if (s10 === peg$FAILED) {
              s10 = null;
            }
            s6 = [s6, s7, s8, s9, s10];
            s5 = s6;
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
        } else {
          peg$currPos = s5;
          s5 = peg$FAILED;
        }
        if (s5 === peg$FAILED) {
          s5 = null;
        }
        s6 = peg$parseLBRACE();
        if (s6 !== peg$FAILED) {
          s7 = peg$parse_();
          s8 = [];
          s9 = peg$parseClassMember();
          while (s9 !== peg$FAILED) {
            s8.push(s9);
            s9 = peg$parseClassMember();
          }
          s9 = peg$parse_();
          s10 = peg$parseRBRACE();
          if (s10 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f7(s3, s5, s8);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseClassMember() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parse_();
    s2 = peg$parseMethod();
    if (s2 === peg$FAILED) {
      s2 = peg$parseProperty();
      if (s2 === peg$FAILED) {
        s2 = peg$parseConstructor();
        if (s2 === peg$FAILED) {
          s2 = peg$parseField();
        }
      }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      peg$savedPos = s0;
      s0 = peg$f8(s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseConstructor() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;

    s0 = peg$currPos;
    s1 = peg$parseAccessModifier();
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    s2 = peg$parse_();
    s3 = peg$parseDecoratorIdentifier();
    if (s3 !== peg$FAILED) {
      s4 = peg$parse_();
      s5 = peg$parseLPAREN();
      if (s5 !== peg$FAILED) {
        s6 = peg$parseParameterList();
        if (s6 === peg$FAILED) {
          s6 = null;
        }
        s7 = peg$parseRPAREN();
        if (s7 !== peg$FAILED) {
          s8 = peg$parse_();
          s9 = peg$currPos;
          s10 = peg$parseSUPER();
          if (s10 !== peg$FAILED) {
            s11 = peg$parseLPAREN();
            if (s11 !== peg$FAILED) {
              s12 = peg$parseArgumentList();
              if (s12 === peg$FAILED) {
                s12 = null;
              }
              s13 = peg$parseRPAREN();
              if (s13 !== peg$FAILED) {
                s10 = [s10, s11, s12, s13];
                s9 = s10;
              } else {
                peg$currPos = s9;
                s9 = peg$FAILED;
              }
            } else {
              peg$currPos = s9;
              s9 = peg$FAILED;
            }
          } else {
            peg$currPos = s9;
            s9 = peg$FAILED;
          }
          if (s9 === peg$FAILED) {
            s9 = null;
          }
          s10 = peg$parse_();
          s11 = peg$parseBlock();
          if (s11 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f9(s1, s3, s6, s9, s11);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseField() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16;

    s0 = peg$currPos;
    s1 = peg$parseDecoratorIdentifier();
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    s2 = peg$parse_();
    s3 = peg$parseAccessModifier();
    if (s3 === peg$FAILED) {
      s3 = null;
    }
    s4 = peg$parse_();
    s5 = peg$parseSTATIC();
    if (s5 === peg$FAILED) {
      s5 = null;
    }
    s6 = peg$parse_();
    s7 = peg$parseVAR();
    if (s7 !== peg$FAILED) {
      s8 = peg$parse_();
      s9 = peg$parseIDENTIFIER();
      if (s9 !== peg$FAILED) {
        s10 = peg$parse_();
        s11 = peg$currPos;
        s12 = peg$parseCOLON();
        if (s12 !== peg$FAILED) {
          s13 = peg$parse_();
          s14 = peg$parseType();
          if (s14 !== peg$FAILED) {
            s12 = [s12, s13, s14];
            s11 = s12;
          } else {
            peg$currPos = s11;
            s11 = peg$FAILED;
          }
        } else {
          peg$currPos = s11;
          s11 = peg$FAILED;
        }
        if (s11 === peg$FAILED) {
          s11 = null;
        }
        s12 = peg$parse_();
        s13 = peg$currPos;
        s14 = peg$parseEQUALS();
        if (s14 !== peg$FAILED) {
          s15 = peg$parse_();
          s16 = peg$parseAssignmentExpression();
          if (s16 !== peg$FAILED) {
            s14 = [s14, s15, s16];
            s13 = s14;
          } else {
            peg$currPos = s13;
            s13 = peg$FAILED;
          }
        } else {
          peg$currPos = s13;
          s13 = peg$FAILED;
        }
        if (s13 === peg$FAILED) {
          s13 = null;
        }
        s14 = peg$parse_();
        s15 = peg$parseSEMICOLON();
        if (s15 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f10(s1, s3, s5, s9, s11, s13);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseMethod() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16;

    s0 = peg$currPos;
    s1 = peg$parseDecoratorIdentifier();
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    s2 = peg$parse_();
    s3 = peg$parseAccessModifier();
    if (s3 === peg$FAILED) {
      s3 = null;
    }
    s4 = peg$parse_();
    s5 = peg$parseSTATIC();
    if (s5 === peg$FAILED) {
      s5 = null;
    }
    s6 = peg$parse_();
    s7 = peg$parseIDENTIFIER();
    if (s7 !== peg$FAILED) {
      s8 = peg$parse_();
      s9 = peg$parseLPAREN();
      if (s9 !== peg$FAILED) {
        s10 = peg$parseParameterList();
        if (s10 === peg$FAILED) {
          s10 = null;
        }
        s11 = peg$parseRPAREN();
        if (s11 !== peg$FAILED) {
          s12 = peg$parse_();
          s13 = peg$currPos;
          s14 = peg$parseCOLON();
          if (s14 !== peg$FAILED) {
            s15 = peg$parse_();
            s16 = peg$parseType();
            if (s16 !== peg$FAILED) {
              s14 = [s14, s15, s16];
              s13 = s14;
            } else {
              peg$currPos = s13;
              s13 = peg$FAILED;
            }
          } else {
            peg$currPos = s13;
            s13 = peg$FAILED;
          }
          if (s13 === peg$FAILED) {
            s13 = null;
          }
          s14 = peg$parse_();
          s15 = peg$parseBlock();
          if (s15 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f11(s1, s3, s5, s7, s10, s13, s15);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseProperty() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseAccessModifier();
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    s2 = peg$parse_();
    s3 = peg$parseGetProperty();
    if (s3 === peg$FAILED) {
      s3 = peg$parseSetProperty();
    }
    if (s3 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f12(s1, s3);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseGetProperty() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

    s0 = peg$currPos;
    s1 = peg$parseGET();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseIDENTIFIER();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$currPos;
        s6 = peg$parseCOLON();
        if (s6 !== peg$FAILED) {
          s7 = peg$parse_();
          s8 = peg$parseType();
          if (s8 !== peg$FAILED) {
            s6 = [s6, s7, s8];
            s5 = s6;
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
        } else {
          peg$currPos = s5;
          s5 = peg$FAILED;
        }
        if (s5 === peg$FAILED) {
          s5 = null;
        }
        s6 = peg$parse_();
        s7 = peg$parseBlock();
        if (s7 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f13(s3, s5, s7);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseSetProperty() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;

    s0 = peg$currPos;
    s1 = peg$parseSET();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseIDENTIFIER();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parseLPAREN();
        if (s5 !== peg$FAILED) {
          s6 = peg$parseIDENTIFIER();
          if (s6 !== peg$FAILED) {
            s7 = peg$parse_();
            s8 = peg$currPos;
            s9 = peg$parseCOLON();
            if (s9 !== peg$FAILED) {
              s10 = peg$parse_();
              s11 = peg$parseType();
              if (s11 !== peg$FAILED) {
                s12 = peg$parse_();
                s9 = [s9, s10, s11, s12];
                s8 = s9;
              } else {
                peg$currPos = s8;
                s8 = peg$FAILED;
              }
            } else {
              peg$currPos = s8;
              s8 = peg$FAILED;
            }
            if (s8 !== peg$FAILED) {
              s9 = peg$parseRPAREN();
              if (s9 !== peg$FAILED) {
                s10 = peg$parse_();
                s11 = peg$parseBlock();
                if (s11 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s0 = peg$f14(s3, s6, s8, s11);
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseInterfaceDeclaration() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

    s0 = peg$currPos;
    s1 = peg$parseINTERFACE();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseIDENTIFIER();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$currPos;
        s6 = peg$parseCOLON();
        if (s6 !== peg$FAILED) {
          s7 = peg$parse_();
          s8 = peg$parseTypeList();
          if (s8 !== peg$FAILED) {
            s6 = [s6, s7, s8];
            s5 = s6;
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
        } else {
          peg$currPos = s5;
          s5 = peg$FAILED;
        }
        if (s5 === peg$FAILED) {
          s5 = null;
        }
        s6 = peg$parse_();
        s7 = peg$parseLBRACE();
        if (s7 !== peg$FAILED) {
          s8 = peg$parse_();
          s9 = [];
          s10 = peg$parseInterfaceMember();
          while (s10 !== peg$FAILED) {
            s9.push(s10);
            s10 = peg$parseInterfaceMember();
          }
          s10 = peg$parse_();
          s11 = peg$parseRBRACE();
          if (s11 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f15(s3, s5, s9);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseInterfaceMember() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parse_();
    s2 = peg$parseMethodSignature();
    if (s2 === peg$FAILED) {
      s2 = peg$parsePropertySignature();
      if (s2 === peg$FAILED) {
        s2 = peg$parseFieldDeclaration();
      }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      peg$savedPos = s0;
      s0 = peg$f16(s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseMethodSignature() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;

    s0 = peg$currPos;
    s1 = peg$parseAccessModifier();
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    s2 = peg$parse_();
    s3 = peg$parseIDENTIFIER();
    if (s3 !== peg$FAILED) {
      s4 = peg$parse_();
      s5 = peg$parseLPAREN();
      if (s5 !== peg$FAILED) {
        s6 = peg$parseParameterList();
        if (s6 === peg$FAILED) {
          s6 = null;
        }
        s7 = peg$parseRPAREN();
        if (s7 !== peg$FAILED) {
          s8 = peg$parse_();
          s9 = peg$currPos;
          s10 = peg$parseCOLON();
          if (s10 !== peg$FAILED) {
            s11 = peg$parse_();
            s12 = peg$parseType();
            if (s12 !== peg$FAILED) {
              s10 = [s10, s11, s12];
              s9 = s10;
            } else {
              peg$currPos = s9;
              s9 = peg$FAILED;
            }
          } else {
            peg$currPos = s9;
            s9 = peg$FAILED;
          }
          if (s9 === peg$FAILED) {
            s9 = null;
          }
          s10 = peg$parse_();
          s11 = peg$parseSEMICOLON();
          if (s11 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f17(s1, s3, s6, s9);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsePropertySignature() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

    s0 = peg$currPos;
    s1 = peg$parseAccessModifier();
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    s2 = peg$parse_();
    s3 = peg$parseGetSetModifier();
    if (s3 === peg$FAILED) {
      s3 = null;
    }
    s4 = peg$parse_();
    s5 = peg$parseIDENTIFIER();
    if (s5 !== peg$FAILED) {
      s6 = peg$parse_();
      s7 = peg$currPos;
      s8 = peg$parseCOLON();
      if (s8 !== peg$FAILED) {
        s9 = peg$parse_();
        s10 = peg$parseType();
        if (s10 !== peg$FAILED) {
          s8 = [s8, s9, s10];
          s7 = s8;
        } else {
          peg$currPos = s7;
          s7 = peg$FAILED;
        }
      } else {
        peg$currPos = s7;
        s7 = peg$FAILED;
      }
      if (s7 === peg$FAILED) {
        s7 = null;
      }
      s8 = peg$parse_();
      s9 = peg$parseSEMICOLON();
      if (s9 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f18(s1, s3, s5, s7);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseGetSetModifier() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseGET();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseSET();
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f19();
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseSET();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        s3 = peg$parseGET();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f20();
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseGET();
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$f21();
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseSET();
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$f22();
          }
          s0 = s1;
        }
      }
    }

    return s0;
  }

  function peg$parseFieldDeclaration() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

    s0 = peg$currPos;
    s1 = peg$parseAccessModifier();
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    s2 = peg$parse_();
    s3 = peg$parseVAR();
    if (s3 !== peg$FAILED) {
      s4 = peg$parse_();
      s5 = peg$parseIDENTIFIER();
      if (s5 !== peg$FAILED) {
        s6 = peg$currPos;
        s7 = peg$parse_();
        s8 = peg$parseCOLON();
        if (s8 !== peg$FAILED) {
          s9 = peg$parse_();
          s10 = peg$parseType();
          if (s10 !== peg$FAILED) {
            s7 = [s7, s8, s9, s10];
            s6 = s7;
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
        } else {
          peg$currPos = s6;
          s6 = peg$FAILED;
        }
        if (s6 === peg$FAILED) {
          s6 = null;
        }
        s7 = peg$parse_();
        s8 = peg$parseSEMICOLON();
        if (s8 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f23(s1, s5, s6);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseEnumDeclaration() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

    s0 = peg$currPos;
    s1 = peg$parseENUM();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseIDENTIFIER();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$currPos;
        s6 = peg$parseCOLON();
        if (s6 !== peg$FAILED) {
          s7 = peg$parse_();
          s8 = peg$parseType();
          if (s8 !== peg$FAILED) {
            s6 = [s6, s7, s8];
            s5 = s6;
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
        } else {
          peg$currPos = s5;
          s5 = peg$FAILED;
        }
        if (s5 === peg$FAILED) {
          s5 = null;
        }
        s6 = peg$parse_();
        s7 = peg$parseLBRACE();
        if (s7 !== peg$FAILED) {
          s8 = peg$parse_();
          s9 = [];
          s10 = peg$parseEnumMember();
          if (s10 !== peg$FAILED) {
            while (s10 !== peg$FAILED) {
              s9.push(s10);
              s10 = peg$parseEnumMember();
            }
          } else {
            s9 = peg$FAILED;
          }
          if (s9 !== peg$FAILED) {
            s10 = peg$parse_();
            s11 = peg$parseRBRACE();
            if (s11 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f24(s3, s5, s9);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseEnumMember() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parse_();
    s2 = peg$parseIDENTIFIER();
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      s4 = peg$currPos;
      s5 = peg$parseEQUALS();
      if (s5 !== peg$FAILED) {
        s6 = peg$parse_();
        s7 = peg$parseAssignmentExpression();
        if (s7 !== peg$FAILED) {
          s5 = [s5, s6, s7];
          s4 = s5;
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
      } else {
        peg$currPos = s4;
        s4 = peg$FAILED;
      }
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s5 = peg$parse_();
      s6 = peg$parseCOMMA();
      if (s6 === peg$FAILED) {
        s6 = peg$parseSEMICOLON();
      }
      if (s6 === peg$FAILED) {
        s6 = null;
      }
      s7 = peg$parse_();
      peg$savedPos = s0;
      s0 = peg$f25(s2, s4);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseStatement() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parse_();
    s2 = peg$parseExpressionStatement();
    if (s2 === peg$FAILED) {
      s2 = peg$parseVariableDeclaration();
      if (s2 === peg$FAILED) {
        s2 = peg$parseControlStatement();
        if (s2 === peg$FAILED) {
          s2 = peg$parseReturnStatement();
          if (s2 === peg$FAILED) {
            s2 = peg$parseBreakContinueStatement();
            if (s2 === peg$FAILED) {
              s2 = peg$parseBlock();
            }
          }
        }
      }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      peg$savedPos = s0;
      s0 = peg$f26(s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseExpressionStatement() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseAssignmentExpression();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseSEMICOLON();
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f27(s1);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseVariableDeclaration() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

    s0 = peg$currPos;
    s1 = peg$parseVAR();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseDestructuringPattern();
      if (s3 === peg$FAILED) {
        s3 = peg$parseDestructuringArrayPattern();
        if (s3 === peg$FAILED) {
          s3 = peg$parseIDENTIFIER();
        }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$currPos;
        s5 = peg$parse_();
        s6 = peg$parseCOLON();
        if (s6 !== peg$FAILED) {
          s7 = peg$parse_();
          s8 = peg$parseType();
          if (s8 !== peg$FAILED) {
            s5 = [s5, s6, s7, s8];
            s4 = s5;
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        s5 = peg$parse_();
        s6 = peg$parseEQUALS();
        if (s6 !== peg$FAILED) {
          s7 = peg$parse_();
          s8 = peg$parseAssignmentExpression();
          if (s8 !== peg$FAILED) {
            s9 = peg$parse_();
            s10 = peg$parseSEMICOLON();
            if (s10 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f28(s3, s4, s8);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseControlStatement() {
    var s0;

    s0 = peg$parseIfStatement();
    if (s0 === peg$FAILED) {
      s0 = peg$parseSwitchStatement();
      if (s0 === peg$FAILED) {
        s0 = peg$parseLoopStatement();
        if (s0 === peg$FAILED) {
          s0 = peg$parseReturnStatement();
          if (s0 === peg$FAILED) {
            s0 = peg$parseBreakContinueStatement();
          }
        }
      }
    }

    return s0;
  }

  function peg$parseReturnStatement() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseRETURN();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseAssignmentExpression();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parse_();
      s5 = peg$parseSEMICOLON();
      if (s5 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f29(s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseBreakContinueStatement() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseBREAK();
    if (s1 === peg$FAILED) {
      s1 = peg$parseCONTINUE();
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseSEMICOLON();
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f30(s1);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseIfStatement() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14;

    s0 = peg$currPos;
    s1 = peg$parseIF();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseLPAREN();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parseAssignmentExpression();
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s7 = peg$parseRPAREN();
          if (s7 !== peg$FAILED) {
            s8 = peg$parse_();
            s9 = peg$parseBlock();
            if (s9 !== peg$FAILED) {
              s10 = peg$currPos;
              s11 = peg$parse_();
              s12 = peg$parseELSE();
              if (s12 !== peg$FAILED) {
                s13 = peg$parse_();
                s14 = peg$parseBlock();
                if (s14 === peg$FAILED) {
                  s14 = peg$parseIfStatement();
                }
                if (s14 !== peg$FAILED) {
                  s11 = [s11, s12, s13, s14];
                  s10 = s11;
                } else {
                  peg$currPos = s10;
                  s10 = peg$FAILED;
                }
              } else {
                peg$currPos = s10;
                s10 = peg$FAILED;
              }
              if (s10 === peg$FAILED) {
                s10 = null;
              }
              peg$savedPos = s0;
              s0 = peg$f31(s5, s9, s10);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseSwitchStatement() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;

    s0 = peg$currPos;
    s1 = peg$parseSWITCH();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseLPAREN();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parseAssignmentExpression();
        if (s5 === peg$FAILED) {
          s5 = null;
        }
        s6 = peg$parse_();
        s7 = peg$parseRPAREN();
        if (s7 !== peg$FAILED) {
          s8 = peg$parse_();
          s9 = peg$parseLBRACE();
          if (s9 !== peg$FAILED) {
            s10 = [];
            s11 = peg$parseSwitchCase();
            while (s11 !== peg$FAILED) {
              s10.push(s11);
              s11 = peg$parseSwitchCase();
            }
            s11 = peg$parseSwitchDefault();
            if (s11 === peg$FAILED) {
              s11 = null;
            }
            s12 = peg$parse_();
            s13 = peg$parseRBRACE();
            if (s13 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f32(s5, s10, s11);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseSwitchCase() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    s0 = peg$currPos;
    s1 = peg$parse_();
    s2 = peg$parseLPAREN();
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      s4 = peg$parseAssignmentExpression();
      if (s4 !== peg$FAILED) {
        s5 = peg$parse_();
        s6 = peg$parseRPAREN();
        if (s6 !== peg$FAILED) {
          s7 = peg$parse_();
          s8 = peg$parseBlock();
          if (s8 !== peg$FAILED) {
            s9 = peg$parse_();
            peg$savedPos = s0;
            s0 = peg$f33(s4, s8);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseSwitchDefault() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parse_();
    s2 = peg$parseLPAREN();
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      s4 = peg$parseRPAREN();
      if (s4 !== peg$FAILED) {
        s5 = peg$parse_();
        s6 = peg$parseBlock();
        if (s6 !== peg$FAILED) {
          s7 = peg$parse_();
          peg$savedPos = s0;
          s0 = peg$f34(s6);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseLoopStatement() {
    var s0;

    s0 = peg$parseWhileLoop();
    if (s0 === peg$FAILED) {
      s0 = peg$parseForeachLoop();
      if (s0 === peg$FAILED) {
        s0 = peg$parseForLoop();
      }
    }

    return s0;
  }

  function peg$parseWhileLoop() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    s0 = peg$currPos;
    s1 = peg$parseWHILE();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseLPAREN();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parseAssignmentExpression();
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s7 = peg$parseRPAREN();
          if (s7 !== peg$FAILED) {
            s8 = peg$parse_();
            s9 = peg$parseBlock();
            if (s9 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f35(s5, s9);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseForLoop() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;

    s0 = peg$currPos;
    s1 = peg$parseFOR();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseLPAREN();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parseVariableDeclaration();
        if (s5 === peg$FAILED) {
          s5 = peg$parseSEMICOLON();
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s7 = peg$parseExpressionStatement();
          if (s7 === peg$FAILED) {
            s7 = peg$parseSEMICOLON();
          }
          if (s7 !== peg$FAILED) {
            s8 = peg$parse_();
            s9 = peg$parseAssignmentExpression();
            if (s9 === peg$FAILED) {
              s9 = null;
            }
            s10 = peg$parse_();
            s11 = peg$parseRPAREN();
            if (s11 !== peg$FAILED) {
              s12 = peg$parse_();
              s13 = peg$parseBlock();
              if (s13 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f36(s5, s7, s9, s13);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseForeachLoop() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15;

    s0 = peg$currPos;
    s1 = peg$parseFOR();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseLPAREN();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parseVAR();
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s7 = peg$parseDestructuringPattern();
          if (s7 === peg$FAILED) {
            s7 = peg$parseDestructuringArrayPattern();
            if (s7 === peg$FAILED) {
              s7 = peg$parseIDENTIFIER();
            }
          }
          if (s7 !== peg$FAILED) {
            s8 = peg$currPos;
            s9 = peg$parse_();
            s10 = peg$parseCOLON();
            if (s10 !== peg$FAILED) {
              s11 = peg$parse_();
              s12 = peg$parseType();
              if (s12 !== peg$FAILED) {
                s9 = [s9, s10, s11, s12];
                s8 = s9;
              } else {
                peg$currPos = s8;
                s8 = peg$FAILED;
              }
            } else {
              peg$currPos = s8;
              s8 = peg$FAILED;
            }
            if (s8 === peg$FAILED) {
              s8 = null;
            }
            s9 = peg$parse_();
            s10 = peg$parseIN();
            if (s10 !== peg$FAILED) {
              s11 = peg$parse_();
              s12 = peg$parseAssignmentExpression();
              if (s12 !== peg$FAILED) {
                s13 = peg$parseRPAREN();
                if (s13 !== peg$FAILED) {
                  s14 = peg$parse_();
                  s15 = peg$parseBlock();
                  if (s15 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s0 = peg$f37(s7, s8, s12, s15);
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseBlock() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseLBRACE();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = [];
      s4 = peg$parseStatement();
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$parseStatement();
      }
      s4 = peg$parse_();
      s5 = peg$parseRBRACE();
      if (s5 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f38(s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseAssignmentExpression() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseConditionalExpression();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseAssignmentOperator();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parseAssignmentExpression();
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f39(s1, s3, s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$parseConditionalExpression();
    }

    return s0;
  }

  function peg$parseConditionalExpression() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    s0 = peg$currPos;
    s1 = peg$parseLogicalOrExpression();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseQUESTIONMARK();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parseAssignmentExpression();
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s7 = peg$parseCOLON();
          if (s7 !== peg$FAILED) {
            s8 = peg$parse_();
            s9 = peg$parseConditionalExpression();
            if (s9 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f40(s1, s5, s9);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$parseLogicalOrExpression();
    }

    return s0;
  }

  function peg$parseLogicalOrExpression() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parseLogicalAndExpression();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parse_();
      s5 = peg$parsePIPE_PIPE();
      if (s5 !== peg$FAILED) {
        s6 = peg$parse_();
        s7 = peg$parseLogicalAndExpression();
        if (s7 !== peg$FAILED) {
          s4 = [s4, s5, s6, s7];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parse_();
        s5 = peg$parsePIPE_PIPE();
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s7 = peg$parseLogicalAndExpression();
          if (s7 !== peg$FAILED) {
            s4 = [s4, s5, s6, s7];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f41(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseLogicalAndExpression() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parseEqualityExpression();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parse_();
      s5 = peg$parseAMPERSAND_AMPERSAND();
      if (s5 !== peg$FAILED) {
        s6 = peg$parse_();
        s7 = peg$parseEqualityExpression();
        if (s7 !== peg$FAILED) {
          s4 = [s4, s5, s6, s7];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parse_();
        s5 = peg$parseAMPERSAND_AMPERSAND();
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s7 = peg$parseEqualityExpression();
          if (s7 !== peg$FAILED) {
            s4 = [s4, s5, s6, s7];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f42(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseEqualityExpression() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parseRelationalExpression();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parse_();
      s5 = peg$parseEqualityOperator();
      if (s5 !== peg$FAILED) {
        s6 = peg$parse_();
        s7 = peg$parseRelationalExpression();
        if (s7 !== peg$FAILED) {
          s4 = [s4, s5, s6, s7];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parse_();
        s5 = peg$parseEqualityOperator();
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s7 = peg$parseRelationalExpression();
          if (s7 !== peg$FAILED) {
            s4 = [s4, s5, s6, s7];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f43(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseRelationalExpression() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parseAdditiveExpression();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parse_();
      s5 = peg$parseRelationalOperator();
      if (s5 !== peg$FAILED) {
        s6 = peg$parse_();
        s7 = peg$parseAdditiveExpression();
        if (s7 !== peg$FAILED) {
          s4 = [s4, s5, s6, s7];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parse_();
        s5 = peg$parseRelationalOperator();
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s7 = peg$parseAdditiveExpression();
          if (s7 !== peg$FAILED) {
            s4 = [s4, s5, s6, s7];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f44(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseAdditiveExpression() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parseMultiplicativeExpression();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parse_();
      s5 = peg$parseAdditiveOperator();
      if (s5 !== peg$FAILED) {
        s6 = peg$parse_();
        s7 = peg$parseMultiplicativeExpression();
        if (s7 !== peg$FAILED) {
          s4 = [s4, s5, s6, s7];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parse_();
        s5 = peg$parseAdditiveOperator();
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s7 = peg$parseMultiplicativeExpression();
          if (s7 !== peg$FAILED) {
            s4 = [s4, s5, s6, s7];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f45(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseMultiplicativeExpression() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parseUnaryExpression();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parse_();
      s5 = peg$parseMultiplicativeOperator();
      if (s5 !== peg$FAILED) {
        s6 = peg$parse_();
        s7 = peg$parseUnaryExpression();
        if (s7 !== peg$FAILED) {
          s4 = [s4, s5, s6, s7];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parse_();
        s5 = peg$parseMultiplicativeOperator();
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s7 = peg$parseUnaryExpression();
          if (s7 !== peg$FAILED) {
            s4 = [s4, s5, s6, s7];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f46(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseUnaryExpression() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseUnaryOperator();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseUnaryExpression();
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f47(s1, s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parsePrimaryExpression();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseMemberAccess();
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        peg$savedPos = s0;
        s0 = peg$f48(s1, s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseMemberAccess() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseDOT();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseIDENTIFIER();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f49(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseLBRACKET();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        s3 = peg$parseAssignmentExpression();
        if (s3 !== peg$FAILED) {
          s4 = peg$parse_();
          s5 = peg$parseRBRACKET();
          if (s5 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f50(s3);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parsePrimaryExpression() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseLiteral();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f51(s1);
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$parseObjectLiteral();
      if (s0 === peg$FAILED) {
        s0 = peg$parseArrayLiteral();
        if (s0 === peg$FAILED) {
          s0 = peg$parseFunctionCall();
          if (s0 === peg$FAILED) {
            s0 = peg$parseIfExpression();
            if (s0 === peg$FAILED) {
              s0 = peg$parseSwitchExpression();
              if (s0 === peg$FAILED) {
                s0 = peg$parseIDENTIFIER();
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  s1 = peg$parseLPAREN();
                  if (s1 !== peg$FAILED) {
                    s2 = peg$parse_();
                    s3 = peg$parseAssignmentExpression();
                    if (s3 !== peg$FAILED) {
                      s4 = peg$parse_();
                      s5 = peg$parseRPAREN();
                      if (s5 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s0 = peg$f52(s3);
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseArrayLiteral() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

    s0 = peg$currPos;
    s1 = peg$parseLBRACKET();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$currPos;
      s4 = peg$parseAssignmentExpression();
      if (s4 !== peg$FAILED) {
        s5 = [];
        s6 = peg$currPos;
        s7 = peg$parse_();
        s8 = peg$parseCOMMA();
        if (s8 === peg$FAILED) {
          s8 = peg$parseSEMICOLON();
        }
        if (s8 !== peg$FAILED) {
          s9 = peg$parse_();
          s10 = peg$parseAssignmentExpression();
          if (s10 !== peg$FAILED) {
            s7 = [s7, s8, s9, s10];
            s6 = s7;
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
        } else {
          peg$currPos = s6;
          s6 = peg$FAILED;
        }
        while (s6 !== peg$FAILED) {
          s5.push(s6);
          s6 = peg$currPos;
          s7 = peg$parse_();
          s8 = peg$parseCOMMA();
          if (s8 === peg$FAILED) {
            s8 = peg$parseSEMICOLON();
          }
          if (s8 !== peg$FAILED) {
            s9 = peg$parse_();
            s10 = peg$parseAssignmentExpression();
            if (s10 !== peg$FAILED) {
              s7 = [s7, s8, s9, s10];
              s6 = s7;
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
        }
        s6 = peg$parse_();
        s7 = peg$parseCOMMA();
        if (s7 === peg$FAILED) {
          s7 = peg$parseSEMICOLON();
        }
        if (s7 === peg$FAILED) {
          s7 = null;
        }
        s4 = [s4, s5, s6, s7];
        s3 = s4;
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parse_();
      s5 = peg$parseRBRACKET();
      if (s5 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f53(s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseObjectLiteral() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

    s0 = peg$currPos;
    s1 = peg$parseLBRACE();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$currPos;
      s4 = peg$parseKeyValuePair();
      if (s4 !== peg$FAILED) {
        s5 = [];
        s6 = peg$currPos;
        s7 = peg$parse_();
        s8 = peg$parseCOMMA();
        if (s8 === peg$FAILED) {
          s8 = peg$parseSEMICOLON();
        }
        if (s8 === peg$FAILED) {
          s8 = null;
        }
        s9 = peg$parse_();
        s10 = peg$parseKeyValuePair();
        if (s10 !== peg$FAILED) {
          s7 = [s7, s8, s9, s10];
          s6 = s7;
        } else {
          peg$currPos = s6;
          s6 = peg$FAILED;
        }
        while (s6 !== peg$FAILED) {
          s5.push(s6);
          s6 = peg$currPos;
          s7 = peg$parse_();
          s8 = peg$parseCOMMA();
          if (s8 === peg$FAILED) {
            s8 = peg$parseSEMICOLON();
          }
          if (s8 === peg$FAILED) {
            s8 = null;
          }
          s9 = peg$parse_();
          s10 = peg$parseKeyValuePair();
          if (s10 !== peg$FAILED) {
            s7 = [s7, s8, s9, s10];
            s6 = s7;
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
        }
        s6 = peg$parse_();
        s7 = peg$parseCOMMA();
        if (s7 === peg$FAILED) {
          s7 = peg$parseSEMICOLON();
        }
        if (s7 === peg$FAILED) {
          s7 = null;
        }
        s4 = [s4, s5, s6, s7];
        s3 = s4;
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parse_();
      s5 = peg$parseRBRACE();
      if (s5 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f54(s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseKeyValuePair() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseSTRING();
    if (s1 === peg$FAILED) {
      s1 = peg$parseComputedKey();
      if (s1 === peg$FAILED) {
        s1 = peg$parseIDENTIFIER();
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseCOLON();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parseAssignmentExpression();
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f55(s1, s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseComputedKey() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseLBRACKET();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseAssignmentExpression();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parseRBRACKET();
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f56(s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseIfExpression() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

    s0 = peg$currPos;
    s1 = peg$parseIF();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseAssignmentExpression();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parseBlock();
        if (s5 !== peg$FAILED) {
          s6 = peg$currPos;
          s7 = peg$parse_();
          s8 = peg$parseELSE();
          if (s8 !== peg$FAILED) {
            s9 = peg$parse_();
            s10 = peg$parseBlock();
            if (s10 === peg$FAILED) {
              s10 = peg$parseIfExpression();
            }
            if (s10 !== peg$FAILED) {
              s7 = [s7, s8, s9, s10];
              s6 = s7;
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
          if (s6 === peg$FAILED) {
            s6 = null;
          }
          peg$savedPos = s0;
          s0 = peg$f57(s3, s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseSwitchExpression() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14;

    s0 = peg$currPos;
    s1 = peg$parseSWITCH();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseLPAREN();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parseAssignmentExpression();
        if (s5 === peg$FAILED) {
          s5 = null;
        }
        s6 = peg$parse_();
        s7 = peg$parseRPAREN();
        if (s7 !== peg$FAILED) {
          s8 = peg$parse_();
          s9 = peg$parseLBRACE();
          if (s9 !== peg$FAILED) {
            s10 = peg$parse_();
            s11 = [];
            s12 = peg$parseSwitchCase();
            while (s12 !== peg$FAILED) {
              s11.push(s12);
              s12 = peg$parseSwitchCase();
            }
            s12 = peg$parseSwitchDefault();
            if (s12 === peg$FAILED) {
              s12 = null;
            }
            s13 = peg$parse_();
            s14 = peg$parseRBRACE();
            if (s14 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f58(s5, s11, s12);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseAssignmentOperator() {
    var s0;

    s0 = peg$parseEQUALS();
    if (s0 === peg$FAILED) {
      s0 = peg$parsePLUS_EQUALS();
      if (s0 === peg$FAILED) {
        s0 = peg$parseMINUS_EQUALS();
        if (s0 === peg$FAILED) {
          s0 = peg$parseSTAR_EQUALS();
          if (s0 === peg$FAILED) {
            s0 = peg$parseSLASH_EQUALS();
            if (s0 === peg$FAILED) {
              s0 = peg$parsePERCENT_EQUALS();
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseEqualityOperator() {
    var s0;

    s0 = peg$parseDOUBLE_EQUALS();
    if (s0 === peg$FAILED) {
      s0 = peg$parseBANG_EQUALS();
    }

    return s0;
  }

  function peg$parseRelationalOperator() {
    var s0;

    s0 = peg$parseLESS_THAN();
    if (s0 === peg$FAILED) {
      s0 = peg$parseLESS_THAN_EQUALS();
      if (s0 === peg$FAILED) {
        s0 = peg$parseGREATER_THAN();
        if (s0 === peg$FAILED) {
          s0 = peg$parseGREATER_THAN_EQUALS();
        }
      }
    }

    return s0;
  }

  function peg$parseAdditiveOperator() {
    var s0;

    s0 = peg$parsePLUS();
    if (s0 === peg$FAILED) {
      s0 = peg$parseMINUS();
    }

    return s0;
  }

  function peg$parseMultiplicativeOperator() {
    var s0;

    s0 = peg$parseSTAR();
    if (s0 === peg$FAILED) {
      s0 = peg$parseSLASH();
      if (s0 === peg$FAILED) {
        s0 = peg$parsePERCENT();
      }
    }

    return s0;
  }

  function peg$parseUnaryOperator() {
    var s0;

    s0 = peg$parseBANG();
    if (s0 === peg$FAILED) {
      s0 = peg$parseTILDE();
      if (s0 === peg$FAILED) {
        s0 = peg$parsePLUS();
        if (s0 === peg$FAILED) {
          s0 = peg$parseMINUS();
          if (s0 === peg$FAILED) {
            s0 = peg$parseDOLLAR();
            if (s0 === peg$FAILED) {
              s0 = peg$parseNEW();
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseFunctionDeclaration() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

    s0 = peg$currPos;
    s1 = peg$parse_();
    s2 = peg$parseIDENTIFIER();
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      s4 = peg$parseLPAREN();
      if (s4 !== peg$FAILED) {
        s5 = peg$parseParameterList();
        if (s5 === peg$FAILED) {
          s5 = null;
        }
        s6 = peg$parseRPAREN();
        if (s6 !== peg$FAILED) {
          s7 = peg$parse_();
          s8 = peg$currPos;
          s9 = peg$parseCOLON();
          if (s9 !== peg$FAILED) {
            s10 = peg$parse_();
            s11 = peg$parseType();
            if (s11 !== peg$FAILED) {
              s9 = [s9, s10, s11];
              s8 = s9;
            } else {
              peg$currPos = s8;
              s8 = peg$FAILED;
            }
          } else {
            peg$currPos = s8;
            s8 = peg$FAILED;
          }
          if (s8 === peg$FAILED) {
            s8 = null;
          }
          s9 = peg$parse_();
          s10 = peg$parseBlock();
          if (s10 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f59(s2, s5, s8, s10);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseFunctionCall() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseIDENTIFIER();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseLPAREN();
      if (s3 !== peg$FAILED) {
        s4 = peg$parseArgumentList();
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        s5 = peg$parseRPAREN();
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f60(s1, s4);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseAccessModifier() {
    var s0;

    s0 = peg$parsePUB();
    if (s0 === peg$FAILED) {
      s0 = peg$parsePRI();
      if (s0 === peg$FAILED) {
        s0 = peg$parsePRO();
      }
    }

    return s0;
  }

  function peg$parseType() {
    var s0;

    s0 = peg$parseGenericType();
    if (s0 === peg$FAILED) {
      s0 = peg$parseTupleType();
      if (s0 === peg$FAILED) {
        s0 = peg$parseArrayType();
        if (s0 === peg$FAILED) {
          s0 = peg$parseIDENTIFIER();
        }
      }
    }

    return s0;
  }

  function peg$parseGenericType() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = peg$parseIDENTIFIER();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseLBRACKET();
      if (s2 !== peg$FAILED) {
        s3 = peg$parse_();
        s4 = peg$parseTypeList();
        if (s4 !== peg$FAILED) {
          s5 = peg$parse_();
          s6 = peg$parseRBRACKET();
          if (s6 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f61(s1, s4);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseTupleType() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseLBRACKET();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseTypeList();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parseRBRACKET();
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f62(s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseArrayType() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseIDENTIFIER();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parseLBRACKET();
      if (s4 !== peg$FAILED) {
        s5 = peg$parseRBRACKET();
        if (s5 !== peg$FAILED) {
          s4 = [s4, s5];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parseLBRACKET();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseRBRACKET();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f63(s1, s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseParameter() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseIDENTIFIER();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseCOLON();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parseType();
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f64(s1, s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseParameterList() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parseParameter();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = [];
      s4 = peg$currPos;
      s5 = peg$parseCOMMA();
      if (s5 !== peg$FAILED) {
        s6 = peg$parse_();
        s7 = peg$parseParameter();
        if (s7 !== peg$FAILED) {
          s5 = [s5, s6, s7];
          s4 = s5;
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
      } else {
        peg$currPos = s4;
        s4 = peg$FAILED;
      }
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$currPos;
        s5 = peg$parseCOMMA();
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s7 = peg$parseParameter();
          if (s7 !== peg$FAILED) {
            s5 = [s5, s6, s7];
            s4 = s5;
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f65(s1, s3);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseArgumentList() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parseAssignmentExpression();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = [];
      s4 = peg$currPos;
      s5 = peg$parseCOMMA();
      if (s5 !== peg$FAILED) {
        s6 = peg$parse_();
        s7 = peg$parseAssignmentExpression();
        if (s7 !== peg$FAILED) {
          s5 = [s5, s6, s7];
          s4 = s5;
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
      } else {
        peg$currPos = s4;
        s4 = peg$FAILED;
      }
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$currPos;
        s5 = peg$parseCOMMA();
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s7 = peg$parseAssignmentExpression();
          if (s7 !== peg$FAILED) {
            s5 = [s5, s6, s7];
            s4 = s5;
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f66(s1, s3);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseTypeList() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parseType();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = [];
      s4 = peg$currPos;
      s5 = peg$parseCOMMA();
      if (s5 !== peg$FAILED) {
        s6 = peg$parse_();
        s7 = peg$parseType();
        if (s7 !== peg$FAILED) {
          s5 = [s5, s6, s7];
          s4 = s5;
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
      } else {
        peg$currPos = s4;
        s4 = peg$FAILED;
      }
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$currPos;
        s5 = peg$parseCOMMA();
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s7 = peg$parseType();
          if (s7 !== peg$FAILED) {
            s5 = [s5, s6, s7];
            s4 = s5;
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f67(s1, s3);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseDecoratorIdentifier() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parseAT();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseIDENTIFIER();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f68(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseDestructuringPattern() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseLBRACE();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseIdentifierList();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parseRBRACE();
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f69(s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseDestructuringArrayPattern() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseLBRACKET();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseIdentifierList();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parseLBRACKET();
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f70(s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseIdentifierList() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parseIDENTIFIER();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = [];
      s4 = peg$currPos;
      s5 = peg$parseCOMMA();
      if (s5 !== peg$FAILED) {
        s6 = peg$parse_();
        s7 = peg$parseIDENTIFIER();
        if (s7 !== peg$FAILED) {
          s5 = [s5, s6, s7];
          s4 = s5;
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
      } else {
        peg$currPos = s4;
        s4 = peg$FAILED;
      }
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$currPos;
        s5 = peg$parseCOMMA();
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s7 = peg$parseIDENTIFIER();
          if (s7 !== peg$FAILED) {
            s5 = [s5, s6, s7];
            s4 = s5;
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f71(s1, s3);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseIDENTIFIER() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (peg$r0.test(input.charAt(peg$currPos))) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e0); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      if (peg$r1.test(input.charAt(peg$currPos))) {
        s3 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e1); }
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        if (peg$r1.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e1); }
        }
      }
      peg$savedPos = s0;
      s0 = peg$f72();
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseMODULE() {
    var s0;

    if (input.substr(peg$currPos, 6) === peg$c0) {
      s0 = peg$c0;
      peg$currPos += 6;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e2); }
    }

    return s0;
  }

  function peg$parseSTRUCT() {
    var s0;

    if (input.substr(peg$currPos, 6) === peg$c1) {
      s0 = peg$c1;
      peg$currPos += 6;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e3); }
    }

    return s0;
  }

  function peg$parseCLASS() {
    var s0;

    if (input.substr(peg$currPos, 5) === peg$c2) {
      s0 = peg$c2;
      peg$currPos += 5;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e4); }
    }

    return s0;
  }

  function peg$parseINTERFACE() {
    var s0;

    if (input.substr(peg$currPos, 9) === peg$c3) {
      s0 = peg$c3;
      peg$currPos += 9;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e5); }
    }

    return s0;
  }

  function peg$parseENUM() {
    var s0;

    if (input.substr(peg$currPos, 4) === peg$c4) {
      s0 = peg$c4;
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e6); }
    }

    return s0;
  }

  function peg$parseVAR() {
    var s0;

    if (input.substr(peg$currPos, 3) === peg$c5) {
      s0 = peg$c5;
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e7); }
    }

    return s0;
  }

  function peg$parsePUB() {
    var s0;

    if (input.substr(peg$currPos, 3) === peg$c6) {
      s0 = peg$c6;
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e8); }
    }

    return s0;
  }

  function peg$parsePRI() {
    var s0;

    if (input.substr(peg$currPos, 3) === peg$c7) {
      s0 = peg$c7;
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e9); }
    }

    return s0;
  }

  function peg$parsePRO() {
    var s0;

    if (input.substr(peg$currPos, 3) === peg$c8) {
      s0 = peg$c8;
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e10); }
    }

    return s0;
  }

  function peg$parseFN() {
    var s0;

    if (input.substr(peg$currPos, 2) === peg$c9) {
      s0 = peg$c9;
      peg$currPos += 2;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e11); }
    }

    return s0;
  }

  function peg$parseIF() {
    var s0;

    if (input.substr(peg$currPos, 2) === peg$c10) {
      s0 = peg$c10;
      peg$currPos += 2;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e12); }
    }

    return s0;
  }

  function peg$parseELSE() {
    var s0;

    if (input.substr(peg$currPos, 4) === peg$c11) {
      s0 = peg$c11;
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e13); }
    }

    return s0;
  }

  function peg$parseSWITCH() {
    var s0;

    if (input.substr(peg$currPos, 6) === peg$c12) {
      s0 = peg$c12;
      peg$currPos += 6;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e14); }
    }

    return s0;
  }

  function peg$parseWHILE() {
    var s0;

    if (input.substr(peg$currPos, 5) === peg$c13) {
      s0 = peg$c13;
      peg$currPos += 5;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e15); }
    }

    return s0;
  }

  function peg$parseFOR() {
    var s0;

    if (input.substr(peg$currPos, 3) === peg$c14) {
      s0 = peg$c14;
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e16); }
    }

    return s0;
  }

  function peg$parseFOREACH() {
    var s0;

    if (input.substr(peg$currPos, 7) === peg$c15) {
      s0 = peg$c15;
      peg$currPos += 7;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e17); }
    }

    return s0;
  }

  function peg$parseBREAK() {
    var s0;

    if (input.substr(peg$currPos, 5) === peg$c16) {
      s0 = peg$c16;
      peg$currPos += 5;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e18); }
    }

    return s0;
  }

  function peg$parseCONTINUE() {
    var s0;

    if (input.substr(peg$currPos, 8) === peg$c17) {
      s0 = peg$c17;
      peg$currPos += 8;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e19); }
    }

    return s0;
  }

  function peg$parseRETURN() {
    var s0;

    if (input.substr(peg$currPos, 6) === peg$c18) {
      s0 = peg$c18;
      peg$currPos += 6;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e20); }
    }

    return s0;
  }

  function peg$parseSUPER() {
    var s0;

    if (input.substr(peg$currPos, 5) === peg$c19) {
      s0 = peg$c19;
      peg$currPos += 5;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e21); }
    }

    return s0;
  }

  function peg$parseNEW() {
    var s0;

    if (input.substr(peg$currPos, 3) === peg$c20) {
      s0 = peg$c20;
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e22); }
    }

    return s0;
  }

  function peg$parseSET() {
    var s0;

    if (input.substr(peg$currPos, 3) === peg$c21) {
      s0 = peg$c21;
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e23); }
    }

    return s0;
  }

  function peg$parseGET() {
    var s0;

    if (input.substr(peg$currPos, 3) === peg$c22) {
      s0 = peg$c22;
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e24); }
    }

    return s0;
  }

  function peg$parseSTATIC() {
    var s0;

    if (input.substr(peg$currPos, 6) === peg$c23) {
      s0 = peg$c23;
      peg$currPos += 6;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e25); }
    }

    return s0;
  }

  function peg$parseIN() {
    var s0;

    if (input.substr(peg$currPos, 2) === peg$c24) {
      s0 = peg$c24;
      peg$currPos += 2;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e26); }
    }

    return s0;
  }

  function peg$parseQUESTIONMARK() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 63) {
      s0 = peg$c25;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e27); }
    }

    return s0;
  }

  function peg$parseCOLON() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 58) {
      s0 = peg$c26;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e28); }
    }

    return s0;
  }

  function peg$parseSEMICOLON() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 59) {
      s0 = peg$c27;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e29); }
    }

    return s0;
  }

  function peg$parseCOMMA() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 44) {
      s0 = peg$c28;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e30); }
    }

    return s0;
  }

  function peg$parseDOT() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 46) {
      s0 = peg$c29;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e31); }
    }

    return s0;
  }

  function peg$parseTILDE() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 126) {
      s0 = peg$c30;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e32); }
    }

    return s0;
  }

  function peg$parseAT() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 64) {
      s0 = peg$c31;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e33); }
    }

    return s0;
  }

  function peg$parseDOLLAR() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 36) {
      s0 = peg$c32;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e34); }
    }

    return s0;
  }

  function peg$parseLPAREN() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 40) {
      s0 = peg$c33;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e35); }
    }

    return s0;
  }

  function peg$parseRPAREN() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 41) {
      s0 = peg$c34;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e36); }
    }

    return s0;
  }

  function peg$parseLBRACE() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 123) {
      s0 = peg$c35;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e37); }
    }

    return s0;
  }

  function peg$parseRBRACE() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 125) {
      s0 = peg$c36;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e38); }
    }

    return s0;
  }

  function peg$parseLBRACKET() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 91) {
      s0 = peg$c37;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e39); }
    }

    return s0;
  }

  function peg$parseRBRACKET() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 93) {
      s0 = peg$c38;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e40); }
    }

    return s0;
  }

  function peg$parseEQUALS() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 61) {
      s0 = peg$c39;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e41); }
    }

    return s0;
  }

  function peg$parsePLUS_EQUALS() {
    var s0;

    if (input.substr(peg$currPos, 2) === peg$c40) {
      s0 = peg$c40;
      peg$currPos += 2;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e42); }
    }

    return s0;
  }

  function peg$parseMINUS_EQUALS() {
    var s0;

    if (input.substr(peg$currPos, 2) === peg$c41) {
      s0 = peg$c41;
      peg$currPos += 2;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e43); }
    }

    return s0;
  }

  function peg$parseSTAR_EQUALS() {
    var s0;

    if (input.substr(peg$currPos, 2) === peg$c42) {
      s0 = peg$c42;
      peg$currPos += 2;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e44); }
    }

    return s0;
  }

  function peg$parseSLASH_EQUALS() {
    var s0;

    if (input.substr(peg$currPos, 2) === peg$c43) {
      s0 = peg$c43;
      peg$currPos += 2;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e45); }
    }

    return s0;
  }

  function peg$parsePERCENT_EQUALS() {
    var s0;

    if (input.substr(peg$currPos, 2) === peg$c44) {
      s0 = peg$c44;
      peg$currPos += 2;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e46); }
    }

    return s0;
  }

  function peg$parseDOUBLE_EQUALS() {
    var s0;

    if (input.substr(peg$currPos, 2) === peg$c45) {
      s0 = peg$c45;
      peg$currPos += 2;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e47); }
    }

    return s0;
  }

  function peg$parseBANG_EQUALS() {
    var s0;

    if (input.substr(peg$currPos, 2) === peg$c46) {
      s0 = peg$c46;
      peg$currPos += 2;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e48); }
    }

    return s0;
  }

  function peg$parseBANG() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 33) {
      s0 = peg$c47;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e49); }
    }

    return s0;
  }

  function peg$parseLESS_THAN() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 60) {
      s0 = peg$c48;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e50); }
    }

    return s0;
  }

  function peg$parseLESS_THAN_EQUALS() {
    var s0;

    if (input.substr(peg$currPos, 2) === peg$c49) {
      s0 = peg$c49;
      peg$currPos += 2;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e51); }
    }

    return s0;
  }

  function peg$parseGREATER_THAN() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 62) {
      s0 = peg$c50;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e52); }
    }

    return s0;
  }

  function peg$parseGREATER_THAN_EQUALS() {
    var s0;

    if (input.substr(peg$currPos, 2) === peg$c51) {
      s0 = peg$c51;
      peg$currPos += 2;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e53); }
    }

    return s0;
  }

  function peg$parsePLUS() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 43) {
      s0 = peg$c52;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e54); }
    }

    return s0;
  }

  function peg$parseMINUS() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 45) {
      s0 = peg$c53;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e55); }
    }

    return s0;
  }

  function peg$parseSTAR() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 42) {
      s0 = peg$c54;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e56); }
    }

    return s0;
  }

  function peg$parseSLASH() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 47) {
      s0 = peg$c55;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e57); }
    }

    return s0;
  }

  function peg$parsePERCENT() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 37) {
      s0 = peg$c56;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e58); }
    }

    return s0;
  }

  function peg$parseAMPERSAND_AMPERSAND() {
    var s0;

    if (input.substr(peg$currPos, 2) === peg$c57) {
      s0 = peg$c57;
      peg$currPos += 2;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e59); }
    }

    return s0;
  }

  function peg$parsePIPE_PIPE() {
    var s0;

    if (input.substr(peg$currPos, 2) === peg$c58) {
      s0 = peg$c58;
      peg$currPos += 2;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e60); }
    }

    return s0;
  }

  function peg$parseLiteral() {
    var s0;

    s0 = peg$parseBOOLEAN();
    if (s0 === peg$FAILED) {
      s0 = peg$parseFLOAT();
      if (s0 === peg$FAILED) {
        s0 = peg$parseHEXADECIMAL();
        if (s0 === peg$FAILED) {
          s0 = peg$parseOCTAL();
          if (s0 === peg$FAILED) {
            s0 = peg$parseDECIMAL();
            if (s0 === peg$FAILED) {
              s0 = peg$parseSTRING();
              if (s0 === peg$FAILED) {
                s0 = peg$parseCHAR();
                if (s0 === peg$FAILED) {
                  s0 = peg$parseVALUENULL();
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseBOOLEAN() {
    var s0, s1;

    if (input.substr(peg$currPos, 4) === peg$c59) {
      s0 = peg$c59;
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e61); }
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 5) === peg$c60) {
        s1 = peg$c60;
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e62); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f73();
      }
      s0 = s1;
    }

    return s0;
  }

  function peg$parseDECIMAL() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (peg$r2.test(input.charAt(peg$currPos))) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e63); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      if (peg$r3.test(input.charAt(peg$currPos))) {
        s3 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e64); }
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        if (peg$r3.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e64); }
        }
      }
      peg$savedPos = s0;
      s0 = peg$f74();
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseHEXADECIMAL() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c61) {
      s1 = peg$c61;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e65); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      if (peg$r4.test(input.charAt(peg$currPos))) {
        s3 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e66); }
      }
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          if (peg$r4.test(input.charAt(peg$currPos))) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e66); }
          }
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f75();
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseOCTAL() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 48) {
      s1 = peg$c62;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e67); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      if (peg$r5.test(input.charAt(peg$currPos))) {
        s3 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e68); }
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        if (peg$r5.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e68); }
        }
      }
      peg$savedPos = s0;
      s0 = peg$f76();
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseCHAR() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 39) {
      s1 = peg$c63;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e69); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = peg$currPos;
      peg$silentFails++;
      if (peg$r6.test(input.charAt(peg$currPos))) {
        s4 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e70); }
      }
      peg$silentFails--;
      if (s4 === peg$FAILED) {
        s3 = undefined;
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      if (s3 !== peg$FAILED) {
        if (input.length > peg$currPos) {
          s4 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e71); }
        }
        if (s4 !== peg$FAILED) {
          s3 = [s3, s4];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 39) {
          s3 = peg$c63;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e69); }
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f77(s2);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseSTRING() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 34) {
      s1 = peg$c64;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e72); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$currPos;
      peg$silentFails++;
      if (peg$r6.test(input.charAt(peg$currPos))) {
        s5 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e70); }
      }
      peg$silentFails--;
      if (s5 === peg$FAILED) {
        s4 = undefined;
      } else {
        peg$currPos = s4;
        s4 = peg$FAILED;
      }
      if (s4 !== peg$FAILED) {
        if (input.length > peg$currPos) {
          s5 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e71); }
        }
        if (s5 !== peg$FAILED) {
          s4 = [s4, s5];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$currPos;
        peg$silentFails++;
        if (peg$r6.test(input.charAt(peg$currPos))) {
          s5 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e70); }
        }
        peg$silentFails--;
        if (s5 === peg$FAILED) {
          s4 = undefined;
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        if (s4 !== peg$FAILED) {
          if (input.length > peg$currPos) {
            s5 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e71); }
          }
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      if (input.charCodeAt(peg$currPos) === 34) {
        s3 = peg$c64;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e72); }
      }
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f78(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseVALUENULL() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c65) {
      s1 = peg$c65;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e73); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f79();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseFLOAT() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = [];
    if (peg$r3.test(input.charAt(peg$currPos))) {
      s3 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s3 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e64); }
    }
    if (s3 !== peg$FAILED) {
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        if (peg$r3.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e64); }
        }
      }
    } else {
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 46) {
        s3 = peg$c29;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e31); }
      }
      if (s3 !== peg$FAILED) {
        s4 = [];
        if (peg$r3.test(input.charAt(peg$currPos))) {
          s5 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e64); }
        }
        while (s5 !== peg$FAILED) {
          s4.push(s5);
          if (peg$r3.test(input.charAt(peg$currPos))) {
            s5 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e64); }
          }
        }
        s2 = [s2, s3, s4];
        s1 = s2;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 === peg$FAILED) {
      s1 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 46) {
        s2 = peg$c29;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e31); }
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        if (peg$r3.test(input.charAt(peg$currPos))) {
          s4 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e64); }
        }
        if (s4 !== peg$FAILED) {
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            if (peg$r3.test(input.charAt(peg$currPos))) {
              s4 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e64); }
            }
          }
        } else {
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      if (peg$r7.test(input.charAt(peg$currPos))) {
        s3 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e74); }
      }
      if (s3 !== peg$FAILED) {
        if (peg$r8.test(input.charAt(peg$currPos))) {
          s4 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e75); }
        }
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        s5 = [];
        if (peg$r3.test(input.charAt(peg$currPos))) {
          s6 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e64); }
        }
        if (s6 !== peg$FAILED) {
          while (s6 !== peg$FAILED) {
            s5.push(s6);
            if (peg$r3.test(input.charAt(peg$currPos))) {
              s6 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s6 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e64); }
            }
          }
        } else {
          s5 = peg$FAILED;
        }
        if (s5 !== peg$FAILED) {
          s3 = [s3, s4, s5];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      peg$savedPos = s0;
      s0 = peg$f80();
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseComment() {
    var s0;

    s0 = peg$parseLineComment();
    if (s0 === peg$FAILED) {
      s0 = peg$parseBlockComment();
    }

    return s0;
  }

  function peg$parseLineComment() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c66) {
      s1 = peg$c66;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e76); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$currPos;
      peg$silentFails++;
      if (peg$r9.test(input.charAt(peg$currPos))) {
        s5 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e77); }
      }
      peg$silentFails--;
      if (s5 === peg$FAILED) {
        s4 = undefined;
      } else {
        peg$currPos = s4;
        s4 = peg$FAILED;
      }
      if (s4 !== peg$FAILED) {
        if (input.length > peg$currPos) {
          s5 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e71); }
        }
        if (s5 !== peg$FAILED) {
          s4 = [s4, s5];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$currPos;
        peg$silentFails++;
        if (peg$r9.test(input.charAt(peg$currPos))) {
          s5 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e77); }
        }
        peg$silentFails--;
        if (s5 === peg$FAILED) {
          s4 = undefined;
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        if (s4 !== peg$FAILED) {
          if (input.length > peg$currPos) {
            s5 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e71); }
          }
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      s1 = [s1, s2];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseBlockComment() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c67) {
      s1 = peg$c67;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e78); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$currPos;
      peg$silentFails++;
      if (input.substr(peg$currPos, 2) === peg$c68) {
        s5 = peg$c68;
        peg$currPos += 2;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e79); }
      }
      peg$silentFails--;
      if (s5 === peg$FAILED) {
        s4 = undefined;
      } else {
        peg$currPos = s4;
        s4 = peg$FAILED;
      }
      if (s4 !== peg$FAILED) {
        if (input.length > peg$currPos) {
          s5 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e71); }
        }
        if (s5 !== peg$FAILED) {
          s4 = [s4, s5];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$currPos;
        peg$silentFails++;
        if (input.substr(peg$currPos, 2) === peg$c68) {
          s5 = peg$c68;
          peg$currPos += 2;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e79); }
        }
        peg$silentFails--;
        if (s5 === peg$FAILED) {
          s4 = undefined;
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        if (s4 !== peg$FAILED) {
          if (input.length > peg$currPos) {
            s5 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e71); }
          }
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      if (input.substr(peg$currPos, 2) === peg$c68) {
        s3 = peg$c68;
        peg$currPos += 2;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e79); }
      }
      if (s3 !== peg$FAILED) {
        s1 = [s1, s2, s3];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseWhitespace() {
    var s0, s1;

    s0 = [];
    if (peg$r10.test(input.charAt(peg$currPos))) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e80); }
    }
    if (s1 !== peg$FAILED) {
      while (s1 !== peg$FAILED) {
        s0.push(s1);
        if (peg$r10.test(input.charAt(peg$currPos))) {
          s1 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e80); }
        }
      }
    } else {
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parse_() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parseWhitespace();
    if (s2 === peg$FAILED) {
      s2 = peg$parseComment();
    }
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parseWhitespace();
      if (s2 === peg$FAILED) {
        s2 = peg$parseComment();
      }
    }
    peg$savedPos = s0;
    s1 = peg$f81();
    s0 = s1;

    return s0;
  }

  peg$result = peg$startRuleFunction();

  if (peg$result !== peg$FAILED && peg$currPos === input.length) {
    return peg$result;
  } else {
    if (peg$result !== peg$FAILED && peg$currPos < input.length) {
      peg$fail(peg$endExpectation());
    }

    throw peg$buildStructuredError(
      peg$maxFailExpected,
      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
      peg$maxFailPos < input.length
        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
    );
  }
}

export {
  peg$SyntaxError as SyntaxError,

  peg$parse as parse
};
