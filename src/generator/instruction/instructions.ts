export const enum ZrInstructionParamType {
    None,
    Variable,
    Constant,
    Closure,
}


export const enum ZrInstructionType {
    GetStack,
    SetStack,
    GetConstant,
    SetConstant,
    GetClosure,
    SetClosure,
    AddInt,
    AddFloat,
    AddString,
    SubInt,
    SubFloat,
    MulSigned,
    MulUnsigned,
    MulFloat,
    DivSigned,
    DivUnsigned,
    DivFloat,
    ModSigned,
    ModUnsigned,
    ModFloat,
    PowSigned,
    PowUnsigned,
    PowFloat,
    ShiftLeft,
    ShiftRight,
    LogicalNot,
    LogicalAnd,
    LogicalOr,
    LogicalGreaterSigned,
    LogicalGreaterUnsigned,
    LogicalGreaterFloat,
    LogicalLessSigned,
    LogicalLessUnsigned,
    LogicalLessFloat,
    LogicalEqual,
    LogicalNotEqual,
    LogicalGreaterEqualSigned,
    LogicalGreaterEqualUnsigned,
    LogicalGreaterEqualFloat,
    LogicalLessEqualSigned,
    LogicalLessEqualUnsigned,
    LogicalLessEqualFloat,
    BitwiseNot,
    BitwiseAnd,
    BitwiseOr,
    BitwiseXor,
    BitwiseShiftLeft,
    BitwiseShiftRight,
    FunctionCall,
    FunctionTailCall,
    FunctionReturn,
    GetValue,
    SetValue,
    Jump,
    JumpIf,
    CreateClosure,
    Try,
    Throw,
    Catch
}

export const ZrInstructionParamsFormat = {
    [ZrInstructionType.GetStack]: [ZrInstructionParamType.Variable],
    [ZrInstructionType.SetStack]: [ZrInstructionParamType.Variable],
    [ZrInstructionType.GetConstant]: [ZrInstructionParamType.Constant],
    [ZrInstructionType.SetConstant]: [ZrInstructionParamType.Constant],
    [ZrInstructionType.GetClosure]: [ZrInstructionParamType.Closure],
    [ZrInstructionType.SetClosure]: [ZrInstructionParamType.Closure],
    [ZrInstructionType.AddInt]: [ZrInstructionParamType.Variable, ZrInstructionParamType.Variable],
    [ZrInstructionType.AddFloat]: [ZrInstructionParamType.Variable, ZrInstructionParamType.Variable],
    [ZrInstructionType.AddString]: [ZrInstructionParamType.Variable, ZrInstructionParamType.Variable],
    [ZrInstructionType.SubInt]: [ZrInstructionParamType.Variable, ZrInstructionParamType.Variable],
    [ZrInstructionType.SubFloat]: [ZrInstructionParamType.Variable, ZrInstructionParamType.Variable],
    [ZrInstructionType.MulSigned]: [ZrInstructionParamType.Variable, ZrInstructionParamType.Variable],
    [ZrInstructionType.MulUnsigned]: [ZrInstructionParamType.Variable, ZrInstructionParamType.Variable],
    [ZrInstructionType.MulFloat]: [ZrInstructionParamType.Variable, ZrInstructionParamType.Variable],
    [ZrInstructionType.DivSigned]: [ZrInstructionParamType.Variable, ZrInstructionParamType.Variable],
    [ZrInstructionType.DivUnsigned]: [ZrInstructionParamType.Variable, ZrInstructionParamType.Variable],
    [ZrInstructionType.DivFloat]: [ZrInstructionParamType.Variable, ZrInstructionParamType.Variable],
    [ZrInstructionType.ModSigned]: [ZrInstructionParamType.Variable, ZrInstructionParamType.Variable],
    [ZrInstructionType.ModUnsigned]: [ZrInstructionParamType.Variable, ZrInstructionParamType.Variable],
    [ZrInstructionType.ModFloat]: [ZrInstructionParamType.Variable, ZrInstructionParamType.Variable],
    [ZrInstructionType.PowSigned]: [ZrInstructionParamType.Variable, ZrInstructionParamType.Variable],
    [ZrInstructionType.PowUnsigned]: [ZrInstructionParamType.Variable, ZrInstructionParamType.Variable],
    [ZrInstructionType.PowFloat]: [ZrInstructionParamType.Variable, ZrInstructionParamType.Variable],
    [ZrInstructionType.ShiftLeft]: [ZrInstructionParamType.Variable, ZrInstructionParamType.Variable],
    [ZrInstructionType.ShiftRight]: [ZrInstructionParamType.Variable, ZrInstructionParamType.Variable],
    [ZrInstructionType.LogicalNot]: [ZrInstructionParamType.Variable, ZrInstructionParamType.None],
    [ZrInstructionType.LogicalAnd]: [ZrInstructionParamType.Variable, ZrInstructionParamType.Variable],
    [ZrInstructionType.LogicalOr]: [ZrInstructionParamType.Variable, ZrInstructionParamType.Variable],
    [ZrInstructionType.LogicalGreaterSigned]: [ZrInstructionParamType.Variable, ZrInstructionParamType.Variable],
    [ZrInstructionType.LogicalGreaterUnsigned]: [ZrInstructionParamType.Variable, ZrInstructionParamType.Variable],
    [ZrInstructionType.LogicalGreaterFloat]: [ZrInstructionParamType.Variable, ZrInstructionParamType.Variable],
    [ZrInstructionType.LogicalLessSigned]: [ZrInstructionParamType.Variable, ZrInstructionParamType.Variable],
    [ZrInstructionType.LogicalLessUnsigned]: [ZrInstructionParamType.Variable, ZrInstructionParamType.Variable],
    [ZrInstructionType.LogicalLessFloat]: [ZrInstructionParamType.Variable, ZrInstructionParamType.Variable],
    [ZrInstructionType.LogicalEqual]: [ZrInstructionParamType.Variable, ZrInstructionParamType.Variable],
    [ZrInstructionType.LogicalNotEqual]: [ZrInstructionParamType.Variable, ZrInstructionParamType.Variable],
    [ZrInstructionType.LogicalGreaterEqualSigned]: [ZrInstructionParamType.Variable, ZrInstructionParamType.Variable],
    [ZrInstructionType.LogicalGreaterEqualUnsigned]: [ZrInstructionParamType.Variable, ZrInstructionParamType.Variable],
    [ZrInstructionType.LogicalGreaterEqualFloat]: [ZrInstructionParamType.Variable, ZrInstructionParamType.Variable],
    [ZrInstructionType.LogicalLessEqualSigned]: [ZrInstructionParamType.Variable, ZrInstructionParamType.Variable],
    [ZrInstructionType.LogicalLessEqualUnsigned]: [ZrInstructionParamType.Variable, ZrInstructionParamType.Variable],
    [ZrInstructionType.LogicalLessEqualFloat]: [ZrInstructionParamType.Variable, ZrInstructionParamType.Variable],
    [ZrInstructionType.BitwiseNot]: [ZrInstructionParamType.Variable, ZrInstructionParamType.None],
    [ZrInstructionType.BitwiseAnd]: [ZrInstructionParamType.Variable, ZrInstructionParamType.Variable],
    [ZrInstructionType.BitwiseOr]: [ZrInstructionParamType.Variable, ZrInstructionParamType.Variable],
    [ZrInstructionType.BitwiseXor]: [ZrInstructionParamType.Variable, ZrInstructionParamType.Variable],
    [ZrInstructionType.BitwiseShiftLeft]: [ZrInstructionParamType.Variable, ZrInstructionParamType.Variable],
    [ZrInstructionType.BitwiseShiftRight]: [ZrInstructionParamType.Variable, ZrInstructionParamType.Variable],
    [ZrInstructionType.FunctionCall]: [ZrInstructionParamType.Variable, ZrInstructionParamType.Variable],
    [ZrInstructionType.FunctionTailCall]: [ZrInstructionParamType.Variable, ZrInstructionParamType.Variable],
    [ZrInstructionType.FunctionReturn]: [ZrInstructionParamType.Variable, ZrInstructionParamType.Variable],
    [ZrInstructionType.GetValue]: [ZrInstructionParamType.Variable],
    [ZrInstructionType.SetValue]: [ZrInstructionParamType.Variable],
    [ZrInstructionType.Jump]: [ZrInstructionParamType.Variable],
    [ZrInstructionType.JumpIf]: [ZrInstructionParamType.Variable],
    [ZrInstructionType.CreateClosure]: [ZrInstructionParamType.Variable, ZrInstructionParamType.Variable],
    [ZrInstructionType.Try]: [ZrInstructionParamType.Variable],
    [ZrInstructionType.Throw]: [ZrInstructionParamType.Variable],
    [ZrInstructionType.Catch]: [ZrInstructionParamType.Variable]
};

export const ZrInstructionTypeMap = {
    [ZrInstructionType.GetStack]: "GetStack",
    [ZrInstructionType.SetStack]: "SetStack",
    [ZrInstructionType.GetConstant]: "GetConstant",
    [ZrInstructionType.SetConstant]: "SetConstant",
    [ZrInstructionType.GetClosure]: "GetClosure",
    [ZrInstructionType.SetClosure]: "SetClosure",
    [ZrInstructionType.AddInt]: "AddInt",
    [ZrInstructionType.AddFloat]: "AddFloat",
    [ZrInstructionType.AddString]: "AddString",
    [ZrInstructionType.SubInt]: "SubInt",
    [ZrInstructionType.SubFloat]: "SubFloat",
    [ZrInstructionType.MulSigned]: "MulSigned",
    [ZrInstructionType.MulUnsigned]: "MulUnsigned",
    [ZrInstructionType.MulFloat]: "MulFloat",
    [ZrInstructionType.DivSigned]: "DivSigned",
    [ZrInstructionType.DivUnsigned]: "DivUnsigned",
    [ZrInstructionType.DivFloat]: "DivFloat",
    [ZrInstructionType.ModSigned]: "ModSigned",
    [ZrInstructionType.ModUnsigned]: "ModUnsigned",
    [ZrInstructionType.ModFloat]: "ModFloat",
    [ZrInstructionType.PowSigned]: "PowSigned",
    [ZrInstructionType.PowUnsigned]: "PowUnsigned",
    [ZrInstructionType.PowFloat]: "PowFloat",
    [ZrInstructionType.ShiftLeft]: "ShiftLeft",
    [ZrInstructionType.ShiftRight]: "ShiftRight",
    [ZrInstructionType.LogicalNot]: "LogicalNot",
    [ZrInstructionType.LogicalAnd]: "LogicalAnd",
    [ZrInstructionType.LogicalOr]: "LogicalOr",
    [ZrInstructionType.LogicalGreaterSigned]: "LogicalGreaterSigned",
    [ZrInstructionType.LogicalGreaterUnsigned]: "LogicalGreaterUnsigned",
    [ZrInstructionType.LogicalGreaterFloat]: "LogicalGreaterFloat",
    [ZrInstructionType.LogicalLessSigned]: "LogicalLessSigned",
    [ZrInstructionType.LogicalLessUnsigned]: "LogicalLessUnsigned",
    [ZrInstructionType.LogicalLessFloat]: "LogicalLessFloat",
    [ZrInstructionType.LogicalEqual]: "LogicalEqual",
    [ZrInstructionType.LogicalNotEqual]: "LogicalNotEqual",
    [ZrInstructionType.LogicalGreaterEqualSigned]: "LogicalGreaterEqualSigned",
    [ZrInstructionType.LogicalGreaterEqualUnsigned]: "LogicalGreaterEqualUnsigned",
    [ZrInstructionType.LogicalGreaterEqualFloat]: "LogicalGreaterEqualFloat",
    [ZrInstructionType.LogicalLessEqualSigned]: "LogicalLessEqualSigned",
    [ZrInstructionType.LogicalLessEqualUnsigned]: "LogicalLessEqualUnsigned",
    [ZrInstructionType.LogicalLessEqualFloat]: "LogicalLessEqualFloat",
    [ZrInstructionType.BitwiseNot]: "BitwiseNot",
    [ZrInstructionType.BitwiseAnd]: "BitwiseAnd",
    [ZrInstructionType.BitwiseOr]: "BitwiseOr",
    [ZrInstructionType.BitwiseXor]: "BitwiseXor",
    [ZrInstructionType.BitwiseShiftLeft]: "BitwiseShiftLeft",
    [ZrInstructionType.BitwiseShiftRight]: "BitwiseShiftRight",
    [ZrInstructionType.FunctionCall]: "FunctionCall",
    [ZrInstructionType.FunctionTailCall]: "FunctionTailCall",
    [ZrInstructionType.FunctionReturn]: "FunctionReturn",
    [ZrInstructionType.GetValue]: "GetValue",
    [ZrInstructionType.SetValue]: "SetValue",
    [ZrInstructionType.Jump]: "Jump",
    [ZrInstructionType.JumpIf]: "JumpIf",
    [ZrInstructionType.CreateClosure]: "CreateClosure",
    [ZrInstructionType.Try]: "Try",
    [ZrInstructionType.Throw]: "Throw",
    [ZrInstructionType.Catch]: "Catch"
};

export const ZrInstructionTypeNameMap: Map<string, ZrInstructionType> = new Map();
for (const [key, value] of Object.entries(ZrInstructionTypeMap)) {
    ZrInstructionTypeNameMap.set(value.toLowerCase(), key as any as ZrInstructionType);
}
