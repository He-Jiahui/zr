module("math");

// basic types:

// int = i32
// i8
// i16
// i32
// i64
// u8
// u16
// u32
// u64

// float = f32
// f16
// f32
// f64

// bool true&false

// str

// buffer (array/struct/tuple)

// object (ptr)

// type:object


// buffer: [x,y,z]


// 

// buffer size<T>
// size = 4*T
// <> means compile time
struct Vector<T:int>:buffer<T*(sizeof(int)/(sizeof(byte)))>{

}
// size = 12
struct Vector3{
    pub var x:float;
    pub var y:float;
    pub var z:float;

    pub @constructor(x:float, y:float, z:float){

    }
    pub @destructor(){

    }

    pub @add(){

    }
}



// math functions
class Math{
    pub static var PI = 3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679;
    pub static var E = 2.7182818284590452353602874713526624977572470936999595749669676277240766303535475945713821785251664274;

    

    pub static lerp(a:float, b:float, t:float):float{
        return a + (b-a)*t;
    }
    pub static pingpong(a:float, b:float, t:float):float{
        return Math.lerp(a, b, Math.abs(Math.fract(t)-0.5)*2);
    }
    pub static fract(x:float):float{
        return x - floor(x);
    }
    pub static floor(x:float):float{
        return x - fract(x);
    }
    pub static abs(x:float):float{
        return x < 0 ? -x : x;
    }
    
}